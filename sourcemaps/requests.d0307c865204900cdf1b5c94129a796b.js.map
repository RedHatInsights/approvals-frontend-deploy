{"version":3,"file":"js/requests.js","mappings":"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","sources":["webpack:///./src/smart-components/request/allrequests.js","webpack:///./src/smart-components/request/request-table-helpers.js","webpack:///./src/smart-components/request/chips-helpers.js","webpack:///./src/smart-components/request/requests-list.js","webpack:///./src/smart-components/request/EmptyRequestList.js","webpack:///./src/smart-components/request/requests.js"],"sourcesContent":["import React from 'react';\nimport { APPROVAL_ADMIN_PERSONA } from '../../helpers/shared/helpers';\nimport RequestsList from './requests-list';\nimport routes from '../../constants/routes';\n\nconst AllRequests = () => (\n  <RequestsList\n    persona={ APPROVAL_ADMIN_PERSONA }\n    indexpath={ routes.allrequest }\n  />\n);\n\nexport default AllRequests;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { timeAgo }  from '../../helpers/shared/helpers';\nimport routes from '../../constants/routes';\nimport { Label } from '@patternfly/react-core';\nimport { decisionValues, untranslatedMessage } from '../../utilities/constants';\n\nexport const capitlize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const createRows = (actionResolver, data, indexpath = routes.request, intl) => data.reduce((acc, request) => ([\n  ...acc, {\n    id: request.id,\n    state: request.state,\n    number_of_children: request.number_of_children,\n    cells: [\n      <Fragment key={ request.id }>\n        <Link to={\n          { pathname: indexpath.index, search: `?request=${request.id}` } }>\n          { request.id }\n        </Link>\n      </Fragment>,\n      request.name,\n      request.requester_name,\n      request.finished_at ? timeAgo(request.finished_at) : (request.notified_at ? timeAgo(request.notified_at) : timeAgo(request.created_at)),\n      <Fragment key={ `decision-${request.id}` }>\n        { actionResolver(request) || (<Label\n          variant=\"outline\"\n          icon={ decisionValues[request.decision]?.icon }\n          color={ decisionValues[request.decision]?.color }\n        >\n          { capitlize(intl.formatMessage(\n            decisionValues[request.decision]?.displayName || untranslatedMessage()\n          )) }\n        </Label>) }\n      </Fragment>\n    ]\n  }\n]), []);\n","import tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\n\nexport const prepareChips = ({ name, requester, decision }, intl) => ([\n  ...(name ? [{\n    category: intl.formatMessage(tableToolbarMessages.name),\n    key: 'name',\n    chips: [{ name, value: name }]\n  }] : []),\n  ...(requester ? [{\n    category: intl.formatMessage(requestsMessages.requesterColumn),\n    key: 'requester',\n    chips: [{ name: requester, value: requester }]\n  }] : []),\n  ...(decision && decision.length > 0 ? [{\n    category: intl.formatMessage(requestsMessages.statusColumn),\n    key: 'decision',\n    chips: decision.map(dec => ({ name: dec, value: dec }))\n  }] : [])\n]);\n","\nimport React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { sortable, wrappable, cellWidth, breakWord } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { fetchRequests,\n  sortRequests,\n  setFilterValueRequests,\n  clearFilterValueRequests,\n  resetRequestList } from '../../redux/actions/request-actions';\nimport { createRows } from './request-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin, useIsApprovalApprover } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport UserContext from '../../user-context';\nimport { prepareChips } from './chips-helpers';\nimport routes from '../../constants/routes';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\nimport { Route } from 'react-router-dom';\nimport routesLinks from '../../constants/routes';\nimport ActionModal from './action-modal';\n\nconst columns = (intl) => [{\n  title: intl.formatMessage(requestsMessages.requestsIdColumn),\n  transforms: [ sortable, cellWidth(10) ]\n},\n{ title: intl.formatMessage(tableToolbarMessages.name), transforms: [ sortable, wrappable, cellWidth(25) ], cellTransforms: [ breakWord ]},\n{ title: intl.formatMessage(requestsMessages.requesterColumn), transforms: [ sortable, wrappable, cellWidth(25) ]},\n{ title: intl.formatMessage(requestsMessages.updatedColumn), transforms: [ cellWidth(15) ]},\n{ title: intl.formatMessage(requestsMessages.statusColumn), transforms: [ sortable, cellWidth(25) ]}\n];\n\nconst debouncedFilter = asyncDebounce(\n  (dispatch, filteringCallback, persona, updateFilter) => {\n    filteringCallback(true);\n    updateFilter && updateFilter();\n    return dispatch(fetchRequests(persona)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = (nameValue = '', requesterValue = '') => ({\n  nameValue,\n  requesterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  rows: []\n});\n\nconst requestsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setNameValue':\n      return { ...state, nameValue: action.payload };\n    case 'setRequesterValue':\n      return { ...state, requesterValue: action.payload };\n    case 'clearFilters':\n      return { ...state, requesterValue: '', nameValue: '', isFetching: true };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setRows':\n      return { ...state, rows: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst RequestsList = ({ persona, indexpath, actionResolver }) => {\n  const { requests: { data, meta }, sortBy, filterValue } = useSelector(\n    ({ requestReducer: { requests, sortBy, filterValue }}) => ({ requests, sortBy, filterValue }),\n    shallowEqual\n  );\n  const [{ nameValue, isFetching, isFiltering, requesterValue, rows }, stateDispatch ] = useReducer(\n    requestsListState,\n    initialState(filterValue.name, filterValue.requester)\n  );\n\n  const { userRoles: userRoles } = useContext(UserContext);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const noRequestsMessage = () => (indexpath === routesLinks.allrequest) ?\n    intl.formatMessage(requestsMessages.emptyAllRequestsDescription) : intl.formatMessage(requestsMessages.emptyRequestsDescription);\n\n  const updateRequests = (pagination) => {\n    if (!isApprovalApprover && persona === APPROVAL_APPROVER_PERSONA) {\n      stateDispatch({ type: 'setFetching', payload: false });\n      return;\n    }\n\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchRequests(persona, pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.requests.comment } render={ props => <ActionModal { ...props }\n      actionType={ 'Comment' }\n      postMethod={ () => updateRequests(meta) }\n    /> }/>\n    <Route exact path={ routesLinks.requests.approve } render={ props => <ActionModal { ...props } actionType={ 'Approve' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n    <Route exact path={ routesLinks.requests.deny } render={ props => <ActionModal { ...props } actionType={ 'Deny' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n  </Fragment>;\n\n  const resetList = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueRequests());\n    dispatch(resetRequestList());\n  };\n\n  useEffect(() => {\n    resetList();\n    updateRequests();\n  }, [ persona ]);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(actionResolver, data, indexpath, intl) });\n  }, [ data ]);\n\n  const handleFilterChange = (value, type) => {\n    const updateFilter = () => dispatch(setFilterValueRequests(value, type));\n\n    let debouncedValue = false;\n\n    if (type === 'name') {\n      stateDispatch({ type: 'setNameValue', payload: value });\n      debouncedValue = true;\n    } else if (type === 'requester') {\n      stateDispatch({ type: 'setRequesterValue', payload: value });\n      debouncedValue = true;\n    }\n\n    if (!debouncedValue) {\n      dispatch(setFilterValueRequests(value, type));\n    }\n\n    return debouncedFilter(\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      persona,\n      debouncedValue && updateFilter\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    dispatch(sortRequests({ index, direction, property }));\n    return updateRequests();\n  };\n\n  const clearFilters = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueRequests());\n    return updateRequests();\n  };\n\n  const onDeleteChip = ([{ key, chips: [{ value }] }]) => {\n    const newValue = [ 'name', 'requester' ].includes(key) ? '' : filterValue[key].filter(val => value !== val);\n    handleFilterChange(newValue, key);\n  };\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <TableToolbarView\n        ouiaId={ 'requests-table' }\n        sortBy={ sortBy }\n        onSort={ onSort }\n        rows={ rows }\n        columns={ columns(intl) }\n        fetchData={ updateRequests }\n        routes={ routes }\n        titlePlural={ intl.formatMessage(requestsMessages.requests) }\n        titleSingular={ intl.formatMessage(requestsMessages.request) }\n        pagination={ meta }\n        handlePagination={ updateRequests }\n        filterValue={ nameValue }\n        onFilterChange={ (value) => handleFilterChange(value, 'name') }\n        isLoading={ isFetching || isFiltering }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ isEmpty(filterValue)\n              ? intl.formatMessage(requestsMessages.emptyRequestsTitle)\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            icon={ isEmpty(filterValue) ? CubesIcon : SearchIcon }\n            PrimaryAction={ () =>\n              isEmpty(filterValue) ? noRequestsMessage() : (\n                <Button onClick={ clearFilters } variant=\"link\" ouiaId={ `clear-filter-requests` }>\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              )\n            }\n            description={\n              isEmpty(filterValue)\n                ? ''\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n            isSearch={ !isEmpty(filterValue) }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips({ name: nameValue, requester: requesterValue, decision: filterValue.decision }, intl),\n          onDelete: (_e, chip, deleteAll) => deleteAll ? clearFilters() : onDeleteChip(chip)\n        } }\n        filterConfig={ [\n          {\n            label: intl.formatMessage(requestsMessages.requesterColumn),\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'requester'),\n              value: requesterValue\n            }\n          }, {\n            label: intl.formatMessage(requestsMessages.statusColumn),\n            type: 'checkbox',\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'decision'),\n              value: filterValue.decision,\n              items: [ 'approved', 'canceled', 'denied', 'error', 'undecided' ].map((state) => ({\n                label: intl.formatMessage(requestsMessages[state]),\n                value: state\n              }))\n            }\n          }\n        ] }\n      />\n    </Fragment>);\n};\n\nRequestsList.propTypes = {\n  routes: PropTypes.func,\n  persona: PropTypes.string,\n  indexpath: PropTypes.shape ({ index: PropTypes.string }),\n  actionResolver: PropTypes.func\n};\n\nRequestsList.defaultProps = {\n  indexpath: routes.request,\n  actionResolver: () => false\n};\n\nexport default RequestsList;\n","import React, { Fragment, useContext } from 'react';\nimport { useIsApprovalAdmin } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport UserContext from '../../user-context';\nimport {  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nconst EmptyRequestList = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const intl = useIntl();\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n        <EmptyStateIcon icon={ CubesIcon } />\n        <TextContent>\n          <Text component={ TextVariants.h1 }>\n            { intl.formatMessage(requestsMessages.emptyRequestsTitle) }\n          </Text>\n        </TextContent>\n        <EmptyStateBody>\n          { intl.formatMessage(requestsMessages.emptyRequestsDescription) }\n        </EmptyStateBody>\n      </EmptyState>\n      <EmptyStateSecondaryActions>\n      </EmptyStateSecondaryActions>\n    </Fragment>);\n};\n\nexport default EmptyRequestList;\n","import React, { useContext } from 'react';\nimport {\n  APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin,\n  useIsApprovalApprover,\n  isRequestStateActive\n} from '../../helpers/shared/helpers';\nimport UserContext from '../../user-context';\nimport routesLinks from '../../constants/routes';\nimport RequestsList from './requests-list';\nimport EmptyRequestList from './EmptyRequestList';\n\nimport RequestActions from './request-actions';\n\nconst Requests = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const actionsDisabled = (requestData) => requestData &&\n    requestData.state ?\n    !isRequestStateActive(requestData.state) || requestData.number_of_children > 0 ||\n      (!isApprovalApprover && !isApprovalAdmin) : true;\n\n  const actionResolver = (request) => (\n    request && request.id && actionsDisabled(request)\n      ? null\n      : <RequestActions\n        commentLink={ routesLinks.requests.comment }\n        approveLink={ routesLinks.requests.approve }\n        denyLink={ routesLinks.requests.deny }\n        request={ request }\n      />\n  );\n\n  return !isApprovalApprover ?\n    <EmptyRequestList/>\n    : <RequestsList\n      persona={ APPROVAL_APPROVER_PERSONA }\n      actionResolver={ actionResolver }\n    />;\n};\n\nexport default Requests;\n"],"names":["persona","APPROVAL_ADMIN_PERSONA","indexpath","routes","capitlize","str","charAt","toUpperCase","slice","createRows","actionResolver","data","intl","reduce","acc","request","id","state","number_of_children","cells","Fragment","key","Link","to","pathname","index","search","name","requester_name","finished_at","timeAgo","notified_at","created_at","Label","variant","icon","decisionValues","decision","color","formatMessage","displayName","untranslatedMessage","prepareChips","requester","category","tableToolbarMessages","chips","value","requestsMessages","length","map","dec","columns","title","transforms","sortable","cellWidth","wrappable","cellTransforms","breakWord","debouncedFilter","asyncDebounce","dispatch","filteringCallback","updateFilter","fetchRequests","then","requestsListState","action","type","isFetching","payload","nameValue","requesterValue","isFiltering","rows","RequestsList","useSelector","requestReducer","requests","sortBy","filterValue","shallowEqual","meta","useReducer","isOpen","initialState","stateDispatch","userRoles","useContext","UserContext","useDispatch","useIntl","isApprovalAdmin","useIsApprovalAdmin","isApprovalApprover","useIsApprovalApprover","updateRequests","pagination","APPROVAL_APPROVER_PERSONA","useEffect","clearFilterValueRequests","resetRequestList","handleFilterChange","debouncedValue","setFilterValueRequests","clearFilters","commonMessages","ouiaId","onSort","_e","direction","property","sortRequests","fetchData","Route","exact","path","routesLinks","render","props","actionType","postMethod","titlePlural","titleSingular","handlePagination","onFilterChange","isLoading","renderEmptyState","isEmpty","CubesIcon","SearchIcon","PrimaryAction","Button","onClick","description","isSearch","activeFiltersConfig","filters","onDelete","chip","deleteAll","newValue","includes","filter","val","filterConfig","label","filterValues","placeholder","toLowerCase","onChange","_event","items","propTypes","PropTypes","defaultProps","EmptyState","className","EmptyStateIcon","TextContent","Text","component","TextVariants","EmptyStateBody","EmptyStateSecondaryActions","requestData","isRequestStateActive","commentLink","approveLink","denyLink"],"sourceRoot":""}