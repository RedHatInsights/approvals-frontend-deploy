{"version":3,"sources":["webpack:///./src/smart-components/request/request-table-helpers.js","webpack:///./src/smart-components/request/chips-helpers.js","webpack:///./src/smart-components/request/requests-list.js","webpack:///./src/smart-components/request/allrequests.js","webpack:///./src/smart-components/request/EmptyRequestList.js","webpack:///./src/smart-components/request/requests.js"],"names":["capitlize","str","charAt","toUpperCase","slice","createRows","actionResolver","data","indexpath","routes","request","intl","reduce","acc","id","state","number_of_children","cells","key","to","pathname","index","search","name","requester_name","finished_at","timeAgo","notified_at","created_at","Label","variant","icon","decisionValues","decision","color","formatMessage","displayName","untranslatedMessage","prepareChips","requester","category","tableToolbarMessages","chips","value","requestsMessages","requesterColumn","length","statusColumn","map","dec","columns","title","requestsIdColumn","transforms","sortable","cellWidth","wrappable","cellTransforms","breakWord","updatedColumn","debouncedFilter","asyncDebounce","dispatch","filteringCallback","persona","updateFilter","fetchRequests","then","requestsListState","action","type","isFetching","payload","nameValue","requesterValue","isFiltering","rows","RequestsList","useSelector","requestReducer","requests","sortBy","filterValue","shallowEqual","meta","useReducer","isOpen","initialState","stateDispatch","userRoles","useContext","UserContext","useDispatch","useIntl","isApprovalAdmin","useIsApprovalAdmin","isApprovalApprover","useIsApprovalApprover","updateRequests","pagination","APPROVAL_APPROVER_PERSONA","useEffect","resetRequestList","scrollToTop","handleFilterChange","debouncedValue","setFilterValueRequests","clearFilters","clearFilterValueRequests","commonMessages","approvalTitle","onSort","_e","direction","property","sortRequests","fetchData","exact","path","routesLinks","comment","render","props","actionType","postMethod","approve","deny","titlePlural","titleSingular","handlePagination","onFilterChange","isLoading","renderEmptyState","isEmpty","emptyRequestsTitle","noResultsFound","Icon","SearchIcon","PrimaryAction","allrequest","emptyAllRequestsDescription","emptyRequestsDescription","Button","onClick","clearAllFilters","description","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete","chip","deleteAll","newValue","includes","filter","val","filterConfig","label","filterValues","placeholder","filterByTitle","toLowerCase","onChange","_event","items","propTypes","PropTypes","func","string","shape","defaultProps","AllRequests","APPROVAL_ADMIN_PERSONA","EmptyRequestList","className","EmptyState","EmptyStateIcon","TextContent","Text","component","TextVariants","h1","EmptyStateBody","EmptyStateSecondaryActions","Requests","requestData","isRequestStateActive","commentLink","approveLink","denyLink"],"mappings":"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","file":"js/requests~3c3c4c71.fe6ac45bf78d44796a71.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { timeAgo }  from '../../helpers/shared/helpers';\nimport routes from '../../constants/routes';\nimport { Label } from '@patternfly/react-core';\nimport { decisionValues, untranslatedMessage } from '../../utilities/constants';\n\nexport const capitlize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const createRows = (actionResolver, data, indexpath = routes.request, intl) => data.reduce((acc, request) => ([\n  ...acc, {\n    id: request.id,\n    state: request.state,\n    number_of_children: request.number_of_children,\n    cells: [\n      <Fragment key={ request.id }>\n        <Link to={\n          { pathname: indexpath.index, search: `?request=${request.id}` } }>\n          { request.id }\n        </Link>\n      </Fragment>,\n      request.name,\n      request.requester_name,\n      request.finished_at ? timeAgo(request.finished_at) : (request.notified_at ? timeAgo(request.notified_at) : timeAgo(request.created_at)),\n      <Fragment key={ `decision-${request.id}` }>\n        { actionResolver(request) || (<Label\n          variant=\"outline\"\n          icon={ decisionValues[request.decision]?.icon }\n          color={ decisionValues[request.decision]?.color }\n        >\n          { capitlize(intl.formatMessage(\n              decisionValues[request.decision]?.displayName || untranslatedMessage()\n          )) }\n        </Label>) }\n      </Fragment>\n    ]\n  }\n]), []);\n","import tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\n\nexport const prepareChips = ({ name, requester, decision }, intl) => ([\n  ...(name ? [{\n    category: intl.formatMessage(tableToolbarMessages.name),\n    key: 'name',\n    chips: [{ name, value: name }]\n  }] : []),\n  ...(requester ? [{\n    category: intl.formatMessage(requestsMessages.requesterColumn),\n    key: 'requester',\n    chips: [{ name: requester, value: requester }]\n  }] : []),\n  ...(decision && decision.length > 0 ? [{\n    category: intl.formatMessage(requestsMessages.statusColumn),\n    key: 'decision',\n    chips: decision.map(dec => ({ name: dec, value: dec }))\n  }] : [])\n]);\n","\nimport React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { sortable, wrappable, cellWidth, breakWord } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { fetchRequests,\n  sortRequests,\n  setFilterValueRequests,\n  clearFilterValueRequests,\n  resetRequestList } from '../../redux/actions/request-actions';\nimport { createRows } from './request-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin, useIsApprovalApprover } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport UserContext from '../../user-context';\nimport { prepareChips } from './chips-helpers';\nimport routes from '../../constants/routes';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\nimport { Route } from 'react-router-dom';\nimport routesLinks from '../../constants/routes';\nimport ActionModal from './action-modal';\n\nconst columns = (intl) => [{\n  title: intl.formatMessage(requestsMessages.requestsIdColumn),\n  transforms: [ sortable, cellWidth(10) ]\n},\n{ title: intl.formatMessage(tableToolbarMessages.name), transforms: [ sortable, wrappable, cellWidth(25) ], cellTransforms: [ breakWord ]},\n{ title: intl.formatMessage(requestsMessages.requesterColumn), transforms: [ sortable, wrappable, cellWidth(25) ]},\n{ title: intl.formatMessage(requestsMessages.updatedColumn), transforms: [ cellWidth(15) ]},\n{ title: intl.formatMessage(requestsMessages.statusColumn), transforms: [ sortable, cellWidth(25) ]}\n];\n\nconst debouncedFilter = asyncDebounce(\n  (dispatch, filteringCallback, persona, updateFilter) => {\n    filteringCallback(true);\n    updateFilter && updateFilter();\n    return dispatch(fetchRequests(persona)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = (nameValue = '', requesterValue = '') => ({\n  nameValue,\n  requesterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  rows: []\n});\n\nconst requestsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setNameValue':\n      return { ...state, nameValue: action.payload };\n    case 'setRequesterValue':\n      return { ...state, requesterValue: action.payload };\n    case 'clearFilters':\n      return { ...state, requesterValue: '', nameValue: '', isFetching: true };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setRows':\n      return { ...state, rows: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst RequestsList = ({ persona, indexpath, actionResolver }) => {\n  const { requests: { data, meta }, sortBy, filterValue } = useSelector(\n    ({ requestReducer: { requests, sortBy, filterValue }}) => ({ requests, sortBy, filterValue }),\n    shallowEqual\n  );\n  const [{ nameValue, isFetching, isFiltering, requesterValue, rows }, stateDispatch ] = useReducer(\n    requestsListState,\n    initialState(filterValue.name, filterValue.requester)\n  );\n\n  const { userRoles: userRoles } = useContext(UserContext);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const noRequestsMessage = () => (indexpath === routesLinks.allrequest) ?\n    intl.formatMessage(requestsMessages.emptyAllRequestsDescription) : intl.formatMessage(requestsMessages.emptyRequestsDescription);\n\n  const updateRequests = (pagination) => {\n    if (!isApprovalApprover && persona === APPROVAL_APPROVER_PERSONA) {\n      stateDispatch({ type: 'setFetching', payload: false });\n      return;\n    }\n\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchRequests(persona, pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.requests.comment } render={ props => <ActionModal { ...props }\n      actionType={ 'Comment' }\n      postMethod={ () => updateRequests(meta) }\n    /> }/>\n    <Route exact path={ routesLinks.requests.approve } render={ props => <ActionModal { ...props } actionType={ 'Approve' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n    <Route exact path={ routesLinks.requests.deny } render={ props => <ActionModal { ...props } actionType={ 'Deny' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n  </Fragment>;\n\n  const resetList = () => {\n    dispatch(resetRequestList());\n  };\n\n  useEffect(() => {\n    resetList();\n    updateRequests();\n    scrollToTop();\n  }, [ persona ]);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(actionResolver, data, indexpath, intl) });\n  }, [ data ]);\n\n  const handleFilterChange = (value, type) => {\n    const updateFilter = () => dispatch(setFilterValueRequests(value, type));\n\n    let debouncedValue = false;\n\n    if (type === 'name') {\n      stateDispatch({ type: 'setNameValue', payload: value });\n      debouncedValue = true;\n    } else if (type === 'requester') {\n      stateDispatch({ type: 'setRequesterValue', payload: value });\n      debouncedValue = true;\n    }\n\n    if (!debouncedValue) {\n      dispatch(setFilterValueRequests(value, type));\n    }\n\n    return debouncedFilter(\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      persona,\n      debouncedValue && updateFilter\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    dispatch(sortRequests({ index, direction, property }));\n    return updateRequests();\n  };\n\n  const clearFilters = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueRequests());\n    return updateRequests();\n  };\n\n  const onDeleteChip = ([{ key, chips: [{ value }] }]) => {\n    const newValue = [ 'name', 'requester' ].includes(key) ? '' : filterValue[key].filter(val => value !== val);\n    handleFilterChange(newValue, key);\n  };\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={ sortBy }\n        onSort={ onSort }\n        rows={ rows }\n        columns={ columns(intl) }\n        fetchData={ updateRequests }\n        routes={ routes }\n        titlePlural={ intl.formatMessage(requestsMessages.requests) }\n        titleSingular={ intl.formatMessage(requestsMessages.request) }\n        pagination={ meta }\n        handlePagination={ updateRequests }\n        filterValue={ nameValue }\n        onFilterChange={ (value) => handleFilterChange(value, 'name') }\n        isLoading={ isFetching || isFiltering }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ isEmpty(filterValue)\n              ? intl.formatMessage(requestsMessages.emptyRequestsTitle)\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            Icon={ SearchIcon }\n            PrimaryAction={ () =>\n              isEmpty(filterValue) ? noRequestsMessage() : (\n                <Button onClick={ clearFilters } variant=\"link\">\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              )\n            }\n            description={\n              isEmpty(filterValue)\n                ? ''\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips({ name: nameValue, requester: requesterValue, decision: filterValue.decision }, intl),\n          onDelete: (_e, chip, deleteAll) => deleteAll ? clearFilters() : onDeleteChip(chip)\n        } }\n        filterConfig={ [\n          {\n            label: intl.formatMessage(requestsMessages.requesterColumn),\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'requester'),\n              value: requesterValue\n            }\n          }, {\n            label: intl.formatMessage(requestsMessages.statusColumn),\n            type: 'checkbox',\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'decision'),\n              value: filterValue.decision,\n              items: [ 'approved', 'canceled', 'denied', 'error', 'undecided' ].map((state) => ({\n                label: intl.formatMessage(requestsMessages[state]),\n                value: state\n              }))\n            }\n          }\n        ] }\n      />\n    </Fragment>);\n};\n\nRequestsList.propTypes = {\n  routes: PropTypes.func,\n  persona: PropTypes.string,\n  indexpath: PropTypes.shape ({ index: PropTypes.string }),\n  actionResolver: PropTypes.func\n};\n\nRequestsList.defaultProps = {\n  indexpath: routes.request,\n  actionResolver: () => false\n};\n\nexport default RequestsList;\n","import React from 'react';\nimport { APPROVAL_ADMIN_PERSONA } from '../../helpers/shared/helpers';\nimport RequestsList from './requests-list';\nimport routes from '../../constants/routes';\n\nconst AllRequests = () => (\n  <RequestsList\n    persona={ APPROVAL_ADMIN_PERSONA }\n    indexpath={ routes.allrequest }\n  />\n);\n\nexport default AllRequests;\n","import React, { Fragment, useContext } from 'react';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { useIsApprovalAdmin } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport UserContext from '../../user-context';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\n\nconst EmptyRequestList = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <div className=\"pf-u-mt-xl\">\n        <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n          <EmptyStateIcon icon={ SearchIcon } />\n          <TextContent>\n            <Text component={ TextVariants.h1 }>\n              { intl.formatMessage(requestsMessages.emptyRequestsTitle) }\n            </Text>\n          </TextContent>\n          <EmptyStateBody>\n            { intl.formatMessage(requestsMessages.emptyRequestsDescription) }\n          </EmptyStateBody>\n        </EmptyState>\n        <EmptyStateSecondaryActions>\n        </EmptyStateSecondaryActions>\n      </div>\n    </Fragment>);\n};\n\nexport default EmptyRequestList;\n","import React, { useContext } from 'react';\nimport {\n  APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin,\n  useIsApprovalApprover,\n  isRequestStateActive\n} from '../../helpers/shared/helpers';\nimport UserContext from '../../user-context';\nimport routesLinks from '../../constants/routes';\nimport RequestsList from './requests-list';\nimport EmptyRequestList from './EmptyRequestList';\n\nimport RequestActions from './request-actions';\n\nconst Requests = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const actionsDisabled = (requestData) => requestData &&\n    requestData.state ?\n    !isRequestStateActive(requestData.state) || requestData.number_of_children > 0 ||\n      (!isApprovalApprover && !isApprovalAdmin) : true;\n\n  const actionResolver = (request) => (\n    request && request.id && actionsDisabled(request)\n      ? null\n      : <RequestActions\n        commentLink={ routesLinks.requests.comment }\n        approveLink={ routesLinks.requests.approve }\n        denyLink={ routesLinks.requests.deny }\n        request={ request }\n      />\n  );\n\n  return !isApprovalApprover ?\n    <EmptyRequestList/>\n    : <RequestsList\n      persona={ APPROVAL_APPROVER_PERSONA }\n      actionResolver={ actionResolver }\n    />;\n};\n\nexport default Requests;\n"],"sourceRoot":""}