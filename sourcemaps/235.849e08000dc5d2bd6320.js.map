{"version":3,"sources":["webpack:///./src/messages/action-modal.messages.js","webpack:///./src/helpers/request/request-helper.js","webpack:///./src/redux/actions/request-actions.js","webpack:///./src/forms/request-comment-form.schema.js","webpack:///./src/smart-components/request/action-modal.js","webpack:///./src/smart-components/request/request-actions.js"],"names":["defineMessages","require","requestActionDescription","id","defaultMessage","actionName","fulfilledAction","failedAction","successTitle","failedTitle","actionApi","getActionApi","graphqlInstance","getGraphqlInstance","sortPropertiesMapper","property","opened","requester","status","filterQuery","filterValue","query","name","push","decision","forEach","dec","join","fetchRequests","filter","pagination","defaultSettings","persona","undefined","sortBy","paginationQuery","Math","max","limit","offset","sortQuery","direction","fetchUrl","APPROVAL_API_BASE","fetchHeaders","getAxiosInstance","method","url","headers","fetchRequestTranscript","requestId","parent_id","APPROVAL_APPROVER_PERSONA","APPROVAL_REQUESTER_PERSONA","data","then","requests","fetchRequestCapabilities","isParent","fetchRequestWithSubrequests","requestData","length","number_of_children","result","map","request","find","item","metadata","createRequestAction","actionIn","createAction","dispatch","getState","requestReducer","finalPagination","meta","type","ActionTypes","payload","RequestHelper","fetchRequest","apiProps","fetchRequestContent","intl","notifications","fulfilled","variant","title","formatMessage","actionModalMessages","description","rejected","sortRequests","setFilterValueRequests","clearFilterValueRequests","resetRequestList","createRequestCommentSchema","commentRequired","fields","component","componentTypes","isRequired","label","requestsMessages","validate","validatorTypes","actionTypeToDescription","actionTypeToTitle","actionTypeToSubmitLabel","ActionModal","actionType","closeUrl","postMethod","useIntl","useHistory","useQuery","onCancel","Modal","header","Title","size","headingLevel","fill","className","isOpen","onClose","Stack","hasGutter","TextContent","Text","TextVariants","actionMessage","schema","onSubmit","operationType","Comment","Approve","Deny","operation","templateProps","submitLabel","defaultProps","routes","propTypes","PropTypes","patname","search","connect","bindActionCreators","RequestActions","denyLink","approveLink","commentLink","canApproveDeny","canComment","state","approveDenyAllowed","isRequestStateActive","commentAllowed","style","display","Link","to","pathname","Button","ouiaId","aria-label"],"mappings":"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","file":"js/235.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst actionModalMessages = defineMessages({\n  requestActionDescription: {\n    id: 'actionModal.requestDescription',\n    defaultMessage: '{actionMessage} {id}'\n  },\n  actionName: {\n    id: 'actionModal.actionName',\n    defaultMessage: '{actionType} Request'\n  },\n  fulfilledAction: {\n    id: 'actionModal.fullfiledAction',\n    defaultMessage: 'The {actionName} was successful.'\n  },\n  failedAction: {\n    id: 'actionModal.failedAction',\n    defaultMessage: 'The {actionName} action failed.'\n  },\n  successTitle: {\n    id: 'actionModal.successTitle',\n    defaultMessage: 'Success'\n  },\n  failedTitle: {\n    id: 'actionModal.failedTitle',\n    defaultMessage: '{actionName} error'\n  }\n});\n\nexport default actionModalMessages;\n","import { getActionApi, getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_REQUESTER_PERSONA, APPROVAL_APPROVER_PERSONA } from '../shared/helpers';\n\nconst actionApi = getActionApi();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sortPropertiesMapper = (property) => ({\n  'request-id': 'id',\n  opened: 'created_at',\n  requester: 'requester_name',\n  status: 'state'\n}[property] || property\n);\n\nconst filterQuery = (filterValue) => {\n  const query = [];\n  if (filterValue.name) {\n    query.push(`filter[name][contains_i]=${filterValue.name}`);\n  }\n\n  if (filterValue.requester) {\n    query.push(`filter[requester_name][contains_i]=${filterValue.requester}`);\n  }\n\n  if (filterValue.decision) {\n    filterValue.decision.forEach(dec => {\n      query.push(`filter[decision][eq][]=${dec}`);\n    });\n  }\n\n  return query.join('&');\n};\n\nexport function fetchRequests(filter = {}, pagination = defaultSettings, persona = undefined, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const sortQuery = `&sort_by=${sortPropertiesMapper(sortBy.property)}:${sortBy.direction}`;\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/?${filterQuery(filter)}${paginationQuery}${sortQuery}`;\n  const fetchHeaders = persona ? { 'x-rh-persona': persona } : undefined;\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n}\n\nconst requestTranscriptQuery = (parent_id) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    name\n    number_of_children\n    decision\n    description\n    group_name\n    number_of_finished_children\n    state\n    requester_name\n    actions {\n      id\n      operation\n      comments\n      created_at\n      processed_by\n    }\n    requests {\n      id\n      name\n      number_of_children\n      decision\n      description\n      group_name\n      number_of_finished_children\n      state\n      workflow_id\n      parent_id\n      actions {\n        id\n        operation\n        comments\n        created_at\n        processed_by\n      }\n    }\n  }\n}`;\n\nexport const fetchRequestTranscript = (requestId, persona) => {\n  const fetchHeaders = (persona && persona !== APPROVAL_APPROVER_PERSONA) ? { 'x-rh-persona': persona }\n    : { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return graphqlInstance({ method: 'post', url: `${APPROVAL_API_BASE}/graphql`,\n    headers: fetchHeaders, data: { query: requestTranscriptQuery(requestId) }})\n  .then(({ data: { requests }}) => requests);\n};\n\nexport const fetchRequestContent = (id) => {\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/${id}/content`;\n  const fetchHeaders = { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n};\n\nexport const fetchRequestCapabilities = (id, isParent) => {\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/${id}${isParent ? '/requests' : ''}`;\n  const fetchHeaders = { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n};\n\nexport async function fetchRequestWithSubrequests(id, persona) {\n  const requestData = await fetchRequestTranscript(id, persona);\n\n  if (!requestData || requestData.length === 0) { return {}; }\n\n  if (persona === APPROVAL_APPROVER_PERSONA) {\n    if (requestData && requestData.length > 0 && requestData[0].number_of_children > 0) {\n      const result = await fetchRequestCapabilities(id, true);\n\n      if (result && result.data) {\n        requestData[0].requests = requestData[0].requests.map(request => {\n          return {\n            ...result.data.find((item) => (item.id === request.id) && item.metadata),\n            ...request\n          };\n        });\n      }\n    }\n    else {\n      const request = await fetchRequestCapabilities(id, false);\n      if (request) {\n        requestData[0] = { ...requestData[0], metadata: request.metadata };\n      }\n    }\n  }\n\n  return requestData[0];\n}\n\nexport const createRequestAction = (requestId, actionIn) => actionApi.createAction(requestId, actionIn);\n","import * as ActionTypes from '../action-types';\nimport * as RequestHelper from '../../helpers/request/request-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport actionModalMessages from '../../messages/action-modal.messages';\n\nexport const fetchRequests = (persona, pagination) => (dispatch, getState) => {\n  const { sortBy, requests, filterValue } = getState().requestReducer;\n\n  let finalPagination = pagination || defaultSettings;\n\n  if (!pagination && requests) {\n    const { limit, offset } = requests.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch({\n    type: ActionTypes.FETCH_REQUESTS,\n    payload: RequestHelper.fetchRequests(filterValue, finalPagination, persona, sortBy)\n  });\n};\n\nexport const fetchRequest = (apiProps, persona) => ({\n  type: ActionTypes.FETCH_REQUEST,\n  payload: RequestHelper.fetchRequestWithSubrequests(apiProps, persona)\n});\n\nexport const fetchRequestContent = (apiProps, persona) => ({\n  type: ActionTypes.FETCH_REQUEST_CONTENT,\n  payload: RequestHelper.fetchRequestContent(apiProps, persona)\n});\n\nexport const createRequestAction = (actionName, requestId, actionIn, intl) => ({\n  type: ActionTypes.CREATE_REQUEST_ACTION,\n  payload: RequestHelper.createRequestAction(requestId, actionIn),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(actionModalMessages.successTitle),\n        description: intl.formatMessage(actionModalMessages.fulfilledAction, { actionName })\n      },\n      rejected: {\n        variant: 'danger',\n        title: intl.formatMessage(actionModalMessages.failedTitle, { actionName }),\n        description: intl.formatMessage(actionModalMessages.failedAction, { actionName })\n      }\n    }\n  }\n});\n\nexport const sortRequests = (sortBy) => ({\n  type: ActionTypes.SORT_REQUESTS,\n  payload: sortBy\n});\n\nexport const setFilterValueRequests = (filterValue, type) => ({\n  type: ActionTypes.SET_FILTER_REQUESTS,\n  payload: { filterValue, type }\n});\n\nexport const clearFilterValueRequests = () => ({\n  type: ActionTypes.CLEAR_FILTER_REQUESTS\n});\n\nexport const resetRequestList = () => ({\n  type: ActionTypes.RESET_REQUEST_LIST\n});\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport requestsMessages from '../messages/requests.messages';\n\nexport const createRequestCommentSchema = (commentRequired = false, intl) => ({\n  fields: [{\n    component: componentTypes.TEXTAREA,\n    name: 'comments',\n    isRequired: commentRequired,\n    label: commentRequired ? intl.formatMessage(requestsMessages.reasonTitle) : intl.formatMessage(requestsMessages.commentTitle),\n    ...(commentRequired && { validate: [{ type: validatorTypes.REQUIRED }]})\n  }]\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormRenderer from '../common/form-renderer';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Modal, Stack, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport { createRequestAction } from '../../redux/actions/request-actions';\nimport { createRequestCommentSchema } from '../../forms/request-comment-form.schema';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport actionModalMessages from '../../messages/action-modal.messages';\nimport requestsMessages from '../../messages/requests.messages';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nconst actionTypeToDescription = (type) => {\n  switch (type) {\n    case 'Approve':\n      return requestsMessages.approveDescription;\n    case 'Deny':\n      return requestsMessages.denyDescription;\n    default:\n      return requestsMessages.commentDescription;\n  }\n};\n\nconst actionTypeToTitle = (type) => {\n  switch (type) {\n    case 'Approve':\n      return requestsMessages.approveTitle;\n    case 'Deny':\n      return requestsMessages.denyTitle;\n    default:\n      return requestsMessages.commentTitle;\n  }\n};\n\nconst actionTypeToSubmitLabel = (type) => {\n  switch (type) {\n    case 'Approve':\n      return requestsMessages.approveLabel;\n    case 'Deny':\n      return requestsMessages.denyLabel;\n    default:\n      return requestsMessages.addCommentLabel;\n  }\n};\n\nconst ActionModal = ({\n  actionType,\n  createRequestAction,\n  closeUrl,\n  postMethod\n}) => {\n  const intl = useIntl();\n  const { push } = useHistory();\n  const [{ request: id }] = useQuery([ 'request' ]);\n  const onSubmit = (data) => {\n    const operationType = { Comment: 'memo', Approve: 'approve', Deny: 'deny' };\n    const actionName = actionType === 'Comment'\n      ? intl.formatMessage(requestsMessages.commentTitle)\n      : intl.formatMessage(actionModalMessages.actionName, { actionType: intl.formatMessage(actionTypeToTitle(actionType)) }) ;\n\n    return postMethod ?\n      createRequestAction(\n        actionName,\n        id,\n        { operation: operationType[actionType], ...data },\n        intl\n      ).then(() => postMethod()).then(() => push(closeUrl))\n      : createRequestAction(\n        actionName,\n        id,\n        { operation: operationType[actionType], ...data },\n        intl\n      ).then(() => push(closeUrl));\n  };\n\n  const onCancel = () => push(closeUrl);\n\n  return (\n    <Modal\n      variant=\"small\"\n      header={\n        <Title size=\"xl\" headingLevel=\"h4\">\n          { actionType === 'Deny' && <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" /> }\n          { intl.formatMessage(actionTypeToTitle(actionType)) }\n        </Title>\n      }\n      isOpen\n      onClose={ onCancel }\n    >\n      <Stack hasGutter>\n        <TextContent>\n          <Text component={ TextVariants.p }>\n            { intl.formatMessage(actionModalMessages.requestActionDescription,\n              { id: <b>{ id }</b>, actionMessage: intl.formatMessage(actionTypeToDescription(actionType)) }) }\n          </Text>\n        </TextContent>\n\n        <FormRenderer\n          schema={ createRequestCommentSchema(actionType === 'Deny' || actionType === 'Comment', intl) }\n          onSubmit={ onSubmit }\n          onCancel={ onCancel }\n          templateProps={ { submitLabel: intl.formatMessage(actionTypeToSubmitLabel(actionType)) } }\n        />\n      </Stack>\n    </Modal>\n  );\n};\n\nActionModal.defaultProps = {\n  closeUrl: routes.requests.index\n};\n\nActionModal.propTypes = {\n  createRequestAction: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  actionType: PropTypes.string,\n  closeUrl: PropTypes.oneOfType([ PropTypes.string, PropTypes.shape({ patname: PropTypes.string, search: PropTypes.string }) ])\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  createRequestAction\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(ActionModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Button } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport requestsMessages from '../../messages/requests.messages';\nimport { isRequestStateActive } from '../../helpers/shared/helpers';\n\nconst RequestActions = ({\n  denyLink,\n  approveLink,\n  commentLink,\n  request,\n  canApproveDeny,\n  canComment\n}) => {\n  const intl = useIntl();\n\n  const { id, state } = request;\n  const approveDenyAllowed = isRequestStateActive(state) && canApproveDeny;\n  const commentAllowed = canComment;\n\n  return (\n    <div style={ { display: 'flex' } }>\n      { approveDenyAllowed && (<React.Fragment>\n        <Link\n          to={ { pathname: approveLink, search: `request=${id}` } }\n          className=\"pf-u-mr-sm\"\n          id={ `approve-${request.id}` }\n        >\n          <Button\n            ouiaId={ `approve-request-${id}` }\n            variant=\"primary\"\n            aria-label={ intl.formatMessage(requestsMessages.approveRequest) }\n          >\n            { intl.formatMessage(requestsMessages.approveTitle) }\n          </Button>\n        </Link>\n        <Link\n          to={ { pathname: denyLink, search: `request=${id}` } }\n          className=\"pf-u-mr-sm\"\n          id={ `deny-${request.id}` }\n        >\n          <Button\n            ouiaId={ `deny-request-${id}` }\n            variant=\"danger\"\n            aria-label={ intl.formatMessage(requestsMessages.denyTitle) }\n          >\n            { intl.formatMessage(requestsMessages.denyTitle) }\n          </Button>\n        </Link>\n      </React.Fragment>) }\n      { commentAllowed && <Link\n        to={ { pathname: commentLink, search: `request=${id}` } }\n        id={ `comment-${request.id}` }\n      >\n        <Button\n          ouiaId={ `comment-request-${id}` }\n          variant=\"secondary\"\n          aria-label={ intl.formatMessage(requestsMessages.commentTitle) }\n        >\n          { intl.formatMessage(requestsMessages.commentTitle) }\n        </Button>\n      </Link> }\n    </div>\n  );\n};\n\nRequestActions.propTypes = {\n  denyLink: PropTypes.string,\n  approveLink: PropTypes.string,\n  commentLink: PropTypes.string,\n  request: PropTypes.object.isRequired,\n  canApproveDeny: PropTypes.bool,\n  canComment: PropTypes.bool\n};\n\nRequestActions.defaultProps = {\n  canApproveDeny: true,\n  canComment: true\n};\n\nexport default RequestActions;\n"],"sourceRoot":""}