{"version":3,"sources":["webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/index.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/bind.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/buildURL.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/cancel/isCancel.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/defaults.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/adapters/xhr.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/createError.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/mergeConfig.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/cancel/Cancel.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/index.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/utils.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/api.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/axios.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/Axios.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/InterceptorManager.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/dispatchRequest.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/transformData.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/settle.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/enhanceError.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/core/buildFullPath.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/combineURLs.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/parseHeaders.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/cookies.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/cancel/CancelToken.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/node_modules/axios/lib/helpers/spread.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/base.js","webpack:///./node_modules/@redhat-cloud-services/rbac-client/dist/configuration.js"],"names":["module","exports","fn","thisArg","args","Array","arguments","length","i","apply","utils","encode","val","encodeURIComponent","replace","url","params","paramsSerializer","serializedParams","isURLSearchParams","toString","parts","forEach","key","isArray","v","isDate","toISOString","isObject","JSON","stringify","push","join","hashmarkIndex","indexOf","slice","value","__CANCEL__","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","headers","isUndefined","adapter","defaults","XMLHttpRequest","process","Object","prototype","call","transformRequest","data","isFormData","isArrayBuffer","isBuffer","isStream","isFile","isBlob","isArrayBufferView","buffer","transformResponse","parse","e","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","validateStatus","status","common","method","merge","settle","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","config","Promise","resolve","reject","requestData","requestHeaders","request","auth","username","password","Authorization","btoa","fullPath","baseURL","open","toUpperCase","onreadystatechange","readyState","responseURL","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onabort","onerror","ontimeout","timeoutErrorMessage","isStandardBrowserEnv","cookies","xsrfValue","withCredentials","read","undefined","toLowerCase","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","enhanceError","message","code","error","Error","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","prop","deepMerge","axiosKeys","concat","otherKeys","keys","filter","Cancel","this","__export","m","p","hasOwnProperty","defineProperty","bind","isFunction","obj","l","constructor","FormData","ArrayBuffer","isView","isString","isNumber","pipe","URLSearchParams","navigator","product","window","document","result","assignValue","extend","a","b","trim","str","extendStatics","__extends","d","setPrototypeOf","__proto__","__","create","__assign","assign","t","s","n","globalImportUrl","axios_1","base_1","ResourceDefinitionFilterOperationEnum","AccessApiAxiosParamCreator","configuration","getPrincipalAccess","application","limit","offset","options","RequiredError","baseOptions","localVarUrlObj","localVarRequestOptions","localVarQueryParameter","query","search","headersFromBaseOptions","format","AccessApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","AccessApiFactory","AccessApi","_super","BaseAPI","GroupApiAxiosParamCreator","addPrincipalToGroup","uuid","groupPrincipalIn","localVarPath","String","localVarHeaderParameter","needsSerialization","addRoleToGroup","groupRoleIn","createGroup","group","deleteGroup","deletePrincipalFromGroup","usernames","deleteRoleFromGroup","roles","getGroup","getPrincipalsFromGroup","principalUsername","orderBy","listGroups","name","nameMatch","scope","roleNames","roleDiscriminator","COLLECTION_FORMATS","csv","listRolesForGroup","exclude","roleName","roleDescription","updateGroup","GroupApiFp","GroupApiFactory","GroupApi","PermissionApiAxiosParamCreator","listPermissionOptions","field","resourceType","verb","listPermissions","permission","PermissionApiFp","PermissionApiFactory","PermissionApi","PolicyApiAxiosParamCreator","createPolicies","policyIn","deletePolicy","getPolicy","listPolicies","groupName","groupUuid","updatePolicy","PolicyApiFp","PolicyApiFactory","PolicyApi","PrincipalApiAxiosParamCreator","listPrincipals","sortOrder","email","adminOnly","PrincipalApiFp","PrincipalApiFactory","PrincipalApi","RoleApiAxiosParamCreator","createRoles","roleIn","deleteRole","getRole","getRoleAccess","listRoles","addFields","updateRole","roleWithAccess","RoleApiFp","RoleApiFactory","RoleApi","StatusApiAxiosParamCreator","getStatus","StatusApiFp","StatusApiFactory","StatusApi","Axios","mergeConfig","createInstance","defaultConfig","context","instance","instanceConfig","CancelToken","isCancel","all","promises","spread","InterceptorManager","dispatchRequest","interceptors","chain","interceptor","unshift","fulfilled","rejected","shift","getUri","handlers","use","eject","id","h","transformData","throwIfCancellationRequested","throwIfRequested","reason","fns","normalizedName","isAxiosError","toJSON","description","number","fileName","lineNumber","columnNumber","stack","isAbsoluteURL","combineURLs","requestedURL","test","relativeURL","ignoreDuplicateOf","parsed","split","line","substr","originURL","msie","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","hash","hostname","port","pathname","charAt","location","requestURL","write","expires","path","domain","secure","cookie","Date","toGMTString","match","RegExp","decodeURIComponent","remove","now","executor","TypeError","resolvePromise","token","source","c","callback","arr","ssv","tsv","pipes","msg","_this","Configuration","param","apiKey","accessToken"],"mappings":"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","file":"js/lib~App~5650b515.c91fbf6dab71f842c472.js","sourcesContent":["module.exports = require('./lib/axios');","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath'\n  ];\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys);\n\n  var otherKeys = Object\n    .keys(config2)\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./api\"));\n__export(require(\"./configuration\"));\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar ResourceDefinitionFilterOperationEnum;\n(function (ResourceDefinitionFilterOperationEnum) {\n    ResourceDefinitionFilterOperationEnum[\"Equal\"] = \"equal\";\n    ResourceDefinitionFilterOperationEnum[\"In\"] = \"in\";\n})(ResourceDefinitionFilterOperationEnum = exports.ResourceDefinitionFilterOperationEnum || (exports.ResourceDefinitionFilterOperationEnum = {}));\n/**\n * AccessApi - axios parameter creator\n * @export\n */\nexports.AccessApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'application' is not null or undefined\n            if (application === null || application === undefined) {\n                throw new base_1.RequiredError('application', 'Required parameter application was null or undefined when calling getPrincipalAccess.');\n            }\n            var localVarPath = \"/access/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (application !== undefined) {\n                localVarQueryParameter['application'] = application;\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * AccessApi - functional programming interface\n * @export\n */\nexports.AccessApiFp = function (configuration) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            var localVarAxiosArgs = exports.AccessApiAxiosParamCreator(configuration).getPrincipalAccess(application, username, limit, offset, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * AccessApi - factory interface\n * @export\n */\nexports.AccessApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, limit, offset, options) {\n            return exports.AccessApiFp(configuration).getPrincipalAccess(application, username, limit, offset, options)(axios, basePath);\n        },\n    };\n};\n/**\n * AccessApi - object-oriented interface\n * @export\n * @class AccessApi\n * @extends {BaseAPI}\n */\nvar AccessApi = /** @class */ (function (_super) {\n    __extends(AccessApi, _super);\n    function AccessApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Access responses are sorted in ascending order by an ID internal to the database\n     * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n     * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccessApi\n     */\n    AccessApi.prototype.getPrincipalAccess = function (application, username, limit, offset, options) {\n        return exports.AccessApiFp(this.configuration).getPrincipalAccess(application, username, limit, offset, options)(this.axios, this.basePath);\n    };\n    return AccessApi;\n}(base_1.BaseAPI));\nexports.AccessApi = AccessApi;\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nexports.GroupApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addPrincipalToGroup.');\n            }\n            // verify required parameter 'groupPrincipalIn' is not null or undefined\n            if (groupPrincipalIn === null || groupPrincipalIn === undefined) {\n                throw new base_1.RequiredError('groupPrincipalIn', 'Required parameter groupPrincipalIn was null or undefined when calling addPrincipalToGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof groupPrincipalIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupPrincipalIn !== undefined ? groupPrincipalIn : {}) : (groupPrincipalIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addRoleToGroup.');\n            }\n            // verify required parameter 'groupRoleIn' is not null or undefined\n            if (groupRoleIn === null || groupRoleIn === undefined) {\n                throw new base_1.RequiredError('groupRoleIn', 'Required parameter groupRoleIn was null or undefined when calling addRoleToGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof groupRoleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupRoleIn !== undefined ? groupRoleIn : {}) : (groupRoleIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling createGroup.');\n            }\n            var localVarPath = \"/groups/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePrincipalFromGroup.');\n            }\n            // verify required parameter 'usernames' is not null or undefined\n            if (usernames === null || usernames === undefined) {\n                throw new base_1.RequiredError('usernames', 'Required parameter usernames was null or undefined when calling deletePrincipalFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (usernames !== undefined) {\n                localVarQueryParameter['usernames'] = usernames;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRoleFromGroup.');\n            }\n            // verify required parameter 'roles' is not null or undefined\n            if (roles === null || roles === undefined) {\n                throw new base_1.RequiredError('roles', 'Required parameter roles was null or undefined when calling deleteRoleFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (roles !== undefined) {\n                localVarQueryParameter['roles'] = roles;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPrincipalsFromGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/principals/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (principalUsername !== undefined) {\n                localVarQueryParameter['principal_username'] = principalUsername;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/groups/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (nameMatch !== undefined) {\n                localVarQueryParameter['name_match'] = nameMatch;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            if (uuid) {\n                localVarQueryParameter['uuid'] = uuid.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (roleNames) {\n                localVarQueryParameter['role_names'] = roleNames.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (roleDiscriminator !== undefined) {\n                localVarQueryParameter['role_discriminator'] = roleDiscriminator;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling listRolesForGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/roles/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (exclude !== undefined) {\n                localVarQueryParameter['exclude'] = exclude;\n            }\n            if (roleName !== undefined) {\n                localVarQueryParameter['role_name'] = roleName;\n            }\n            if (roleDescription !== undefined) {\n                localVarQueryParameter['role_description'] = roleDescription;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateGroup.');\n            }\n            // verify required parameter 'group' is not null or undefined\n            if (group === null || group === undefined) {\n                throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling updateGroup.');\n            }\n            var localVarPath = \"/groups/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * GroupApi - functional programming interface\n * @export\n */\nexports.GroupApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).addRoleToGroup(uuid, groupRoleIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).createGroup(group, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deleteGroup(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deletePrincipalFromGroup(uuid, usernames, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).deleteRoleFromGroup(uuid, roles, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).getGroup(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            var localVarAxiosArgs = exports.GroupApiAxiosParamCreator(configuration).updateGroup(uuid, group, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * GroupApi - factory interface\n * @export\n */\nexports.GroupApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            return exports.GroupApiFp(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            return exports.GroupApiFp(configuration).addRoleToGroup(uuid, groupRoleIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            return exports.GroupApiFp(configuration).createGroup(group, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            return exports.GroupApiFp(configuration).deleteGroup(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            return exports.GroupApiFp(configuration).deletePrincipalFromGroup(uuid, usernames, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            return exports.GroupApiFp(configuration).deleteRoleFromGroup(uuid, roles, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            return exports.GroupApiFp(configuration).getGroup(uuid, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            return exports.GroupApiFp(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n            return exports.GroupApiFp(configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n            return exports.GroupApiFp(configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Udate a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            return exports.GroupApiFp(configuration).updateGroup(uuid, group, options)(axios, basePath);\n        },\n    };\n};\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nvar GroupApi = /** @class */ (function (_super) {\n    __extends(GroupApi, _super);\n    function GroupApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Add a principal to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addPrincipalToGroup = function (uuid, groupPrincipalIn, options) {\n        return exports.GroupApiFp(this.configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Add a role to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupRoleIn} groupRoleIn Role to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addRoleToGroup = function (uuid, groupRoleIn, options) {\n        return exports.GroupApiFp(this.configuration).addRoleToGroup(uuid, groupRoleIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Create a group in a tenant\n     * @param {Group} group Group to create in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.createGroup = function (group, options) {\n        return exports.GroupApiFp(this.configuration).createGroup(group, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a group in the tenant\n     * @param {string} uuid ID of group to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteGroup = function (uuid, options) {\n        return exports.GroupApiFp(this.configuration).deleteGroup(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Remove a principal from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deletePrincipalFromGroup = function (uuid, usernames, options) {\n        return exports.GroupApiFp(this.configuration).deletePrincipalFromGroup(uuid, usernames, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Remove a role from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteRoleFromGroup = function (uuid, roles, options) {\n        return exports.GroupApiFp(this.configuration).deleteRoleFromGroup(uuid, roles, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a group in the tenant\n     * @param {string} uuid ID of group to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getGroup = function (uuid, options) {\n        return exports.GroupApiFp(this.configuration).getGroup(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary Get a list of principals from a group in the tenant\n     * @param {string} uuid ID of group from which to get principals\n     * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getPrincipalsFromGroup = function (uuid, principalUsername, limit, offset, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by group name\n     * @summary List the groups for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [username] A username for a principal to filter for groups\n     * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n     * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n     * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listGroups = function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a group in the tenant\n     * @param {string} uuid ID of group\n     * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n     * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n     * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listRolesForGroup = function (uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options) {\n        return exports.GroupApiFp(this.configuration).listRolesForGroup(uuid, exclude, roleName, roleDescription, limit, offset, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Udate a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {Group} group Group to update in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.updateGroup = function (uuid, group, options) {\n        return exports.GroupApiFp(this.configuration).updateGroup(uuid, group, options)(this.axios, this.basePath);\n    };\n    return GroupApi;\n}(base_1.BaseAPI));\nexports.GroupApi = GroupApi;\n/**\n * PermissionApi - axios parameter creator\n * @export\n */\nexports.PermissionApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'field' is not null or undefined\n            if (field === null || field === undefined) {\n                throw new base_1.RequiredError('field', 'Required parameter field was null or undefined when calling listPermissionOptions.');\n            }\n            var localVarPath = \"/permissions/options/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (field !== undefined) {\n                localVarQueryParameter['field'] = field;\n            }\n            if (application !== undefined) {\n                localVarQueryParameter['application'] = application;\n            }\n            if (resourceType !== undefined) {\n                localVarQueryParameter['resource_type'] = resourceType;\n            }\n            if (verb !== undefined) {\n                localVarQueryParameter['verb'] = verb;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/permissions/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (application !== undefined) {\n                localVarQueryParameter['application'] = application;\n            }\n            if (resourceType !== undefined) {\n                localVarQueryParameter['resource_type'] = resourceType;\n            }\n            if (verb !== undefined) {\n                localVarQueryParameter['verb'] = verb;\n            }\n            if (permission !== undefined) {\n                localVarQueryParameter['permission'] = permission;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PermissionApi - functional programming interface\n * @export\n */\nexports.PermissionApiFp = function (configuration) {\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, options) {\n            var localVarAxiosArgs = exports.PermissionApiAxiosParamCreator(configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, options) {\n            var localVarAxiosArgs = exports.PermissionApiAxiosParamCreator(configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PermissionApi - factory interface\n * @export\n */\nexports.PermissionApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, options) {\n            return exports.PermissionApiFp(configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, options) {\n            return exports.PermissionApiFp(configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PermissionApi - object-oriented interface\n * @export\n * @class PermissionApi\n * @extends {BaseAPI}\n */\nvar PermissionApi = /** @class */ (function (_super) {\n    __extends(PermissionApi, _super);\n    function PermissionApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * By default, options of application is returned. And could be resource_type or verb on demand.\n     * @summary List the available options for fields of permissions for a tenant\n     * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n     * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n     * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PermissionApi\n     */\n    PermissionApi.prototype.listPermissionOptions = function (field, limit, offset, application, resourceType, verb, options) {\n        return exports.PermissionApiFp(this.configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by permission application.\n     * @summary List the permissions for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n     * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n     * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PermissionApi\n     */\n    PermissionApi.prototype.listPermissions = function (limit, offset, orderBy, application, resourceType, verb, permission, options) {\n        return exports.PermissionApiFp(this.configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, options)(this.axios, this.basePath);\n    };\n    return PermissionApi;\n}(base_1.BaseAPI));\nexports.PermissionApi = PermissionApi;\n/**\n * PolicyApi - axios parameter creator\n * @export\n */\nexports.PolicyApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'policyIn' is not null or undefined\n            if (policyIn === null || policyIn === undefined) {\n                throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling createPolicies.');\n            }\n            var localVarPath = \"/policies/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/policies/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (groupName !== undefined) {\n                localVarQueryParameter['group_name'] = groupName;\n            }\n            if (groupUuid !== undefined) {\n                localVarQueryParameter['group_uuid'] = groupUuid;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updatePolicy.');\n            }\n            // verify required parameter 'policyIn' is not null or undefined\n            if (policyIn === null || policyIn === undefined) {\n                throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling updatePolicy.');\n            }\n            var localVarPath = \"/policies/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PolicyApi - functional programming interface\n * @export\n */\nexports.PolicyApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).createPolicies(policyIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).deletePolicy(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).getPolicy(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            var localVarAxiosArgs = exports.PolicyApiAxiosParamCreator(configuration).updatePolicy(uuid, policyIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PolicyApi - factory interface\n * @export\n */\nexports.PolicyApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            return exports.PolicyApiFp(configuration).createPolicies(policyIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            return exports.PolicyApiFp(configuration).deletePolicy(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            return exports.PolicyApiFp(configuration).getPolicy(uuid, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            return exports.PolicyApiFp(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            return exports.PolicyApiFp(configuration).updatePolicy(uuid, policyIn, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PolicyApi - object-oriented interface\n * @export\n * @class PolicyApi\n * @extends {BaseAPI}\n */\nvar PolicyApi = /** @class */ (function (_super) {\n    __extends(PolicyApi, _super);\n    function PolicyApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a policy in a tenant\n     * @param {PolicyIn} policyIn Policy to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.createPolicies = function (policyIn, options) {\n        return exports.PolicyApiFp(this.configuration).createPolicies(policyIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a policy in the tenant\n     * @param {string} uuid ID of policy to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.deletePolicy = function (uuid, options) {\n        return exports.PolicyApiFp(this.configuration).deletePolicy(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a policy in the tenant\n     * @param {string} uuid ID of policy to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.getPolicy = function (uuid, options) {\n        return exports.PolicyApiFp(this.configuration).getPolicy(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by policy name\n     * @summary List the policies in the tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n     * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.listPolicies = function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n        return exports.PolicyApiFp(this.configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Update a policy in the tenant\n     * @param {string} uuid ID of policy to update\n     * @param {PolicyIn} policyIn Policy to update\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.updatePolicy = function (uuid, policyIn, options) {\n        return exports.PolicyApiFp(this.configuration).updatePolicy(uuid, policyIn, options)(this.axios, this.basePath);\n    };\n    return PolicyApi;\n}(base_1.BaseAPI));\nexports.PolicyApi = PolicyApi;\n/**\n * PrincipalApi - axios parameter creator\n * @export\n */\nexports.PrincipalApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back. Could not be used with: usernames, email, admin_only\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, status, adminOnly, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/principals/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (usernames !== undefined) {\n                localVarQueryParameter['usernames'] = usernames;\n            }\n            if (sortOrder !== undefined) {\n                localVarQueryParameter['sort_order'] = sortOrder;\n            }\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n            if (adminOnly !== undefined) {\n                localVarQueryParameter['admin_only'] = adminOnly;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * PrincipalApi - functional programming interface\n * @export\n */\nexports.PrincipalApiFp = function (configuration) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back. Could not be used with: usernames, email, admin_only\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, status, adminOnly, options) {\n            var localVarAxiosArgs = exports.PrincipalApiAxiosParamCreator(configuration).listPrincipals(limit, offset, usernames, sortOrder, email, status, adminOnly, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * PrincipalApi - factory interface\n * @export\n */\nexports.PrincipalApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [usernames] Usernames of principals to get\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n         * @param {string} [email] Exact e-mail address of principal to search for\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back. Could not be used with: usernames, email, admin_only\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, usernames, sortOrder, email, status, adminOnly, options) {\n            return exports.PrincipalApiFp(configuration).listPrincipals(limit, offset, usernames, sortOrder, email, status, adminOnly, options)(axios, basePath);\n        },\n    };\n};\n/**\n * PrincipalApi - object-oriented interface\n * @export\n * @class PrincipalApi\n * @extends {BaseAPI}\n */\nvar PrincipalApi = /** @class */ (function (_super) {\n    __extends(PrincipalApi, _super);\n    function PrincipalApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary List the principals for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [usernames] Usernames of principals to get\n     * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending\n     * @param {string} [email] Exact e-mail address of principal to search for\n     * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back. Could not be used with: usernames, email, admin_only\n     * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PrincipalApi\n     */\n    PrincipalApi.prototype.listPrincipals = function (limit, offset, usernames, sortOrder, email, status, adminOnly, options) {\n        return exports.PrincipalApiFp(this.configuration).listPrincipals(limit, offset, usernames, sortOrder, email, status, adminOnly, options)(this.axios, this.basePath);\n    };\n    return PrincipalApi;\n}(base_1.BaseAPI));\nexports.PrincipalApi = PrincipalApi;\n/**\n * RoleApi - axios parameter creator\n * @export\n */\nexports.RoleApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'roleIn' is not null or undefined\n            if (roleIn === null || roleIn === undefined) {\n                throw new base_1.RequiredError('roleIn', 'Required parameter roleIn was null or undefined when calling createRoles.');\n            }\n            var localVarPath = \"/roles/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof roleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleIn !== undefined ? roleIn : {}) : (roleIn || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRoleAccess.');\n            }\n            var localVarPath = \"/roles/{uuid}/access/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/roles/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n            if (nameMatch !== undefined) {\n                localVarQueryParameter['name_match'] = nameMatch;\n            }\n            if (scope !== undefined) {\n                localVarQueryParameter['scope'] = scope;\n            }\n            if (orderBy !== undefined) {\n                localVarQueryParameter['order_by'] = orderBy;\n            }\n            if (addFields) {\n                localVarQueryParameter['add_fields'] = addFields.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n            if (application !== undefined) {\n                localVarQueryParameter['application'] = application;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'uuid' is not null or undefined\n            if (uuid === null || uuid === undefined) {\n                throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateRole.');\n            }\n            // verify required parameter 'roleWithAccess' is not null or undefined\n            if (roleWithAccess === null || roleWithAccess === undefined) {\n                throw new base_1.RequiredError('roleWithAccess', 'Required parameter roleWithAccess was null or undefined when calling updateRole.');\n            }\n            var localVarPath = \"/roles/{uuid}/\"\n                .replace(\"{\" + \"uuid\" + \"}\", encodeURIComponent(String(uuid)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = (typeof roleWithAccess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleWithAccess !== undefined ? roleWithAccess : {}) : (roleWithAccess || \"\");\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * RoleApi - functional programming interface\n * @export\n */\nexports.RoleApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).createRoles(roleIn, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).deleteRole(uuid, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).getRole(uuid, scope, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).getRoleAccess(uuid, limit, offset, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).listRoles(limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            var localVarAxiosArgs = exports.RoleApiAxiosParamCreator(configuration).updateRole(uuid, roleWithAccess, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * RoleApi - factory interface\n * @export\n */\nexports.RoleApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            return exports.RoleApiFp(configuration).createRoles(roleIn, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            return exports.RoleApiFp(configuration).deleteRole(uuid, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            return exports.RoleApiFp(configuration).getRole(uuid, scope, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            return exports.RoleApiFp(configuration).getRoleAccess(uuid, limit, offset, options)(axios, basePath);\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options) {\n            return exports.RoleApiFp(configuration).listRoles(limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            return exports.RoleApiFp(configuration).updateRole(uuid, roleWithAccess, options)(axios, basePath);\n        },\n    };\n};\n/**\n * RoleApi - object-oriented interface\n * @export\n * @class RoleApi\n * @extends {BaseAPI}\n */\nvar RoleApi = /** @class */ (function (_super) {\n    __extends(RoleApi, _super);\n    function RoleApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a roles for a tenant\n     * @param {RoleIn} roleIn Role to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.createRoles = function (roleIn, options) {\n        return exports.RoleApiFp(this.configuration).createRoles(roleIn, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Delete a role in the tenant\n     * @param {string} uuid ID of role to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.deleteRole = function (uuid, options) {\n        return exports.RoleApiFp(this.configuration).deleteRole(uuid, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a role in the tenant\n     * @param {string} uuid ID of role to get\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRole = function (uuid, scope, options) {\n        return exports.RoleApiFp(this.configuration).getRole(uuid, scope, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get access for a role in the tenant\n     * @param {string} uuid ID of the role\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRoleAccess = function (uuid, limit, offset, options) {\n        return exports.RoleApiFp(this.configuration).getRoleAccess(uuid, limit, offset, options)(this.axios, this.basePath);\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [orderBy] Parameter for ordering resource by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n     * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.listRoles = function (limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options) {\n        return exports.RoleApiFp(this.configuration).listRoles(limit, offset, name, nameMatch, scope, orderBy, addFields, username, application, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Update a Role in the tenant\n     * @param {string} uuid ID of role to update\n     * @param {RoleWithAccess} roleWithAccess Update to a Role\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.updateRole = function (uuid, roleWithAccess, options) {\n        return exports.RoleApiFp(this.configuration).updateRole(uuid, roleWithAccess, options)(this.axios, this.basePath);\n    };\n    return RoleApi;\n}(base_1.BaseAPI));\nexports.RoleApi = RoleApi;\n/**\n * StatusApi - axios parameter creator\n * @export\n */\nexports.StatusApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/status/\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            // authentication basic_auth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * StatusApi - functional programming interface\n * @export\n */\nexports.StatusApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            var localVarAxiosArgs = exports.StatusApiAxiosParamCreator(configuration).getStatus(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * StatusApi - factory interface\n * @export\n */\nexports.StatusApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            return exports.StatusApiFp(configuration).getStatus(options)(axios, basePath);\n        },\n    };\n};\n/**\n * StatusApi - object-oriented interface\n * @export\n * @class StatusApi\n * @extends {BaseAPI}\n */\nvar StatusApi = /** @class */ (function (_super) {\n    __extends(StatusApi, _super);\n    function StatusApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Obtain server status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatusApi\n     */\n    StatusApi.prototype.getStatus = function (options) {\n        return exports.StatusApiFp(this.configuration).getStatus(options)(this.axios, this.basePath);\n    };\n    return StatusApi;\n}(base_1.BaseAPI));\nexports.StatusApi = StatusApi;\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"https://raw.githubusercontent.com/api/rbac/v1\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n"],"sourceRoot":""}