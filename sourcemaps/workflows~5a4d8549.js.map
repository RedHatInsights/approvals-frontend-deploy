{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/set-current-groups.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-context.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","existingGroupsMessage","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","paginationQuery","Math","max","limit","offset","filterQuery","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","showWorkflow","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","edit","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","createApprovalProcess","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","repositionProcessSuccessTitle","repositionProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","up","down","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","setFilterValueWorkflows","asyncDebounce","name","intl","fetchWorkflowByName","then","data","find","wf","formatMessage","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","resolveNewGroupsProps","props","_fieldApi","formOptions","initialGroups","values","current_groups","key","loadOptions","option","isDisabled","setGroupSelectSchema","SELECT","initialValue","clearedValue","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","resolveProps","setCurrentGroupsSchema","initialValues","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","title","variant","onSubmit","group_refs","workflowData","workflow","listTemplates","Error","addWorkflowToTemplate","notifications","fulfilled","addWorkflow","group","schema","FormTemplate","buttonClassName","disableSubmit","useWorkflow","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","resetSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useEffect","apiProps","removeWf","adjustedOffset","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","Fragment","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","ouiaId","onClick","Spinner","commonMessages","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","propTypes","PropTypes","func","array","shape","number","WorkflowTableContext","createContext","debouncedMove","cache","reposition","repositionWorkflow","MoveButtons","useContext","isUpdating","property","updateSequence","process","Stack","StackItem","increment","string","GroupsLabels","Flex","FlexItem","Label","arrayOf","SelectBox","setSelectedWorkflows","Checkbox","isChecked","includes","onChange","createRows","cells","reducer","state","prepareInitialValues","wfData","groupOptions","EditWorkflow","loadedWorkflow","useReducer","stateDispatch","concat","indexOf","updateWorkflow","submitLabel","save","columns","selectedAll","selectAll","transforms","cellWidth","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","areSelectedAll","rows","selected","every","row","unique","self","workflowsListState","action","isFetching","isFiltering","Workflows","moveFunctionsCache","useRef","filterValueRedux","initialState","history","updateWorkflows","scrollToTop","clearFilters","handleFilterChange","anyWorkflowsSelected","approvalTitle","Provider","current","exact","path","routesLinks","add","render","postMethod","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","icon","PlusCircleIcon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","isSearch","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.f9cbf9d17c97b1b50410.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Add groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  },\n  existingGroupsMessage: {\n    id: 'formMessages.existingGroups',\n    defaultMessage: 'Current groups'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflowOld(data) {\n  return workflowApi.reposition(data.id, data);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport function repositionWorkflow(data) {\n  return workflowApi.reposition(data.id, data.sequence);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  createApprovalProcess: {\n    id: 'worfklowMessages.createApprovalProcess',\n    defaultMessage: 'Create approval process'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  repositionProcessSuccessTitle: {\n    id: 'workflowMessages.repositionProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process sequence'\n  },\n  repositionProcessSuccessDescription: {\n    id: 'workflowMessages.repositionProcessSuccessDescription',\n    defaultMessage: `The approval process' sequence was updated successfully.`\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  },\n  up: {\n    id: 'workflowMessages.up',\n    defaultMessage: 'up'\n  },\n  down: {\n    id: 'workflowMessages.down',\n    defaultMessage: 'down'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const repositionWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.REPOSITION_WORKFLOW,\n  payload: WorkflowHelper.repositionWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.repositionProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.repositionProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n\nexport const clearFilterValueWorkflows = () => ({\n  type: ActionTypes.CLEAR_FILTER_WORKFLOWS\n});\n\nexport const moveSequence = process => ({\n  type: ActionTypes.MOVE_SEQUENCE,\n  payload: process\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst resolveNewGroupsProps = (\n  props,\n  _fieldApi,\n  formOptions\n) => {\n  const initialGroups = formOptions.getState().values.current_groups || [];\n  return {\n    key: initialGroups.length, // used to trigger options re-load and disable options update\n    loadOptions: (...args) =>\n      (props)\n      .loadOptions(...args)\n      .then((data) =>\n        data.map((option) => ({\n          ...option,\n          ...(initialGroups.find(({ value }) => value === option.value) // we have to disable options that are already in the chip group\n            ? { isDisabled: true }\n            : {})\n        }))\n      )\n  };\n};\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  initialValue: [],\n  clearedValue: [],\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder),\n  resolveProps: resolveNewGroupsProps\n});\n\nexport default setGroupSelectSchema;\n","import formMessages from '../messages/form.messages';\n\nconst setCurrentGroupsSchema = (intl) => ({\n  component: 'initial-chips',\n  name: 'current_groups',\n  label: intl.formatMessage(formMessages.existingGroupsMessage),\n  initialValues: []\n});\n\nexport default setCurrentGroupsSchema;\n","import workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\nimport setCurrentGroupsSchema from './set-current-groups.schema';\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl),\n    setCurrentGroupsSchema(intl)\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\nimport { defaultSettings, adjustedOffset } from '../../helpers/shared/pagination';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  pagination = defaultSettings,\n  resetSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => resetSelectedWorkflows())\n  .then(() => fetchData({ ...pagination, offset: adjustedOffset(pagination, finalId ? 1 : ids.length) }));\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\"\n          ouiaId={ 'submit-remove-workflow' }\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\"\n          ouiaId={ 'cancel-remove-workflow' }\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedWorkflows: PropTypes.func.isRequired,\n  pagination: PropTypes.shape({ limit: PropTypes.number, offset: PropTypes.number, count: PropTypes.number })\n};\n\nexport default RemoveWorkflowModal;\n","import { createContext } from 'react';\n\nconst WorkflowTableContext = createContext({ selectedWorkflows: []});\n\nexport default WorkflowTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem, Stack, StackItem, Button, Checkbox } from '@patternfly/react-core';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport WorkflowTableContext from './workflow-table-context';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport { repositionWorkflow, fetchWorkflows, moveSequence } from '../../redux/actions/workflow-actions';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nconst debouncedMove = (cache, id) => {\n  if (cache[id]) {\n    return cache[id];\n  }\n\n  cache[id] = asyncDebounce(\n    (workflow, dispatch, intl) => dispatch(repositionWorkflow(workflow, intl))\n    .then(() => dispatch(fetchWorkflows())),\n    1500\n  );\n\n  return cache[id];\n};\n\nexport const MoveButtons = ({ id }) => {\n  const { cache } = useContext(WorkflowTableContext);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { isUpdating, property } = useSelector(\n    ({ workflowReducer: { isUpdating, isLoading }}) => (\n      { isUpdating: isUpdating > 0 || isLoading, property }\n    )\n  );\n\n  const updateSequence = (sequence) => {\n    dispatch(moveSequence({ id, sequence }));\n\n    return debouncedMove(cache, id)({ id, sequence }, dispatch, intl);\n  };\n\n  return (\n    <Stack>\n      <StackItem>\n        <Button\n          ouiaId={ `up-${id}` }\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.up) }\n          id={ `up-${id}` }\n          onClick={ () => updateSequence({ increment: -1 }) }\n          isDisabled={ isUpdating }\n        >\n          <AngleUpIcon />\n        </Button>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.down) }\n          id={ `down-${id}` }\n          onClick={ () => updateSequence({ increment: 1 }) }\n          isDisabled={ isUpdating }\n          ouiaId={ `down-${id}` }\n        >\n          <AngleDownIcon />\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nMoveButtons.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const SelectBox = ({ id }) => {\n  const { selectedWorkflows, setSelectedWorkflows } = useContext(WorkflowTableContext);\n\n  return (\n    <Checkbox\n      id={ `select-${id}` }\n      isChecked={ selectedWorkflows.includes(id) }\n      onChange={ () => setSelectedWorkflows(id) }\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  cells: [\n    <React.Fragment key={ `${id}-buttons` }>\n      <MoveButtons id={ id } ouiaId={ `${id}-buttons` } sequence={ sequence } />\n    </React.Fragment>,\n    <React.Fragment key={ `${id}-checkbox` }>\n      <SelectBox id={ id } />\n    </React.Fragment>,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: [], current_groups: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], description = '', ...values }) => {\n    onCancel();\n    const groups = values.current_groups ?\n      values.current_groups.concat(group_refs?.filter((item) => values.current_groups.indexOf(item) < 0)) : group_refs;\n    const workflowData = { ...values, description, group_refs: groups.map(group => ({ name: group.label, uuid: group.value })) };\n    delete workflowData.current_groups;\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { truncate, cellWidth } from '@patternfly/react-table';\nimport { clearFilterValueWorkflows, fetchWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\nimport WorkflowTableContext from './workflow-table-context';\nimport isEmpty from 'lodash/isEmpty';\n\nconst columns = (intl, selectedAll, selectAll) => [\n  { title: '', transforms: [ cellWidth(1) ]},\n  { title: <Checkbox onChange={ selectAll } isChecked={ selectedAll } id=\"select-all\"/>, transforms: [ cellWidth(1) ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name)\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ cellWidth(35) ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isFetching: true,\n  isFiltering: false,\n  selectedWorkflows: [],\n  selectedAll: false,\n  rows: []\n});\n\nconst areSelectedAll = (rows = [], selected) => rows.every(row => selected.includes(row.id));\n\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nexport const workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        selectedAll: areSelectedAll(action.payload, state.selectedWorkflows)\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        selectedAll: false,\n        selectedWorkflows: state.selectedWorkflows.includes(action.payload)\n          ? state.selectedWorkflows.filter(id => id !== action.payload)\n          : [ ...state.selectedWorkflows, action.payload ]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedWorkflows: [ ...state.selectedWorkflows, ...action.payload ].filter(unique),\n        selectedAll: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedWorkflows: state.selectedWorkflows.filter(selected => !action.payload.includes(selected)),\n        selectedAll: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedWorkflows: [],\n        selectedAll: false\n      };\n    case 'setFilteringFlag':\n      return {\n        ...state,\n        isFiltering: action.payload\n      };\n    case 'clearFilters':\n      return { ...state, filterValue: '', isFetching: true };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const moveFunctionsCache = useRef({});\n  const { workflows: { data, meta }, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, filterValue: filterValueRedux }}) => ({ workflows, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering, selectedWorkflows, selectedAll, rows }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const setSelectedWorkflows = (id) => stateDispatch({ type: 'select', payload: id });\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [ data ]);\n\n  const clearFilters = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueWorkflows());\n    return updateWorkflows(meta);\n  };\n\n  const handleFilterChange = (value) => {\n    (!value || value === '') ? clearFilters() :\n      stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        pagination={ meta }\n        resetSelectedWorkflows={ () => stateDispatch({ type: 'resetSelected' }) }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const selectAllFunction = () => selectedAll\n    ? stateDispatch({ type: 'unselectAll', payload: data.map(wf => wf.id) })\n    : stateDispatch({ type: 'selectAll', payload: data.map(wf => wf.id) });\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          ouiaId={ 'add-workflow-link' }\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <WorkflowTableContext.Provider value={ { selectedWorkflows, setSelectedWorkflows, cache: moveFunctionsCache.current } }>\n        <TableToolbarView\n          ouiaId={ 'approval-process-table' }\n          rows={ rows }\n          columns={ columns(intl, selectedAll, selectAllFunction) }\n          fetchData={ updateWorkflows }\n          routes={ routes }\n          actionResolver={ actionResolver }\n          titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n          titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n          pagination={ meta }\n          toolbarButtons={ toolbarButtons }\n          filterValue={ filterValue }\n          onFilterChange={ handleFilterChange }\n          isLoading={ isFetching || isFiltering }\n          renderEmptyState={ () => (\n            <TableEmptyState\n              title={ filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.noResultsFound)\n              }\n              icon={ isEmpty(filterValue) ? PlusCircleIcon : SearchIcon }\n              PrimaryAction={ () =>\n                filterValue !== '' ? (\n                  <Button onClick={ () => clearFilters() } variant=\"link\">\n                    { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                  </Button>\n                ) : <Link id=\"create-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n                  <Button\n                    ouiaId={ 'create-workflow-link' }\n                    variant=\"primary\"\n                    aria-label={ intl.formatMessage(worfklowMessages.createApprovalProcess) }\n                  >\n                    { intl.formatMessage(worfklowMessages.createApprovalProcess) }\n                  </Button>\n                </Link>\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                  : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n              }\n              isSearch={ !isEmpty(filterValue) }\n            />\n          ) }\n          activeFiltersConfig={ {\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          } }\n        />\n      </WorkflowTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}