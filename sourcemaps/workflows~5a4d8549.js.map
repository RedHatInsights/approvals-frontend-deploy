{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-context.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","paginationQuery","Math","max","limit","offset","filterQuery","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","showWorkflow","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","edit","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","repositionProcessSuccessTitle","repositionProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","up","down","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","setFilterValueWorkflows","asyncDebounce","name","intl","fetchWorkflowByName","then","data","find","wf","formatMessage","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","loadOptions","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","title","variant","onSubmit","group_refs","values","workflowData","workflow","listTemplates","Error","addWorkflowToTemplate","notifications","fulfilled","addWorkflow","group","schema","FormTemplate","props","buttonClassName","disableSubmit","useWorkflow","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","resetSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useEffect","apiProps","removeWf","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","key","Fragment","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","isDisabled","onClick","Spinner","commonMessages","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","propTypes","PropTypes","func","array","WorkflowTableContext","createContext","debouncedMove","cache","reposition","repositionWorkflow","MoveButtons","useContext","isUpdating","property","updateSequence","process","Stack","StackItem","increment","string","number","GroupsLabels","Flex","FlexItem","Label","arrayOf","shape","SelectBox","setSelectedWorkflows","Checkbox","isChecked","includes","onChange","createRows","cells","reducer","state","initialValues","prepareInitialValues","wfData","groupOptions","EditWorkflow","loadedWorkflow","useReducer","stateDispatch","updateWorkflow","submitLabel","save","columns","selectedAll","selectAll","transforms","cellWidth","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","areSelectedAll","rows","selected","every","row","unique","self","indexOf","workflowsListState","action","isFetching","isFiltering","Workflows","moveFunctionsCache","useRef","filterValueRedux","initialState","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","Provider","current","exact","path","routesLinks","add","render","postMethod","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","Icon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.6250382d3f0e6f31780d.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Set groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflowOld(data) {\n  return workflowApi.reposition(data.id, data);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport function repositionWorkflow(data) {\n  return workflowApi.reposition(data.id, data.sequence);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  repositionProcessSuccessTitle: {\n    id: 'workflowMessages.repositionProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process sequence'\n  },\n  repositionProcessSuccessDescription: {\n    id: 'workflowMessages.repositionProcessSuccessDescription',\n    defaultMessage: `The approval process' sequence was updated successfully.`\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  },\n  up: {\n    id: 'workflowMessages.up',\n    defaultMessage: 'up'\n  },\n  down: {\n    id: 'workflowMessages.down',\n    defaultMessage: 'down'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const repositionWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.REPOSITION_WORKFLOW,\n  payload: WorkflowHelper.repositionWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.repositionProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.repositionProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n\nexport const moveSequence = process => ({\n  type: ActionTypes.MOVE_SEQUENCE,\n  payload: process\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl)\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  resetSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => resetSelectedWorkflows())\n  .then(() => fetchData());\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\" key=\"submit\" variant=\"danger\" type=\"button\" isDisabled={ submitting } onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\" key=\"cancel\" variant=\"link\" type=\"button\" isDisabled={ submitting } onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedWorkflows: PropTypes.func.isRequired\n};\n\nexport default RemoveWorkflowModal;\n","import { createContext } from 'react';\n\nconst WorkflowTableContext = createContext({ selectedWorkflows: []});\n\nexport default WorkflowTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem, Stack, StackItem, Button, Checkbox } from '@patternfly/react-core';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport WorkflowTableContext from './workflow-table-context';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport { repositionWorkflow, fetchWorkflows, moveSequence } from '../../redux/actions/workflow-actions';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nconst debouncedMove = (cache, id) => {\n  if (cache[id]) {\n    return cache[id];\n  }\n\n  cache[id] = asyncDebounce(\n    (workflow, dispatch, intl) => dispatch(repositionWorkflow(workflow, intl))\n    .then(() => dispatch(fetchWorkflows())),\n    1500\n  );\n\n  return cache[id];\n};\n\nexport const MoveButtons = ({ id }) => {\n  const { cache } = useContext(WorkflowTableContext);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { isUpdating, property } = useSelector(\n    ({ workflowReducer: { isUpdating, isLoading }}) => (\n      { isUpdating: isUpdating > 0 || isLoading, property }\n    )\n  );\n\n  const updateSequence = (sequence) => {\n    dispatch(moveSequence({ id, sequence }));\n\n    return debouncedMove(cache, id)({ id, sequence }, dispatch, intl);\n  };\n\n  return (\n    <Stack>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.up) }\n          id={ `up-${id}` }\n          onClick={ () => updateSequence({ increment: -1 }) }\n          isDisabled={ isUpdating }\n        >\n          <AngleUpIcon />\n        </Button>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.down) }\n          id={ `down-${id}` }\n          onClick={ () => updateSequence({ increment: 1 }) }\n          isDisabled={ isUpdating }\n        >\n          <AngleDownIcon />\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nMoveButtons.propTypes = {\n  id: PropTypes.string.isRequired,\n  sequence: PropTypes.number.isRequired\n};\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const SelectBox = ({ id }) => {\n  const { selectedWorkflows, setSelectedWorkflows } = useContext(WorkflowTableContext);\n\n  return (\n    <Checkbox\n      id={ `select-${id}` }\n      isChecked={ selectedWorkflows.includes(id) }\n      onChange={ () => setSelectedWorkflows(id) }\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  cells: [\n    <React.Fragment key={ `${id}-buttons` }>\n      <MoveButtons id={ id } sequence={ sequence } />\n    </React.Fragment>,\n    <React.Fragment key={ `${id}-checkbox` }>\n      <SelectBox id={ id } />\n    </React.Fragment>,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    onCancel();\n\n    const workflowData = { ...values, group_refs: group_refs.map(group => ({ name: group.label, uuid: group.value })) };\n\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { truncate, cellWidth } from '@patternfly/react-table';\nimport { fetchWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\nimport WorkflowTableContext from './workflow-table-context';\n\nconst columns = (intl, selectedAll, selectAll) => [\n  { title: '', transforms: [ cellWidth(1) ]},\n  { title: <Checkbox onChange={ selectAll } isChecked={ selectedAll } id=\"select-all\"/>, transforms: [ cellWidth(1) ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name)\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ cellWidth(35) ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isFetching: true,\n  isFiltering: false,\n  selectedWorkflows: [],\n  selectedAll: false,\n  rows: []\n});\n\nconst areSelectedAll = (rows = [], selected) => rows.every(row => selected.includes(row.id));\n\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nexport const workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        selectedAll: areSelectedAll(action.payload, state.selectedWorkflows)\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        selectedAll: false,\n        selectedWorkflows: state.selectedWorkflows.includes(action.payload)\n          ? state.selectedWorkflows.filter(id => id !== action.payload)\n          : [ ...state.selectedWorkflows, action.payload ]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedWorkflows: [ ...state.selectedWorkflows, ...action.payload ].filter(unique),\n        selectedAll: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedWorkflows: state.selectedWorkflows.filter(selected => !action.payload.includes(selected)),\n        selectedAll: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedWorkflows: [],\n        selectedAll: false\n      };\n    case 'setFilteringFlag':\n      return {\n        ...state,\n        isFiltering: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const moveFunctionsCache = useRef({});\n  const { workflows: { data, meta }, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, filterValue: filterValueRedux }}) => ({ workflows, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering, selectedWorkflows, selectedAll, rows }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const setSelectedWorkflows = (id) => stateDispatch({ type: 'select', payload: id });\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [ data ]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        resetSelectedWorkflows={ () => stateDispatch({ type: 'resetSelected' }) }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const selectAllFunction = () => selectedAll\n    ? stateDispatch({ type: 'unselectAll', payload: data.map(wf => wf.id) })\n    : stateDispatch({ type: 'selectAll', payload: data.map(wf => wf.id) });\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <WorkflowTableContext.Provider value={ { selectedWorkflows, setSelectedWorkflows, cache: moveFunctionsCache.current } }>\n        <TableToolbarView\n          rows={ rows }\n          columns={ columns(intl, selectedAll, selectAllFunction) }\n          fetchData={ updateWorkflows }\n          routes={ routes }\n          actionResolver={ actionResolver }\n          titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n          titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n          pagination={ meta }\n          toolbarButtons={ toolbarButtons }\n          filterValue={ filterValue }\n          onFilterChange={ handleFilterChange }\n          isLoading={ isFetching || isFiltering }\n          renderEmptyState={ () => (\n            <TableEmptyState\n              title={ filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.noResultsFound)\n              }\n              Icon={ SearchIcon }\n              PrimaryAction={ () =>\n                filterValue !== '' ? (\n                  <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                    { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                  : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n              }\n            />\n          ) }\n          activeFiltersConfig={ {\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          } }\n        />\n      </WorkflowTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}