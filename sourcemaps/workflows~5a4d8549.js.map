{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/edit-workflow-info-modal.js","webpack:///./src/smart-components/workflow/edit-workflow-groups-modal.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","sortBy","paginationQuery","Math","max","limit","offset","filterQuery","sortQuery","property","direction","getAxiosInstance","get","APPROVAL_API_BASE","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","editInfo","editInformation","editGroups","editSequence","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","editSequenceTitle","editGroupsTitle","editGroupsLabel","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","fetchWorkflow","apiProps","showWorkflow","addWorkflow","workflowData","intl","workflow","listTemplates","then","data","Error","addWorkflowToTemplate","notifications","fulfilled","variant","title","formatMessage","updateWorkflow","setFilterValueWorkflows","asyncDebounce","name","fetchWorkflowByName","find","wf","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","loadOptions","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","showFormControls","onSubmit","wfGroups","values","group_refs","group","schema","disableSubmit","useWorkflow","useSelector","shallowEqual","createSchema","editType","SUB_FORM","className","reducer","state","initialValues","isLoading","EditWorkflowInfoModal","postMethod","useReducer","useQuery","loadedWorkflow","useEffect","FormTemplate","props","submitLabel","commonMessages","save","buttonClassName","defaultProps","propTypes","PropTypes","func","string","connect","bindActionCreators","prepareInitialValues","wfData","groupOptions","EditWorkflowGroupsModal","result","RemoveWorkflowModal","ids","fetchData","setSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","finalId","removeWf","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","key","Fragment","aria-label","count","header","Title","size","headingLevel","fill","actions","Button","isDisabled","onClick","Spinner","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","array","GroupsLabels","Flex","FlexItem","Label","arrayOf","shape","createRows","selected","cells","columns","transforms","sortable","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","workflowsListState","action","isFetching","isFiltering","Workflows","filterValueRedux","initialState","stateDispatch","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","onSort","_e","sortWorkflows","isSelectable","exact","path","routesLinks","add","render","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","setCheckedItems","checkedWorkflows","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","Icon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.96d203a93bff29e07d8c.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Set groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n  const sortQuery = sortBy ? `&sort_by=${sortBy.property}:${sortBy.direction}` : '';\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}${sortQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  editInfo: {\n    id: 'worfklowMessages.editInfo',\n    defaultMessage: 'Edit info'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  editGroups: {\n    id: 'worfklowMessages.editGroups',\n    defaultMessage: 'Edit groups'\n  },\n  editSequence: {\n    id: 'worfklowMessages.editSequence',\n    defaultMessage: 'Edit sequence'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  editSequenceTitle: {\n    id: 'workflowMessages.editSequenceTitle',\n    defaultMessage: 'Set the sequence for the approval process {name}'\n  },\n  editGroupsTitle: {\n    id: 'workflowMessages.editGroupsTitle',\n    defaultMessage: 'Edit approval process\\'s groups'\n  },\n  editGroupsLabel: {\n    id: 'workflowMessages.editGroupsLabel',\n    defaultMessage: 'Add or remove {name}\\'s groups'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { sortBy, workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination, sortBy)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const sortWorkflows = (sortBy) => ({\n  type: ActionTypes.SORT_WORKFLOWS,\n  payload: sortBy\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'wfGroups',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\n\nconst addWorkflowSchema = (intl) => ({\n  fields: [\n    ...workflowInfoSchema(intl),\n    setGroupSelectSchema(intl)\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ wfGroups = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: wfGroups.length > 0 ? wfGroups.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        showFormControls={ false }\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        disableSubmit={ [ 'validating' ] }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport { useIntl } from 'react-intl';\n\nimport { addWorkflow, updateWorkflow, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport FormRenderer from '../common/form-renderer';\nimport routes from '../../constants/routes';\nimport workflowInfoSchema from '../../forms/workflow-info.schema';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nconst createSchema = (editType, name, intl, id) => editType === 'info' ? ({\n  fields: [{\n    component: componentTypes.SUB_FORM,\n    title: <span className=\"pf-c-title pf-m-md\">\n      { intl.formatMessage(worfklowMessages.editProcessTitle, { name }) }\n    </span>,\n    name: 'info-sub',\n    fields: workflowInfoSchema(intl, id)\n  }]\n}) : ({\n  fields: [{\n    component: componentTypes.SUB_FORM,\n    title: <span className=\"pf-c-title pf-m-md\">\n      { intl.formatMessage(worfklowMessages.editSequenceTitle, { name }) }\n    </span>,\n    name: 'info-sub',\n    fields: [{\n      component: componentTypes.TEXT_FIELD,\n      name: 'sequence',\n      label: intl.formatMessage(worfklowMessages.enterSequence),\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    }]\n  }]\n});\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditWorkflowInfoModal = ({\n  fetchWorkflow,\n  updateWorkflow,\n  postMethod,\n  editType\n}) => {\n  const [ state, dispatch ] = useReducer(reducer, { isLoading: true });\n\n  const { push } = useHistory();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n  const intl = useIntl();\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => dispatch({ type: 'loaded', initialValues: data.value, schema: createSchema(editType, data.value.name, intl, data.value.id) }));\n    } else {\n      dispatch({ type: 'loaded', initialValues: loadedWorkflow, schema: createSchema(editType, loadedWorkflow.name, intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onSave = ({ name, description, sequence }) => {\n    const workflowData = { id, name, description, sequence };\n    return updateWorkflow(workflowData, intl).then(() => postMethod()).then(() => push(routes.workflows.index));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      title={ editType === 'sequence' ? intl.formatMessage(worfklowMessages.editSequence) : intl.formatMessage(worfklowMessages.editInformation) }\n      variant=\"small\"\n      isOpen\n      onClose={ onCancel }\n    >\n      { state.isLoading && <WorkflowInfoFormLoader/> }\n      {\n        !state.isLoading && <FormRenderer\n          FormTemplate={ (props) => <FormTemplate\n            { ...props }\n            submitLabel={ intl.formatMessage(commonMessages.save) }\n            buttonClassName=\"pf-u-mt-0\"\n            disableSubmit={ [ 'submitting' ] }\n          /> }\n          onCancel={ onCancel }\n          onSubmit={ onSave }\n          initialValues={ state.initialValues }\n          schema={ state.schema }\n        />\n      }\n    </Modal>\n  );\n};\n\nEditWorkflowInfoModal.defaultProps = {\n  editType: 'info'\n};\n\nEditWorkflowInfoModal.propTypes = {\n  fetchWorkflow: PropTypes.func.isRequired,\n  postMethod: PropTypes.func.isRequired,\n  updateWorkflow: PropTypes.func.isRequired,\n  editType: PropTypes.string\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  addWorkflow,\n  updateWorkflow,\n  fetchWorkflow\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(EditWorkflowInfoModal);\n","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport { useIntl } from 'react-intl';\n\nimport FormRenderer from '../common/form-renderer';\nimport { addWorkflow, updateWorkflow, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport setGroupSelectSchema from '../../forms/set-group-select.schema';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nconst createSchema = (name, intl) => ({\n  fields: [{\n    ...setGroupSelectSchema(intl),\n    label: intl.formatMessage(worfklowMessages.editGroupsLabel, { name })\n  }]\n});\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, wfGroups: groupOptions };\n};\n\nconst reducer = (state, { type, initialValues, intl }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        schema: createSchema(initialValues.name, intl),\n        initialValues: prepareInitialValues(initialValues),\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditWorkflowGroupsModal = ({\n  fetchWorkflow,\n  updateWorkflow,\n  postMethod\n}) => {\n  const [ state, dispatch ] = useReducer(reducer, { isLoading: true });\n\n  const intl = useIntl();\n\n  const { push } = useHistory();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id).then((result) => dispatch({ type: 'loaded', initialValues: prepareInitialValues(result.value), intl }));\n    } else {\n      dispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), intl });\n    }\n  }, []);\n\n  const onSave = ({ wfGroups }) => {\n    const workflowData = { group_refs: wfGroups ? wfGroups.map(group => ({ name: group.label, uuid: group.value })) : []};\n    return updateWorkflow({ id, ...workflowData }, intl).then(() => postMethod()).then(()=>push('/workflows'));\n  };\n\n  const onCancel = () => push('/workflows');\n\n  return (\n    <Modal\n      title={ intl.formatMessage(worfklowMessages.editGroupsTitle) }\n      variant=\"small\"\n      isOpen\n      onClose={ onCancel }>\n      { state.isLoading ? <WorkflowInfoFormLoader/> : <FormRenderer\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'submitting' ] }\n        /> }\n        onCancel={ onCancel }\n        onSubmit={ onSave }\n        initialValues={ state.initialValues }\n        schema={ state.schema }\n      /> }\n    </Modal>\n  );\n};\n\nEditWorkflowGroupsModal.propTypes = {\n  fetchWorkflow: PropTypes.func.isRequired,\n  postMethod: PropTypes.func.isRequired,\n  updateWorkflow: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  addWorkflow,\n  updateWorkflow,\n  fetchWorkflow\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(EditWorkflowGroupsModal);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  setSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => setSelectedWorkflows([]))\n  .then(() => fetchData());\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\" key=\"submit\" variant=\"danger\" type=\"button\" isDisabled={ submitting } onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\" key=\"cancel\" variant=\"link\" type=\"button\" isDisabled={ submitting } onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  setSelectedWorkflows: PropTypes.func.isRequired,\n  ids: PropTypes.array\n};\n\nexport default RemoveWorkflowModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem } from '@patternfly/react-core';\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  selected: false,\n  cells: [\n    sequence,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { Fragment, useEffect, useReducer, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, truncate } from '@patternfly/react-table';\nimport { fetchWorkflows, sortWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport EditWorkflowInfo from './edit-workflow-info-modal';\nimport EditWorkflowGroups from './edit-workflow-groups-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\n\nconst columns = (intl) => [\n  { title: intl.formatMessage(worfklowMessages.sequence), transforms: [ sortable ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name),\n    transforms: [ sortable ]\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ sortable ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n});\n\nconst workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const [ selectedWorkflows, setSelectedWorkflows ] = useState([]);\n  const { workflows: { data, meta }, sortBy, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, sortBy, filterValue: filterValueRedux }}) => ({ workflows, sortBy, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortWorkflows({ index, direction, property }));\n    return updateWorkflows();\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editInfo } render={ props => <EditWorkflowInfo editType='info' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editGroups } render={ props => <EditWorkflowGroups editType='groups' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editSequence } render={ props => <EditWorkflowInfo editType='sequence' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        setSelectedWorkflows={ setSelectedWorkflows }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.editInfo),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.editInfo, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(worfklowMessages.editGroups),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.editGroups, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(worfklowMessages.editSequence),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.editSequence, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const setCheckedItems = (checkedWorkflows) =>\n    setSelectedWorkflows(checkedWorkflows.map(wf => wf.id));\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={ sortBy }\n        onSort={ onSort }\n        data={ data }\n        isSelectable={ true }\n        createRows={ createRows }\n        columns={ columns(intl) }\n        fetchData={ updateWorkflows }\n        routes={ routes }\n        actionResolver={ actionResolver }\n        titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n        titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n        pagination={ meta }\n        setCheckedItems={ setCheckedItems }\n        toolbarButtons={ toolbarButtons }\n        filterValue={ filterValue }\n        onFilterChange={ handleFilterChange }\n        isLoading={ isFetching || isFiltering }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ filterValue === ''\n              ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            Icon={ SearchIcon }\n            PrimaryAction={ () =>\n              filterValue !== '' ? (\n                <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips(filterValue, intl),\n          onDelete: () => handleFilterChange('')\n        } }\n      />\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}