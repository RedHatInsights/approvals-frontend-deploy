{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-context.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","sortBy","paginationQuery","Math","max","limit","offset","filterQuery","sortQuery","property","direction","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","showWorkflow","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","edit","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","up","down","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","updateWorkflow","workflowData","intl","data","notifications","fulfilled","variant","title","formatMessage","setFilterValueWorkflows","asyncDebounce","name","fetchWorkflowByName","then","find","wf","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","loadOptions","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","sequenceField","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","onSubmit","group_refs","values","workflow","listTemplates","Error","addWorkflowToTemplate","addWorkflow","group","schema","disableSubmit","useWorkflow","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","resetSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useEffect","apiProps","removeWf","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","key","Fragment","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","isDisabled","onClick","Spinner","commonMessages","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","propTypes","PropTypes","func","array","WorkflowTableContext","createContext","MoveButtons","cache","useContext","isUpdating","updateSequence","process","debouncedMove","Stack","StackItem","string","number","GroupsLabels","Flex","FlexItem","Label","arrayOf","shape","SelectBox","setSelectedWorkflows","Checkbox","isChecked","includes","onChange","createRows","cells","reducer","state","initialValues","prepareInitialValues","wfData","groupOptions","EditWorkflow","loadedWorkflow","useReducer","stateDispatch","FormTemplate","props","submitLabel","save","buttonClassName","columns","selectedAll","selectAll","transforms","sortable","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","areSelectedAll","rows","selected","every","row","unique","self","indexOf","workflowsListState","action","isFetching","isFiltering","Workflows","moveFunctionsCache","useRef","filterValueRedux","initialState","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","Provider","current","onSort","_e","sortWorkflows","exact","path","routesLinks","add","render","postMethod","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","Icon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.aca2847c348fff65cd44.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Set groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n  const sortQuery = sortBy ? `&sort_by=${sortBy.property}:${sortBy.direction}` : '';\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}${sortQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  },\n  up: {\n    id: 'workflowMessages.up',\n    defaultMessage: 'up'\n  },\n  down: {\n    id: 'workflowMessages.down',\n    defaultMessage: 'down'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { sortBy, workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination, sortBy)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const sortWorkflows = (sortBy) => ({\n  type: ActionTypes.SORT_WORKFLOWS,\n  payload: sortBy\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n\nexport const moveSequence = process => ({\n  type: ActionTypes.MOVE_SEQUENCE,\n  payload: process\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\nimport worfklowMessages from '../messages/workflows.messages';\n\nconst sequenceField = (intl) => ({\n  component: componentTypes.TEXT_FIELD,\n  name: 'sequence',\n  label: intl.formatMessage(worfklowMessages.enterSequence),\n  isRequired: true,\n  validate: [{ type: validatorTypes.REQUIRED }]\n});\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl),\n    ...(id ? [ sequenceField(intl) ] : [])\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        disableSubmit={ [ 'validating' ] }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  resetSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => resetSelectedWorkflows())\n  .then(() => fetchData());\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\" key=\"submit\" variant=\"danger\" type=\"button\" isDisabled={ submitting } onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\" key=\"cancel\" variant=\"link\" type=\"button\" isDisabled={ submitting } onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedWorkflows: PropTypes.func.isRequired\n};\n\nexport default RemoveWorkflowModal;\n","import { createContext } from 'react';\n\nconst WorkflowTableContext = createContext({ selectedWorkflows: []});\n\nexport default WorkflowTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem, Stack, StackItem, Button, Checkbox } from '@patternfly/react-core';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport WorkflowTableContext from './workflow-table-context';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport { updateWorkflow, fetchWorkflows, moveSequence } from '../../redux/actions/workflow-actions';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nconst debouncedMove = (cache, id) => {\n  if (cache[id]) {\n    return cache[id];\n  }\n\n  cache[id] = asyncDebounce(\n    (workflow, dispatch, intl) => dispatch(updateWorkflow(workflow, intl))\n    .then(() => dispatch(fetchWorkflows())),\n    1500\n  );\n\n  return cache[id];\n};\n\nexport const MoveButtons = ({ id, sequence }) => {\n  const { cache } = useContext(WorkflowTableContext);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { isUpdating, direction, property } = useSelector(\n    ({ workflowReducer: { isUpdating, isLoading, sortBy: { direction, property }}}) => (\n      { isUpdating: isUpdating > 0 || isLoading, direction, property }\n    )\n  );\n\n  const updateSequence = (sequence) => {\n    dispatch(moveSequence({ id, sequence }));\n\n    return debouncedMove(cache, id)({ id, sequence }, dispatch, intl);\n  };\n\n  if (property !== 'sequence') {\n    return null;\n  }\n\n  return (\n    <Stack>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.up) }\n          id={ `up-${id}` }\n          onClick={ () => updateSequence(direction === 'asc' ? sequence - 1 : sequence + 1) }\n          isDisabled={ direction === 'asc' && sequence === 1 || isUpdating }\n        >\n          <AngleUpIcon />\n        </Button>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.down) }\n          id={ `down-${id}` }\n          onClick={ () => updateSequence(direction === 'asc' ? sequence + 1 : sequence - 1) }\n          isDisabled={ direction === 'desc' && sequence === 1 || isUpdating }\n        >\n          <AngleDownIcon />\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nMoveButtons.propTypes = {\n  id: PropTypes.string.isRequired,\n  sequence: PropTypes.number.isRequired\n};\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const SelectBox = ({ id }) => {\n  const { selectedWorkflows, setSelectedWorkflows } = useContext(WorkflowTableContext);\n\n  return (\n    <Checkbox\n      id={ `select-${id}` }\n      isChecked={ selectedWorkflows.includes(id) }\n      onChange={ () => setSelectedWorkflows(id) }\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  cells: [\n    <React.Fragment key={ `${id}-buttons` }>\n      <MoveButtons id={ id } sequence={ sequence } />\n    </React.Fragment>,\n    <React.Fragment key={ `${id}-checkbox` }>\n      <SelectBox id={ id } />\n    </React.Fragment>,\n    sequence,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    onCancel();\n\n    const workflowData = { ...values, group_refs: group_refs.map(group => ({ name: group.label, uuid: group.value })) };\n\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, truncate } from '@patternfly/react-table';\nimport { fetchWorkflows, sortWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\nimport WorkflowTableContext from './workflow-table-context';\n\nconst columns = (intl, selectedAll, selectAll) => [\n  { title: '' },\n  { title: <Checkbox onChange={ selectAll } isChecked={ selectedAll } id=\"select-all\"/> },\n  { title: intl.formatMessage(worfklowMessages.sequence), transforms: [ sortable ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name),\n    transforms: [ sortable ]\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ sortable ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isFetching: true,\n  isFiltering: false,\n  selectedWorkflows: [],\n  selectedAll: false,\n  rows: []\n});\n\nconst areSelectedAll = (rows = [], selected) => rows.every(row => selected.includes(row.id));\n\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nexport const workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        selectedAll: areSelectedAll(action.payload, state.selectedWorkflows)\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        selectedAll: false,\n        selectedWorkflows: state.selectedWorkflows.includes(action.payload)\n          ? state.selectedWorkflows.filter(id => id !== action.payload)\n          : [ ...state.selectedWorkflows, action.payload ]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedWorkflows: [ ...state.selectedWorkflows, ...action.payload ].filter(unique),\n        selectedAll: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedWorkflows: state.selectedWorkflows.filter(selected => !action.payload.includes(selected)),\n        selectedAll: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedWorkflows: [],\n        selectedAll: false\n      };\n    case 'setFilteringFlag':\n      return {\n        ...state,\n        isFiltering: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const moveFunctionsCache = useRef({});\n  const { workflows: { data, meta }, sortBy, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, sortBy, filterValue: filterValueRedux }}) => ({ workflows, sortBy, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering, selectedWorkflows, selectedAll, rows }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const setSelectedWorkflows = (id) => stateDispatch({ type: 'select', payload: id });\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [ data ]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortWorkflows({ index, direction, property }));\n    return updateWorkflows();\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        resetSelectedWorkflows={ () => stateDispatch({ type: 'resetSelected' }) }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const selectAllFunction = () => selectedAll\n    ? stateDispatch({ type: 'unselectAll', payload: data.map(wf => wf.id) })\n    : stateDispatch({ type: 'selectAll', payload: data.map(wf => wf.id) });\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <WorkflowTableContext.Provider value={ { selectedWorkflows, setSelectedWorkflows, cache: moveFunctionsCache.current } }>\n        <TableToolbarView\n          sortBy={ sortBy }\n          onSort={ onSort }\n          rows={ rows }\n          columns={ columns(intl, selectedAll, selectAllFunction) }\n          fetchData={ updateWorkflows }\n          routes={ routes }\n          actionResolver={ actionResolver }\n          titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n          titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n          pagination={ meta }\n          toolbarButtons={ toolbarButtons }\n          filterValue={ filterValue }\n          onFilterChange={ handleFilterChange }\n          isLoading={ isFetching || isFiltering }\n          renderEmptyState={ () => (\n            <TableEmptyState\n              title={ filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.noResultsFound)\n              }\n              Icon={ SearchIcon }\n              PrimaryAction={ () =>\n                filterValue !== '' ? (\n                  <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                    { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                  : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n              }\n            />\n          ) }\n          activeFiltersConfig={ {\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          } }\n        />\n      </WorkflowTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}