{"version":3,"sources":["webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-groups/add-workflow-wizard.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/edit-workflow-info-modal.js","webpack:///./src/smart-components/workflow/edit-workflow-groups-modal.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/expandable-content.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","sortBy","paginationQuery","Math","max","limit","offset","filterQuery","sortQuery","property","direction","getAxiosInstance","get","APPROVAL_API_BASE","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","defineMessages","require","editInfo","id","defaultMessage","editInformation","editGroups","editSequence","deleteApprovalTitle","approvalProcess","approvalProcesses","fromProcessDependencies","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","editProcessTitle","editSequenceTitle","editGroupsTitle","editGroupsLabel","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","fetchWorkflow","apiProps","showWorkflow","addWorkflow","workflowData","intl","workflow","listTemplates","then","data","Error","addWorkflowToTemplate","notifications","fulfilled","variant","title","formatMessage","description","updateWorkflow","setFilterValueWorkflows","asyncDebounce","name","fetchWorkflowByName","find","wf","formMessages","nameTaken","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","approvalProcessName","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","enterApprovalName","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","setGroups","loadOptions","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","selectPlaceholder","addWorkflowSchema","fields","createApprovalTitle","WIZARD","inModal","showTitle","customTitle","Title","headingLevel","size","enterInfo","generalInformation","nextStep","review","AddWorkflow","useDispatch","push","useHistory","useIntl","showFormControls","onSubmit","wfGroups","values","routes","index","group_refs","group","onCancel","schema","useWorkflow","useSelector","shallowEqual","createSchema","editType","SUB_FORM","className","reducer","state","initialValues","isLoading","EditWorkflowInfoModal","postMethod","useReducer","useQuery","loadedWorkflow","useEffect","Modal","isOpen","onClose","FormTemplate","props","submitLabel","commonMessages","save","buttonClassName","disableSubmit","defaultProps","propTypes","PropTypes","func","string","connect","bindActionCreators","prepareInitialValues","wfData","groupOptions","EditWorkflowGroupsModal","result","RemoveWorkflowModal","ids","fetchData","setSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","finalId","removeWf","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","aria-label","count","header","fill","actions","Button","key","isDisabled","onClick","Fragment","Spinner","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesMessageValue","space","newline","dependenciesList","array","ExpandableContent","groupRefs","small","groups","ref","listGroupNames","join","createRows","selected","cells","parent","columns","tableToolbarMessages","cellFormatters","expandable","transforms","sortable","debouncedFilter","filteringCallback","prepareChips","category","chips","workflowsListState","action","isFetching","isFiltering","Workflows","filterValueRedux","initialState","stateDispatch","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","onSort","_e","sortWorkflows","isSelectable","exact","path","routesLinks","add","render","remove","actionResolver","_workflowData","rowIndex","_event","_rowId","pathname","search","titlePlural","titleSingular","setCheckedItems","checkedWorkflows","toolbarButtons","ToolbarGroup","ToolbarItem","to","style","color","onFilterChange","onCollapse","setRows","setOpen","expandWorkflow","rows","renderEmptyState","noResultsFound","Icon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.6dce6cbd0ad4e8be6aeb.js","sourcesContent":["import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n  const sortQuery = sortBy ? `&sort_by=${sortBy.property}:${sortBy.direction}` : '';\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}${sortQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  editInfo: {\n    id: 'worfklowMessages.editInfo',\n    defaultMessage: 'Edit info'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  editGroups: {\n    id: 'worfklowMessages.editGroups',\n    defaultMessage: 'Edit groups'\n  },\n  editSequence: {\n    id: 'worfklowMessages.editSequence',\n    defaultMessage: 'Edit sequence'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  fromProcessDependencies: {\n    id: 'worfklowMessages.fromProcessDependencies',\n    defaultMessage: '{space}from the following applications: {newline} {dependenciesList}'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed{dependenciesMessageValue}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  editSequenceTitle: {\n    id: 'workflowMessages.editSequenceTitle',\n    defaultMessage: 'Set the sequence for the approval process {name}'\n  },\n  editGroupsTitle: {\n    id: 'workflowMessages.editGroupsTitle',\n    defaultMessage: 'Edit approval process\\'s groups'\n  },\n  editGroupsLabel: {\n    id: 'workflowMessages.editGroupsLabel',\n    defaultMessage: 'Add or remove {name}\\'s groups'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { sortBy, workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination, sortBy)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const expandWorkflow = (id) => ({\n  type: ActionTypes.EXPAND_WORKFLOW,\n  payload: id\n});\n\nexport const sortWorkflows = (sortBy) => ({\n  type: ActionTypes.SORT_WORKFLOWS,\n  payload: sortBy\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'wfGroups',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import React from 'react';\nimport { Title } from '@patternfly/react-core';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\n\nimport formMessages from '../messages/form.messages';\n\nconst addWorkflowSchema = (intl) => ({\n  fields: [{\n    name: 'wizard',\n    title: intl.formatMessage(formMessages.createApprovalTitle),\n    component: componentTypes.WIZARD,\n    inModal: true,\n    fields: [{\n      name: 'general-information',\n      showTitle: true,\n      customTitle: <Title headingLevel=\"h1\" size=\"md\"> { intl.formatMessage(formMessages.enterInfo) } </Title>,\n      title: intl.formatMessage(formMessages.generalInformation),\n      nextStep: 'set-groups',\n      fields: workflowInfoSchema(intl)\n    }, {\n      name: 'set-groups',\n      nextStep: 'review',\n      title: intl.formatMessage(formMessages.setGroups),\n      fields: [ setGroupSelectSchema(intl) ]\n    }, {\n      name: 'review',\n      title: intl.formatMessage(formMessages.review),\n      fields: [{\n        name: 'summary',\n        component: 'summary'\n      }]\n    }]\n  }]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addWorkflow, fetchWorkflows } from '../../../redux/actions/workflow-actions';\nimport routes from '../../../constants/routes';\nimport FormRenderer from '../../common/form-renderer';\nimport addWorkflowSchema from '../../../forms/add-workflow.schema';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ wfGroups = [], ...values }) => {\n    push(routes.workflows.index);\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: wfGroups.length > 0 ? wfGroups.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <FormRenderer\n      showFormControls={ false }\n      onSubmit={ onSave }\n      onCancel={ onCancel }\n      schema={ addWorkflowSchema(intl) }\n    />\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport { useIntl } from 'react-intl';\n\nimport { addWorkflow, updateWorkflow, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport FormRenderer from '../common/form-renderer';\nimport routes from '../../constants/routes';\nimport workflowInfoSchema from '../../forms/workflow-info.schema';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nconst createSchema = (editType, name, intl, id) => editType === 'info' ? ({\n  fields: [{\n    component: componentTypes.SUB_FORM,\n    title: <span className=\"pf-c-title pf-m-md\">\n      { intl.formatMessage(worfklowMessages.editProcessTitle, { name }) }\n    </span>,\n    name: 'info-sub',\n    fields: workflowInfoSchema(intl, id)\n  }]\n}) : ({\n  fields: [{\n    component: componentTypes.SUB_FORM,\n    title: <span className=\"pf-c-title pf-m-md\">\n      { intl.formatMessage(worfklowMessages.editSequenceTitle, { name }) }\n    </span>,\n    name: 'info-sub',\n    fields: [{\n      component: componentTypes.TEXT_FIELD,\n      name: 'sequence',\n      label: intl.formatMessage(worfklowMessages.enterSequence),\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }]\n    }]\n  }]\n});\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditWorkflowInfoModal = ({\n  fetchWorkflow,\n  updateWorkflow,\n  postMethod,\n  editType\n}) => {\n  const [ state, dispatch ] = useReducer(reducer, { isLoading: true });\n\n  const { push } = useHistory();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n  const intl = useIntl();\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => dispatch({ type: 'loaded', initialValues: data.value, schema: createSchema(editType, data.value.name, intl, data.value.id) }));\n    } else {\n      dispatch({ type: 'loaded', initialValues: loadedWorkflow, schema: createSchema(editType, loadedWorkflow.name, intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onSave = ({ name, description, sequence }) => {\n    const workflowData = { id, name, description, sequence };\n    return updateWorkflow(workflowData, intl).then(() => postMethod()).then(() => push(routes.workflows.index));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      title={ editType === 'sequence' ? intl.formatMessage(worfklowMessages.editSequence) : intl.formatMessage(worfklowMessages.editInformation) }\n      variant=\"small\"\n      isOpen\n      onClose={ onCancel }\n    >\n      { state.isLoading && <WorkflowInfoFormLoader/> }\n      {\n        !state.isLoading && <FormRenderer\n          FormTemplate={ (props) => <FormTemplate\n            { ...props }\n            submitLabel={ intl.formatMessage(commonMessages.save) }\n            buttonClassName=\"pf-u-mt-0\"\n            disableSubmit={ [ 'submitting' ] }\n          /> }\n          onCancel={ onCancel }\n          onSubmit={ onSave }\n          initialValues={ state.initialValues }\n          schema={ state.schema }\n        />\n      }\n    </Modal>\n  );\n};\n\nEditWorkflowInfoModal.defaultProps = {\n  editType: 'info'\n};\n\nEditWorkflowInfoModal.propTypes = {\n  fetchWorkflow: PropTypes.func.isRequired,\n  postMethod: PropTypes.func.isRequired,\n  updateWorkflow: PropTypes.func.isRequired,\n  editType: PropTypes.string\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  addWorkflow,\n  updateWorkflow,\n  fetchWorkflow\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(EditWorkflowInfoModal);\n","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport { useIntl } from 'react-intl';\n\nimport FormRenderer from '../common/form-renderer';\nimport { addWorkflow, updateWorkflow, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport setGroupSelectSchema from '../../forms/set-group-select.schema';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nconst createSchema = (name, intl) => ({\n  fields: [{\n    ...setGroupSelectSchema(intl),\n    label: intl.formatMessage(worfklowMessages.editGroupsLabel, { name })\n  }]\n});\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, wfGroups: groupOptions };\n};\n\nconst reducer = (state, { type, initialValues, intl }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        schema: createSchema(initialValues.name, intl),\n        initialValues: prepareInitialValues(initialValues),\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditWorkflowGroupsModal = ({\n  fetchWorkflow,\n  updateWorkflow,\n  postMethod\n}) => {\n  const [ state, dispatch ] = useReducer(reducer, { isLoading: true });\n\n  const intl = useIntl();\n\n  const { push } = useHistory();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id).then((result) => dispatch({ type: 'loaded', initialValues: prepareInitialValues(result.value), intl }));\n    } else {\n      dispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), intl });\n    }\n  }, []);\n\n  const onSave = ({ wfGroups }) => {\n    const workflowData = { group_refs: wfGroups ? wfGroups.map(group => ({ name: group.label, uuid: group.value })) : []};\n    return updateWorkflow({ id, ...workflowData }, intl).then(() => postMethod()).then(()=>push('/workflows'));\n  };\n\n  const onCancel = () => push('/workflows');\n\n  return (\n    <Modal\n      title={ intl.formatMessage(worfklowMessages.editGroupsTitle) }\n      variant=\"small\"\n      isOpen\n      onClose={ onCancel }>\n      { state.isLoading ? <WorkflowInfoFormLoader/> : <FormRenderer\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'submitting' ] }\n        /> }\n        onCancel={ onCancel }\n        onSubmit={ onSave }\n        initialValues={ state.initialValues }\n        schema={ state.schema }\n      /> }\n    </Modal>\n  );\n};\n\nEditWorkflowGroupsModal.propTypes = {\n  fetchWorkflow: PropTypes.func.isRequired,\n  postMethod: PropTypes.func.isRequired,\n  updateWorkflow: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  addWorkflow,\n  updateWorkflow,\n  fetchWorkflow\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(EditWorkflowGroupsModal);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  setSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => setSelectedWorkflows([]))\n  .then(() => fetchData());\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\" key=\"submit\" variant=\"danger\" type=\"button\" isDisabled={ submitting } onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\" key=\"cancel\" variant=\"link\" type=\"button\" isDisabled={ submitting } onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            (finalId && !workflow && !fetchedWorkflow)\n              ? <FormItemLoader/>\n              : intl.formatMessage(worfklowMessages.removeProcessDescription, {\n                name: <b key=\"remove-key\">{\n                  finalId\n                    ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n                    : (<React.Fragment>\n                      { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n                    </React.Fragment>)\n                }</b>,\n                dependenciesMessageValue:\n                      isEmpty(dependenciesMessage()) ? '.' : intl.formatMessage(worfklowMessages.fromProcessDependencies, {\n                        space: <React.Fragment>&nbsp;</React.Fragment>,\n                        newline: <React.Fragment><br/><br/></React.Fragment>,\n                        dependenciesList: <React.Fragment>{ dependenciesMessage().map(item => <React.Fragment key={ item }>\n                          <li>{ item }</li>\n                        </React.Fragment>) }</React.Fragment>\n                      })\n              }\n              )\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  setSelectedWorkflows: PropTypes.func.isRequired,\n  ids: PropTypes.array\n};\n\nexport default RemoveWorkflowModal;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport formMessages from '../../messages/form.messages';\n\nconst ExpandableContent = ({ description, groupRefs }) => {\n  const intl = useIntl();\n  const listGroupNames = (groupRefs) => groupRefs.map((ref) => ref.name);\n\n  return (\n    <Fragment>\n      <TextContent>\n        <Text className=\"pf-u-mb-0\" component={ TextVariants.small }>{ intl.formatMessage(formMessages.description) }</Text>\n        <Text className=\"pf-u-mb-md\" component={ TextVariants.p }>{ description }</Text>\n      </TextContent>\n      <TextContent>\n        <Fragment>\n          <Text className=\"pf-u-mb-0\" component={ TextVariants.small }>{ intl.formatMessage(formMessages.groups) }</Text>\n          <Text className=\"pf-u-mb-md\"\n            component={ TextVariants.p }>\n            { listGroupNames(groupRefs).join(',') }\n          </Text>\n        </Fragment>\n      </TextContent>\n    </Fragment>\n  );\n};\n\nExpandableContent.propTypes = {\n  description: PropTypes.string,\n  groupRefs: PropTypes.array.isRequired,\n  id: PropTypes.string.isRequired\n};\n\nexport default ExpandableContent;\n","import React from 'react';\n\nimport ExpandableContent from './expandable-content';\n\nexport const createRows = (data) =>\n  data.reduce((acc,\n    {\n      id,\n      name,\n      description,\n      sequence,\n      group_refs\n    }, key) => ([\n    ...acc, {\n      id,\n      isOpen: false,\n      selected: false,\n      cells: [ name, description, sequence ]\n    }, {\n      parent: key * 2,\n      cells: [{ title: <ExpandableContent\n        description={ description }\n        groupRefs={ group_refs }\n        id={ id }\n      /> }]\n    }\n  ]), []);\n\n","import React, { Fragment, useEffect, useReducer, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { expandable, sortable } from '@patternfly/react-table';\nimport { fetchWorkflows, expandWorkflow, sortWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-groups/add-workflow-wizard';\nimport EditWorkflowInfo from './edit-workflow-info-modal';\nimport EditWorkflowGroups from './edit-workflow-groups-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\n\nconst columns = (intl) => [{\n  title: intl.formatMessage(tableToolbarMessages.name),\n  cellFormatters: [ expandable ],\n  transforms: [ sortable ]\n},\n{ title: intl.formatMessage(formMessages.description), transforms: [ sortable ]},\n{ title: intl.formatMessage(worfklowMessages.sequence), transforms: [ sortable ]}\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n});\n\nconst workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const [ selectedWorkflows, setSelectedWorkflows ] = useState([]);\n  const { workflows: { data, meta }, sortBy, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, sortBy, filterValue: filterValueRedux }}) => ({ workflows, sortBy, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortWorkflows({ index, direction, property }));\n    return updateWorkflows();\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editInfo } render={ props => <EditWorkflowInfo editType='info' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editGroups } render={ props => <EditWorkflowGroups editType='groups' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.editSequence } render={ props => <EditWorkflowInfo editType='sequence' { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        setSelectedWorkflows={ setSelectedWorkflows }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = (_workflowData, { rowIndex }) => rowIndex % 2 === 1 ?\n    null\n    : [\n      {\n        title: intl.formatMessage(worfklowMessages.editInfo),\n        component: 'button',\n        onClick: (_event, _rowId, workflow) =>\n          history.push({ pathname: routesLinks.workflows.editInfo, search: `?workflow=${workflow.id}` })\n      },\n      {\n        title: intl.formatMessage(worfklowMessages.editGroups),\n        component: 'button',\n        onClick: (_event, _rowId, workflow) =>\n          history.push({ pathname: routesLinks.workflows.editGroups, search: `?workflow=${workflow.id}` })\n      },\n      {\n        title: intl.formatMessage(worfklowMessages.editSequence),\n        component: 'button',\n        onClick: (_event, _rowId, workflow) =>\n          history.push({ pathname: routesLinks.workflows.editSequence, search: `?workflow=${workflow.id}` })\n      },\n      {\n        title: intl.formatMessage(commonMessages.delete),\n        component: 'button',\n        onClick: (_event, _rowId, workflow) =>\n          history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n      }\n    ];\n\n  const setCheckedItems = (checkedWorkflows) =>\n    setSelectedWorkflows(checkedWorkflows.map(wf => wf.id));\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.createApprovalTitle) }\n        >\n          { intl.formatMessage(formMessages.createApprovalTitle) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"link\"\n          isDisabled={ !anyWorkflowsSelected }\n          style={ { color: anyWorkflowsSelected ? 'var(--pf-global--danger-color--100)' : 'var(--pf-global--disabled-color--100)'\t} }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  const onCollapse = (id, setRows, setOpen) => {\n    dispatch(expandWorkflow(id));\n    setRows((rows) => setOpen(rows, id));\n  };\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={ sortBy }\n        onSort={ onSort }\n        data={ data }\n        isSelectable={ true }\n        createRows={ createRows }\n        columns={ columns(intl) }\n        fetchData={ updateWorkflows }\n        routes={ routes }\n        actionResolver={ actionResolver }\n        titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n        titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n        pagination={ meta }\n        setCheckedItems={ setCheckedItems }\n        toolbarButtons={ toolbarButtons }\n        filterValue={ filterValue }\n        onFilterChange={ handleFilterChange }\n        isLoading={ isFetching || isFiltering }\n        onCollapse={ onCollapse }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ filterValue === ''\n              ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            Icon={ SearchIcon }\n            PrimaryAction={ () =>\n              filterValue !== '' ? (\n                <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips(filterValue, intl),\n          onDelete: () => handleFilterChange('')\n        } }\n      />\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}