{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","sortBy","paginationQuery","Math","max","limit","offset","filterQuery","sortQuery","property","direction","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","showWorkflow","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","edit","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","setFilterValueWorkflows","asyncDebounce","name","intl","fetchWorkflowByName","then","data","find","wf","formatMessage","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","loadOptions","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","sequenceField","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","title","variant","onSubmit","group_refs","values","workflowData","workflow","listTemplates","Error","addWorkflowToTemplate","notifications","fulfilled","addWorkflow","group","schema","disableSubmit","useWorkflow","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","setSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useEffect","apiProps","removeWf","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","key","Fragment","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","isDisabled","onClick","Spinner","commonMessages","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","propTypes","PropTypes","func","array","GroupsLabels","Flex","FlexItem","Label","string","arrayOf","shape","createRows","selected","cells","reducer","state","initialValues","prepareInitialValues","wfData","groupOptions","EditWorkflow","loadedWorkflow","useReducer","stateDispatch","updateWorkflow","FormTemplate","props","submitLabel","save","buttonClassName","columns","transforms","sortable","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","workflowsListState","action","isFetching","isFiltering","Workflows","filterValueRedux","initialState","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","onSort","_e","sortWorkflows","isSelectable","exact","path","routesLinks","add","render","postMethod","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","setCheckedItems","checkedWorkflows","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","Icon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.652e03f7c405e7da7b6f.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Set groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n  const sortQuery = sortBy ? `&sort_by=${sortBy.property}:${sortBy.direction}` : '';\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}${sortQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { sortBy, workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination, sortBy)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const sortWorkflows = (sortBy) => ({\n  type: ActionTypes.SORT_WORKFLOWS,\n  payload: sortBy\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\nimport worfklowMessages from '../messages/workflows.messages';\n\nconst sequenceField = (intl) => ({\n  component: componentTypes.TEXT_FIELD,\n  name: 'sequence',\n  label: intl.formatMessage(worfklowMessages.enterSequence),\n  isRequired: true,\n  validate: [{ type: validatorTypes.REQUIRED }]\n});\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl),\n    ...(id ? [ sequenceField(intl) ] : [])\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        disableSubmit={ [ 'validating' ] }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  setSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => setSelectedWorkflows([]))\n  .then(() => fetchData());\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\" key=\"submit\" variant=\"danger\" type=\"button\" isDisabled={ submitting } onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\" key=\"cancel\" variant=\"link\" type=\"button\" isDisabled={ submitting } onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  setSelectedWorkflows: PropTypes.func.isRequired,\n  ids: PropTypes.array\n};\n\nexport default RemoveWorkflowModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem } from '@patternfly/react-core';\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  selected: false,\n  cells: [\n    sequence,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    onCancel();\n\n    const workflowData = { ...values, group_refs: group_refs.map(group => ({ name: group.label, uuid: group.value })) };\n\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button } from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { sortable, truncate } from '@patternfly/react-table';\nimport { fetchWorkflows, sortWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\n\nconst columns = (intl) => [\n  { title: intl.formatMessage(worfklowMessages.sequence), transforms: [ sortable ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name),\n    transforms: [ sortable ]\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ sortable ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false\n});\n\nconst workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const [ selectedWorkflows, setSelectedWorkflows ] = useState([]);\n  const { workflows: { data, meta }, sortBy, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, sortBy, filterValue: filterValueRedux }}) => ({ workflows, sortBy, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    dispatch(sortWorkflows({ index, direction, property }));\n    return updateWorkflows();\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        setSelectedWorkflows={ setSelectedWorkflows }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const setCheckedItems = (checkedWorkflows) =>\n    setSelectedWorkflows(checkedWorkflows.map(wf => wf.id));\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={ sortBy }\n        onSort={ onSort }\n        data={ data }\n        isSelectable={ true }\n        createRows={ createRows }\n        columns={ columns(intl) }\n        fetchData={ updateWorkflows }\n        routes={ routes }\n        actionResolver={ actionResolver }\n        titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n        titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n        pagination={ meta }\n        setCheckedItems={ setCheckedItems }\n        toolbarButtons={ toolbarButtons }\n        filterValue={ filterValue }\n        onFilterChange={ handleFilterChange }\n        isLoading={ isFetching || isFiltering }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ filterValue === ''\n              ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            Icon={ SearchIcon }\n            PrimaryAction={ () =>\n              filterValue !== '' ? (\n                <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              ) : null\n            }\n            description={\n              filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips(filterValue, intl),\n          onDelete: () => handleFilterChange('')\n        } }\n      />\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}