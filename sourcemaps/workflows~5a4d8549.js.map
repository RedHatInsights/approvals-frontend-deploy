{"version":3,"sources":["webpack:///./src/messages/form.messages.js","webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/set-current-groups.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-context.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["formMessages","defineMessages","require","createApprovalTitle","id","defaultMessage","generalInformation","setGroups","enterInfo","approvalProcessName","enterApprovalName","description","nameTaken","selectPlaceholder","summary","groups","create","existingGroupsMessage","workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","paginationQuery","Math","max","limit","offset","filterQuery","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","showWorkflow","removeWorkflow","workflowId","a","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","worfklowMessages","edit","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","repositionProcessSuccessTitle","repositionProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","up","down","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","setFilterValueWorkflows","asyncDebounce","name","intl","fetchWorkflowByName","then","data","find","wf","formatMessage","workflowInfoSchema","component","componentTypes","TEXT_FIELD","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","REQUIRED","message","TEXTAREA","RBAC_API_BASE","length","uuid","undefined","setGroupSelectSchema","SELECT","loadOptions","initialValue","clearedValue","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","setCurrentGroupsSchema","initialValues","addWorkflowSchema","fields","AddWorkflow","useDispatch","push","useHistory","useIntl","onCancel","routes","index","Modal","isOpen","onClose","title","variant","onSubmit","group_refs","values","workflowData","workflow","listTemplates","Error","addWorkflowToTemplate","notifications","fulfilled","addWorkflow","group","schema","FormTemplate","props","buttonClassName","disableSubmit","useWorkflow","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","resetSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useEffect","apiProps","removeWf","adjustedOffset","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","key","Fragment","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","ouiaId","isDisabled","onClick","Spinner","commonMessages","deleting","cancel","TextContent","Text","TextVariants","p","dependenciesList","propTypes","PropTypes","func","array","shape","number","WorkflowTableContext","createContext","debouncedMove","cache","reposition","repositionWorkflow","MoveButtons","useContext","isUpdating","property","updateSequence","process","Stack","StackItem","increment","string","GroupsLabels","Flex","FlexItem","Label","arrayOf","SelectBox","setSelectedWorkflows","Checkbox","isChecked","includes","onChange","createRows","cells","reducer","state","prepareInitialValues","wfData","groupOptions","current_groups","EditWorkflow","loadedWorkflow","useReducer","stateDispatch","concat","indexOf","updateWorkflow","submitLabel","save","columns","selectedAll","selectAll","transforms","cellWidth","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","areSelectedAll","rows","selected","every","row","unique","self","workflowsListState","action","isFetching","isFiltering","Workflows","moveFunctionsCache","useRef","filterValueRedux","initialState","history","updateWorkflows","scrollToTop","handleFilterChange","anyWorkflowsSelected","approvalTitle","Provider","current","exact","path","routesLinks","add","render","postMethod","remove","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","toolbarButtons","ToolbarGroup","ToolbarItem","to","onFilterChange","renderEmptyState","noResultsFound","icon","CubesIcon","SearchIcon","PrimaryAction","clearAllFilters","clearAllFiltersDescription","isSearch","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows~5a4d8549.a485a7e84f9c7998f7ee.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst formMessages = defineMessages({\n  createApprovalTitle: {\n    id: 'formMessages.createApprovalTitle',\n    defaultMessage: 'Create approval process'\n  },\n  generalInformation: {\n    id: 'formMessages.generalInformation',\n    defaultMessage: 'General information'\n  },\n  setGroups: {\n    id: 'formMessages.setGroups',\n    defaultMessage: 'Add groups'\n  },\n  enterInfo: {\n    id: 'formMessages.enterInfo',\n    defaultMessage: 'Enter your information'\n  },\n  approvalProcessName: {\n    id: 'formMessages.approvalProcessName',\n    defaultMessage: 'Name'\n  },\n  enterApprovalName: {\n    id: 'formMessages.enterApprovalName',\n    defaultMessage: 'Enter a name for the approval process'\n  },\n  description: {\n    id: 'formMessages.description',\n    defaultMessage: 'Description'\n  },\n  nameTaken: {\n    id: 'formMessages.nameTaken',\n    defaultMessage: 'Name has already been taken'\n  },\n  selectPlaceholder: {\n    id: 'formMessages.selectPlaceholder',\n    defaultMessage: 'Select...'\n  },\n  summary: {\n    id: 'formMessages.summary',\n    defaultMessage: 'Summary'\n  },\n  groups: {\n    id: 'formMessages.groups',\n    defaultMessage: 'Groups'\n  },\n  create: {\n    id: 'formMessages.create',\n    defaultMessage: 'Create'\n  },\n  existingGroupsMessage: {\n    id: 'formMessages.existingGroups',\n    defaultMessage: 'Current groups'\n  }\n});\n\nexport default formMessages;\n","import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflowOld(data) {\n  return workflowApi.reposition(data.id, data);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport function repositionWorkflow(data) {\n  return workflowApi.reposition(data.id, data.sequence);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  repositionProcessSuccessTitle: {\n    id: 'workflowMessages.repositionProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process sequence'\n  },\n  repositionProcessSuccessDescription: {\n    id: 'workflowMessages.repositionProcessSuccessDescription',\n    defaultMessage: `The approval process' sequence was updated successfully.`\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  },\n  up: {\n    id: 'workflowMessages.up',\n    defaultMessage: 'up'\n  },\n  down: {\n    id: 'workflowMessages.down',\n    defaultMessage: 'down'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const repositionWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.REPOSITION_WORKFLOW,\n  payload: WorkflowHelper.repositionWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.repositionProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.repositionProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n\nexport const moveSequence = process => ({\n  type: ActionTypes.MOVE_SEQUENCE,\n  payload: process\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  initialValue: [],\n  clearedValue: [],\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder)\n});\n\nexport default setGroupSelectSchema;\n","import formMessages from '../messages/form.messages';\n\nconst setCurrentGroupsSchema = (intl) => ({\n  component: 'initial-chips',\n  name: 'current_groups',\n  label: intl.formatMessage(formMessages.existingGroupsMessage),\n  initialValues: []\n});\n\nexport default setCurrentGroupsSchema;\n","import workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\nimport setCurrentGroupsSchema from './set-current-groups.schema';\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl),\n    setCurrentGroupsSchema(intl)\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\nimport { defaultSettings, adjustedOffset } from '../../helpers/shared/pagination';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  pagination = defaultSettings,\n  resetSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => resetSelectedWorkflows())\n  .then(() => fetchData({ ...pagination, offset: adjustedOffset(pagination, finalId ? 1 : ids.length) }));\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\"\n          ouiaId={ 'submit-remove-workflow' }\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\"\n          ouiaId={ 'cancel-remove-workflow' }\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedWorkflows: PropTypes.func.isRequired,\n  pagination: PropTypes.shape({ limit: PropTypes.number, offset: PropTypes.number, count: PropTypes.number })\n};\n\nexport default RemoveWorkflowModal;\n","import { createContext } from 'react';\n\nconst WorkflowTableContext = createContext({ selectedWorkflows: []});\n\nexport default WorkflowTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem, Stack, StackItem, Button, Checkbox } from '@patternfly/react-core';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport WorkflowTableContext from './workflow-table-context';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport { repositionWorkflow, fetchWorkflows, moveSequence } from '../../redux/actions/workflow-actions';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nconst debouncedMove = (cache, id) => {\n  if (cache[id]) {\n    return cache[id];\n  }\n\n  cache[id] = asyncDebounce(\n    (workflow, dispatch, intl) => dispatch(repositionWorkflow(workflow, intl))\n    .then(() => dispatch(fetchWorkflows())),\n    1500\n  );\n\n  return cache[id];\n};\n\nexport const MoveButtons = ({ id }) => {\n  const { cache } = useContext(WorkflowTableContext);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { isUpdating, property } = useSelector(\n    ({ workflowReducer: { isUpdating, isLoading }}) => (\n      { isUpdating: isUpdating > 0 || isLoading, property }\n    )\n  );\n\n  const updateSequence = (sequence) => {\n    dispatch(moveSequence({ id, sequence }));\n\n    return debouncedMove(cache, id)({ id, sequence }, dispatch, intl);\n  };\n\n  return (\n    <Stack>\n      <StackItem>\n        <Button\n          ouiaId={ `up-${id}` }\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.up) }\n          id={ `up-${id}` }\n          onClick={ () => updateSequence({ increment: -1 }) }\n          isDisabled={ isUpdating }\n        >\n          <AngleUpIcon />\n        </Button>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.down) }\n          id={ `down-${id}` }\n          onClick={ () => updateSequence({ increment: 1 }) }\n          isDisabled={ isUpdating }\n          ouiaId={ `down-${id}` }\n        >\n          <AngleDownIcon />\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nMoveButtons.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const SelectBox = ({ id }) => {\n  const { selectedWorkflows, setSelectedWorkflows } = useContext(WorkflowTableContext);\n\n  return (\n    <Checkbox\n      id={ `select-${id}` }\n      isChecked={ selectedWorkflows.includes(id) }\n      onChange={ () => setSelectedWorkflows(id) }\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  cells: [\n    <React.Fragment key={ `${id}-buttons` }>\n      <MoveButtons id={ id } ouiaId={ `${id}-buttons` } sequence={ sequence } />\n    </React.Fragment>,\n    <React.Fragment key={ `${id}-checkbox` }>\n      <SelectBox id={ id } />\n    </React.Fragment>,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: [], current_groups: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], description = '', ...values }) => {\n    onCancel();\n    const groups = values.current_groups ?\n      values.current_groups.concat(group_refs?.filter((item) => values.current_groups.indexOf(item) < 0)) : group_refs;\n    const workflowData = { ...values, description, group_refs: groups.map(group => ({ name: group.label, uuid: group.value })) };\n    delete workflowData.current_groups;\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\nimport { truncate, cellWidth } from '@patternfly/react-table';\nimport { fetchWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\nimport WorkflowTableContext from './workflow-table-context';\nimport isEmpty from 'lodash/isEmpty';\nconst columns = (intl, selectedAll, selectAll) => [\n  { title: '', transforms: [ cellWidth(1) ]},\n  { title: <Checkbox onChange={ selectAll } isChecked={ selectedAll } id=\"select-all\"/>, transforms: [ cellWidth(1) ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name)\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ cellWidth(35) ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isFetching: true,\n  isFiltering: false,\n  selectedWorkflows: [],\n  selectedAll: false,\n  rows: []\n});\n\nconst areSelectedAll = (rows = [], selected) => rows.every(row => selected.includes(row.id));\n\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nexport const workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        selectedAll: areSelectedAll(action.payload, state.selectedWorkflows)\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        selectedAll: false,\n        selectedWorkflows: state.selectedWorkflows.includes(action.payload)\n          ? state.selectedWorkflows.filter(id => id !== action.payload)\n          : [ ...state.selectedWorkflows, action.payload ]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedWorkflows: [ ...state.selectedWorkflows, ...action.payload ].filter(unique),\n        selectedAll: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedWorkflows: state.selectedWorkflows.filter(selected => !action.payload.includes(selected)),\n        selectedAll: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedWorkflows: [],\n        selectedAll: false\n      };\n    case 'setFilteringFlag':\n      return {\n        ...state,\n        isFiltering: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const moveFunctionsCache = useRef({});\n  const { workflows: { data, meta }, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, filterValue: filterValueRedux }}) => ({ workflows, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering, selectedWorkflows, selectedAll, rows }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const setSelectedWorkflows = (id) => stateDispatch({ type: 'select', payload: id });\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [ data ]);\n\n  const handleFilterChange = (value) => {\n    stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        pagination={ meta }\n        resetSelectedWorkflows={ () => stateDispatch({ type: 'resetSelected' }) }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const selectAllFunction = () => selectedAll\n    ? stateDispatch({ type: 'unselectAll', payload: data.map(wf => wf.id) })\n    : stateDispatch({ type: 'selectAll', payload: data.map(wf => wf.id) });\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          ouiaId={ 'add-workflow-link' }\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <WorkflowTableContext.Provider value={ { selectedWorkflows, setSelectedWorkflows, cache: moveFunctionsCache.current } }>\n        <TableToolbarView\n          ouiaId={ 'approval-process-table' }\n          rows={ rows }\n          columns={ columns(intl, selectedAll, selectAllFunction) }\n          fetchData={ updateWorkflows }\n          routes={ routes }\n          actionResolver={ actionResolver }\n          titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n          titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n          pagination={ meta }\n          toolbarButtons={ toolbarButtons }\n          filterValue={ filterValue }\n          onFilterChange={ handleFilterChange }\n          isLoading={ isFetching || isFiltering }\n          renderEmptyState={ () => (\n            <TableEmptyState\n              title={ filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.noResultsFound)\n              }\n              icon={ isEmpty(filterValue) ? CubesIcon : SearchIcon }\n              PrimaryAction={ () =>\n                filterValue !== '' ? (\n                  <Button onClick={ () => handleFilterChange('') } variant=\"link\">\n                    { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                  </Button>\n                ) : null\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                  : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n              }\n              isSearch={ !isEmpty(filterValue) }\n            />\n          ) }\n          activeFiltersConfig={ {\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          } }\n        />\n      </WorkflowTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}