{"version":3,"sources":["webpack:///./src/messages/action-modal.messages.js","webpack:///./src/helpers/request/request-helper.js","webpack:///./src/redux/actions/request-actions.js","webpack:///./src/smart-components/request/request-actions.js","webpack:///./src/forms/request-comment-form.schema.js","webpack:///./src/smart-components/request/action-modal.js","webpack:///./src/smart-components/request/request-table-helpers.js","webpack:///./src/smart-components/request/chips-helpers.js","webpack:///./src/smart-components/request/requests-list.js","webpack:///./src/smart-components/request/allrequests.js","webpack:///./src/smart-components/request/EmptyRequestList.js","webpack:///./src/smart-components/request/requests.js"],"names":["actionModalMessages","defineMessages","require","requestTitle","id","defaultMessage","requestActionTitle","actionName","fulfilledAction","failedAction","successTitle","failedTitle","actionApi","getActionApi","graphqlInstance","getGraphqlInstance","sortPropertiesMapper","property","opened","requester","status","filterQuery","filterValue","query","name","push","decision","forEach","dec","join","fetchRequests","filter","pagination","defaultSettings","persona","undefined","sortBy","paginationQuery","Math","max","limit","offset","sortQuery","direction","fetchUrl","APPROVAL_API_BASE","fetchHeaders","getAxiosInstance","method","url","headers","fetchRequestTranscript","requestId","parent_id","APPROVAL_APPROVER_PERSONA","APPROVAL_REQUESTER_PERSONA","data","then","requests","fetchRequestCapabilities","isParent","fetchRequestWithSubrequests","a","requestData","length","number_of_children","result","map","request","find","item","metadata","createRequestAction","actionIn","createAction","dispatch","getState","requestReducer","finalPagination","meta","type","ActionTypes","payload","RequestHelper","fetchRequest","apiProps","fetchRequestContent","intl","notifications","fulfilled","variant","title","formatMessage","description","rejected","sortRequests","setFilterValueRequests","clearFilterValueRequests","resetRequestList","RequestActions","denyLink","approveLink","commentLink","canApproveDeny","canComment","useIntl","state","approveDenyAllowed","isRequestStateActive","commentAllowed","style","display","Fragment","to","pathname","search","className","aria-label","requestsMessages","approveRequest","approveTitle","denyTitle","commentTitle","propTypes","PropTypes","string","object","isRequired","bool","defaultProps","createRequestCommentSchema","isDeny","fields","component","componentTypes","TEXTAREA","label","reasonTitle","validate","validatorTypes","REQUIRED","actionTypeToMsg","Approve","Deny","ActionModal","actionType","closeUrl","postMethod","useHistory","useQuery","onCancel","Modal","isOpen","onClose","schema","onSubmit","operationType","addCommentTitle","operation","routes","index","func","oneOfType","shape","patname","connect","bindActionCreators","capitlize","str","charAt","toUpperCase","slice","createRows","actionResolver","indexpath","reduce","acc","cells","key","requester_name","finished_at","timeAgo","notified_at","created_at","Label","icon","decisionValues","color","displayName","untranslatedMessage","prepareChips","category","tableToolbarMessages","chips","value","requesterColumn","statusColumn","columns","requestsIdColumn","transforms","sortable","cellWidth","wrappable","cellTransforms","breakWord","updatedColumn","debouncedFilter","asyncDebounce","filteringCallback","updateFilter","requestsListState","action","isFetching","nameValue","requesterValue","isFiltering","rows","RequestsList","useSelector","shallowEqual","useReducer","initialState","stateDispatch","userRoles","useContext","UserContext","useDispatch","isApprovalAdmin","useIsApprovalAdmin","isApprovalApprover","useIsApprovalApprover","updateRequests","useEffect","scrollToTop","handleFilterChange","debouncedValue","clearFilters","commonMessages","approvalTitle","onSort","_e","fetchData","exact","path","routesLinks","addComment","render","props","approve","deny","titlePlural","titleSingular","handlePagination","onFilterChange","isLoading","renderEmptyState","isEmpty","noResultsFound","results","Icon","SearchIcon","PrimaryAction","Button","onClick","clearAllFilters","clearAllFiltersDescription","activeFiltersConfig","filters","onDelete","chip","deleteAll","newValue","includes","val","filterConfig","filterValues","placeholder","filterByTitle","toLowerCase","onChange","_event","items","AllRequests","APPROVAL_ADMIN_PERSONA","allrequest","EmptyRequestList","EmptyState","EmptyStateIcon","TextContent","Text","TextVariants","h1","emptyRequestsTitle","EmptyStateBody","emptyRequestsDescription","EmptyStateSecondaryActions","Requests"],"mappings":"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","file":"js/requests~5a4d8549.f73921ddc3c3ca2dbc6c.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst actionModalMessages = defineMessages({\n  requestTitle: {\n    id: 'actionModal.requestTitle',\n    defaultMessage: 'Request #{id}'\n  },\n  requestActionTitle: {\n    id: 'actionModal.requestTitle',\n    defaultMessage: '{actionType} Request #{id}'\n  },\n  actionName: {\n    id: 'actionModal.actionName',\n    defaultMessage: '{actionType} Request'\n  },\n  fulfilledAction: {\n    id: 'actionModal.fullfiledAction',\n    defaultMessage: 'The {actionName} was successful.'\n  },\n  failedAction: {\n    id: 'actionModal.failedAction',\n    defaultMessage: 'The {actionName} action failed.'\n  },\n  successTitle: {\n    id: 'actionModal.successTitle',\n    defaultMessage: 'Success'\n  },\n  failedTitle: {\n    id: 'actionModal.failedTitle',\n    defaultMessage: '{actionName} error'\n  }\n});\n\nexport default actionModalMessages;\n","import { getActionApi, getAxiosInstance, getGraphqlInstance } from '../shared/user-login';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_REQUESTER_PERSONA, APPROVAL_APPROVER_PERSONA } from '../shared/helpers';\n\nconst actionApi = getActionApi();\nconst graphqlInstance = getGraphqlInstance();\n\nconst sortPropertiesMapper = (property) => ({\n  'request-id': 'id',\n  opened: 'created_at',\n  requester: 'requester_name',\n  status: 'state'\n}[property] || property\n);\n\nconst filterQuery = (filterValue) => {\n  const query = [];\n  if (filterValue.name) {\n    query.push(`filter[name][contains_i]=${filterValue.name}`);\n  }\n\n  if (filterValue.requester) {\n    query.push(`filter[requester_name][contains_i]=${filterValue.requester}`);\n  }\n\n  if (filterValue.decision) {\n    filterValue.decision.forEach(dec => {\n      query.push(`filter[decision][eq][]=${dec}`);\n    });\n  }\n\n  return query.join('&');\n};\n\nexport function fetchRequests(filter = {}, pagination = defaultSettings, persona = undefined, sortBy) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const sortQuery = `&sort_by=${sortPropertiesMapper(sortBy.property)}:${sortBy.direction}`;\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/?${filterQuery(filter)}${paginationQuery}${sortQuery}`;\n  const fetchHeaders = persona ? { 'x-rh-persona': persona } : undefined;\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n}\n\nconst requestTranscriptQuery = (parent_id) => `query {\n  requests(id: \"${parent_id}\") {\n    id\n    name\n    number_of_children\n    decision\n    description\n    group_name\n    number_of_finished_children\n    state\n    requester_name\n    actions {\n      id\n      operation\n      comments\n      created_at\n      processed_by\n    }\n    requests {\n      id\n      name\n      number_of_children\n      decision\n      description\n      group_name\n      number_of_finished_children\n      state\n      workflow_id\n      parent_id\n      actions {\n        id\n        operation\n        comments\n        created_at\n        processed_by\n      }\n    }\n  }\n}`;\n\nexport const fetchRequestTranscript = (requestId, persona) => {\n  const fetchHeaders = (persona && persona !== APPROVAL_APPROVER_PERSONA) ? { 'x-rh-persona': persona }\n    : { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return graphqlInstance({ method: 'post', url: `${APPROVAL_API_BASE}/graphql`,\n    headers: fetchHeaders, data: { query: requestTranscriptQuery(requestId) }})\n  .then(({ data: { requests }}) => requests);\n};\n\nexport const fetchRequestContent = (id) => {\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/${id}/content`;\n  const fetchHeaders = { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n};\n\nexport const fetchRequestCapabilities = (id, isParent) => {\n  const fetchUrl = `${APPROVAL_API_BASE}/requests/${id}${isParent ? '/requests' : ''}`;\n  const fetchHeaders = { 'x-rh-persona': APPROVAL_REQUESTER_PERSONA };\n  return getAxiosInstance()({ method: 'get', url: fetchUrl, headers: fetchHeaders });\n};\n\nexport async function fetchRequestWithSubrequests(id, persona) {\n  const requestData = await fetchRequestTranscript(id, persona);\n\n  if (!requestData || requestData.length === 0) { return {}; }\n\n  if (persona === APPROVAL_APPROVER_PERSONA) {\n    if (requestData && requestData.length > 0 && requestData[0].number_of_children > 0) {\n      const result = await fetchRequestCapabilities(id, true);\n\n      if (result && result.data) {\n        requestData[0].requests = requestData[0].requests.map(request => {\n          return {\n            ...result.data.find((item) => (item.id === request.id) && item.metadata),\n            ...request\n          };\n        });\n      }\n    }\n    else {\n      const request = await fetchRequestCapabilities(id, false);\n      if (request) {\n        requestData[0] = { ...requestData[0], metadata: request.metadata };\n      }\n    }\n  }\n\n  return requestData[0];\n}\n\nexport const createRequestAction = (requestId, actionIn) => actionApi.createAction(requestId, actionIn);\n","import * as ActionTypes from '../action-types';\nimport * as RequestHelper from '../../helpers/request/request-helper';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport actionModalMessages from '../../messages/action-modal.messages';\n\nexport const fetchRequests = (persona, pagination) => (dispatch, getState) => {\n  const { sortBy, requests, filterValue } = getState().requestReducer;\n\n  let finalPagination = pagination || defaultSettings;\n\n  if (!pagination && requests) {\n    const { limit, offset } = requests.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch({\n    type: ActionTypes.FETCH_REQUESTS,\n    payload: RequestHelper.fetchRequests(filterValue, finalPagination, persona, sortBy)\n  });\n};\n\nexport const fetchRequest = (apiProps, persona) => ({\n  type: ActionTypes.FETCH_REQUEST,\n  payload: RequestHelper.fetchRequestWithSubrequests(apiProps, persona)\n});\n\nexport const fetchRequestContent = (apiProps, persona) => ({\n  type: ActionTypes.FETCH_REQUEST_CONTENT,\n  payload: RequestHelper.fetchRequestContent(apiProps, persona)\n});\n\nexport const createRequestAction = (actionName, requestId, actionIn, intl) => ({\n  type: ActionTypes.CREATE_REQUEST_ACTION,\n  payload: RequestHelper.createRequestAction(requestId, actionIn),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(actionModalMessages.successTitle),\n        description: intl.formatMessage(actionModalMessages.fulfilledAction, { actionName })\n      },\n      rejected: {\n        variant: 'danger',\n        title: intl.formatMessage(actionModalMessages.failedTitle, { actionName }),\n        description: intl.formatMessage(actionModalMessages.failedAction, { actionName })\n      }\n    }\n  }\n});\n\nexport const sortRequests = (sortBy) => ({\n  type: ActionTypes.SORT_REQUESTS,\n  payload: sortBy\n});\n\nexport const setFilterValueRequests = (filterValue, type) => ({\n  type: ActionTypes.SET_FILTER_REQUESTS,\n  payload: { filterValue, type }\n});\n\nexport const clearFilterValueRequests = () => ({\n  type: ActionTypes.CLEAR_FILTER_REQUESTS\n});\n\nexport const resetRequestList = () => ({\n  type: ActionTypes.RESET_REQUEST_LIST\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Button } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport requestsMessages from '../../messages/requests.messages';\nimport { isRequestStateActive } from '../../helpers/shared/helpers';\n\nconst RequestActions = ({\n  denyLink,\n  approveLink,\n  commentLink,\n  request,\n  canApproveDeny,\n  canComment\n}) => {\n  const intl = useIntl();\n\n  const { id, state } = request;\n  const approveDenyAllowed = isRequestStateActive(state) && canApproveDeny;\n  const commentAllowed = isRequestStateActive(state) && canComment;\n\n  return (\n    <div style={ { display: 'flex' } }>\n      { approveDenyAllowed && (<React.Fragment>\n        <Link\n          to={ { pathname: approveLink, search: `request=${id}` } }\n          className=\"pf-u-mr-sm\"\n          id={ `approve-${request.id}` }\n        >\n          <Button\n            variant=\"primary\"\n            aria-label={ intl.formatMessage(requestsMessages.approveRequest) }\n          >\n            { intl.formatMessage(requestsMessages.approveTitle) }\n          </Button>\n        </Link>\n        <Link\n          to={ { pathname: denyLink, search: `request=${id}` } }\n          className=\"pf-u-mr-sm\"\n          id={ `deny-${request.id}` }\n        >\n          <Button\n            variant=\"danger\"\n            aria-label={ intl.formatMessage(requestsMessages.denyTitle) }\n          >\n            { intl.formatMessage(requestsMessages.denyTitle) }\n          </Button>\n        </Link>\n      </React.Fragment>) }\n      { commentAllowed && <Link\n        to={ { pathname: commentLink, search: `request=${id}` } }\n        id={ `comment-${request.id}` }\n      >\n        <Button\n          variant=\"secondary\"\n          aria-label={ intl.formatMessage(requestsMessages.commentTitle) }\n        >\n          { intl.formatMessage(requestsMessages.commentTitle) }\n        </Button>\n      </Link> }\n    </div>\n  );\n};\n\nRequestActions.propTypes = {\n  denyLink: PropTypes.string,\n  approveLink: PropTypes.string,\n  commentLink: PropTypes.string,\n  request: PropTypes.object.isRequired,\n  canApproveDeny: PropTypes.bool,\n  canComment: PropTypes.bool\n};\n\nRequestActions.defaultProps = {\n  canApproveDeny: true,\n  canComment: true\n};\n\nexport default RequestActions;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport requestsMessages from '../messages/requests.messages';\n\nexport const createRequestCommentSchema = (isDeny = false, intl) => ({\n  fields: [{\n    component: componentTypes.TEXTAREA,\n    name: 'comments',\n    isRequired: isDeny,\n    label: isDeny ? intl.formatMessage(requestsMessages.reasonTitle) : intl.formatMessage(requestsMessages.commentTitle),\n    ...(isDeny && { validate: [{ type: validatorTypes.REQUIRED }]})\n  }]\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormRenderer from '../common/form-renderer';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Modal } from '@patternfly/react-core';\nimport { createRequestAction } from '../../redux/actions/request-actions';\nimport { createRequestCommentSchema } from '../../forms/request-comment-form.schema';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport actionModalMessages from '../../messages/action-modal.messages';\nimport requestsMessages from '../../messages/requests.messages';\n\nconst actionTypeToMsg = {\n  Approve: requestsMessages.approveTitle,\n  Deny: requestsMessages.denyTitle\n};\n\nconst ActionModal = ({\n  actionType,\n  createRequestAction,\n  closeUrl,\n  postMethod\n}) => {\n  const intl = useIntl();\n  const { push } = useHistory();\n  const [{ request: id }] = useQuery([ 'request' ]);\n  const onSubmit = (data) => {\n    const operationType = { 'Add Comment': 'memo', Approve: 'approve', Deny: 'deny' };\n    const actionName = actionType === 'Add Comment'\n      ? intl.formatMessage(requestsMessages.addCommentTitle)\n      : intl.formatMessage(actionModalMessages.actionName, { actionType: intl.formatMessage(actionTypeToMsg[actionType]) }) ;\n\n    return postMethod ?\n      createRequestAction(\n        actionName,\n        id,\n        { operation: operationType[actionType], ...data },\n        intl\n      ).then(() => postMethod()).then(() => push(closeUrl))\n      : createRequestAction(\n        actionName,\n        id,\n        { operation: operationType[actionType], ...data },\n        intl\n      ).then(() => push(closeUrl));\n  };\n\n  const onCancel = () => push(closeUrl);\n\n  return (\n    <Modal\n      variant=\"large\"\n      title={ actionType === 'Add Comment'\n        ? intl.formatMessage(actionModalMessages.requestTitle, { id })\n        : intl.formatMessage(actionModalMessages.requestActionTitle, { id, actionType: intl.formatMessage(actionTypeToMsg[actionType]) })\n      }\n      isOpen\n      onClose={ onCancel }\n    >\n      <FormRenderer\n        schema={ createRequestCommentSchema(actionType === 'Deny', intl) }\n        onSubmit={ onSubmit }\n        onCancel={ onCancel }\n      />\n    </Modal>\n  );\n};\n\nActionModal.defaultProps = {\n  closeUrl: routes.requests.index\n};\n\nActionModal.propTypes = {\n  createRequestAction: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  actionType: PropTypes.string,\n  closeUrl: PropTypes.oneOfType([ PropTypes.string, PropTypes.shape({ patname: PropTypes.string, search: PropTypes.string }) ])\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  createRequestAction\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(ActionModal);\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { timeAgo }  from '../../helpers/shared/helpers';\nimport routes from '../../constants/routes';\nimport { Label } from '@patternfly/react-core';\nimport { decisionValues, untranslatedMessage } from '../../utilities/constants';\n\nexport const capitlize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const createRows = (actionResolver, data, indexpath = routes.request, intl) => data.reduce((acc, request) => ([\n  ...acc, {\n    id: request.id,\n    state: request.state,\n    number_of_children: request.number_of_children,\n    cells: [\n      <Fragment key={ request.id }>\n        <Link to={\n          { pathname: indexpath.index, search: `?request=${request.id}` } }>\n          { request.id }\n        </Link>\n      </Fragment>,\n      request.name,\n      request.requester_name,\n      request.finished_at ? timeAgo(request.finished_at) : (request.notified_at ? timeAgo(request.notified_at) : timeAgo(request.created_at)),\n      <Fragment key={ `decision-${request.id}` }>\n        { actionResolver(request) || (<Label\n          variant=\"outline\"\n          icon={ decisionValues[request.decision]?.icon }\n          color={ decisionValues[request.decision]?.color }\n        >\n          { capitlize(intl.formatMessage(\n              decisionValues[request.decision]?.displayName || untranslatedMessage()\n          )) }\n        </Label>) }\n      </Fragment>\n    ]\n  }\n]), []);\n","import tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\n\nexport const prepareChips = ({ name, requester, decision }, intl) => ([\n  ...(name ? [{\n    category: intl.formatMessage(tableToolbarMessages.name),\n    key: 'name',\n    chips: [{ name, value: name }]\n  }] : []),\n  ...(requester ? [{\n    category: intl.formatMessage(requestsMessages.requesterColumn),\n    key: 'requester',\n    chips: [{ name: requester, value: requester }]\n  }] : []),\n  ...(decision && decision.length > 0 ? [{\n    category: intl.formatMessage(requestsMessages.statusColumn),\n    key: 'decision',\n    chips: decision.map(dec => ({ name: dec, value: dec }))\n  }] : [])\n]);\n","\nimport React, { Fragment, useEffect, useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { sortable, wrappable, cellWidth, breakWord } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { fetchRequests,\n  sortRequests,\n  setFilterValueRequests,\n  clearFilterValueRequests,\n  resetRequestList } from '../../redux/actions/request-actions';\nimport { createRows } from './request-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin, useIsApprovalApprover } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { scrollToTop } from '../../helpers/shared/helpers';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport UserContext from '../../user-context';\nimport { prepareChips } from './chips-helpers';\nimport routes from '../../constants/routes';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\nimport { Route } from 'react-router-dom';\nimport routesLinks from '../../constants/routes';\nimport ActionModal from './action-modal';\n\nconst columns = (intl) => [{\n  title: intl.formatMessage(requestsMessages.requestsIdColumn),\n  transforms: [ sortable, cellWidth(10) ]\n},\n{ title: intl.formatMessage(tableToolbarMessages.name), transforms: [ sortable, wrappable, cellWidth(25) ], cellTransforms: [ breakWord ]},\n{ title: intl.formatMessage(requestsMessages.requesterColumn), transforms: [ sortable, wrappable, cellWidth(25) ]},\n{ title: intl.formatMessage(requestsMessages.updatedColumn), transforms: [ cellWidth(15) ]},\n{ title: intl.formatMessage(requestsMessages.statusColumn), transforms: [ sortable, cellWidth(25) ]}\n];\n\nconst debouncedFilter = asyncDebounce(\n  (dispatch, filteringCallback, persona, updateFilter) => {\n    filteringCallback(true);\n    updateFilter && updateFilter();\n    return dispatch(fetchRequests(persona)).then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst initialState = (nameValue = '', requesterValue = '') => ({\n  nameValue,\n  requesterValue,\n  isOpen: false,\n  isFetching: true,\n  isFiltering: false,\n  rows: []\n});\n\nconst requestsListState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    case 'setNameValue':\n      return { ...state, nameValue: action.payload };\n    case 'setRequesterValue':\n      return { ...state, requesterValue: action.payload };\n    case 'clearFilters':\n      return { ...state, requesterValue: '', nameValue: '', isFetching: true };\n    case 'setFilteringFlag':\n      return { ...state, isFiltering: action.payload };\n    case 'setRows':\n      return { ...state, rows: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst RequestsList = ({ persona, indexpath, actionResolver }) => {\n  const { requests: { data, meta }, sortBy, filterValue } = useSelector(\n    ({ requestReducer: { requests, sortBy, filterValue }}) => ({ requests, sortBy, filterValue }),\n    shallowEqual\n  );\n  const [{ nameValue, isFetching, isFiltering, requesterValue, rows }, stateDispatch ] = useReducer(\n    requestsListState,\n    initialState(filterValue.name, filterValue.requester)\n  );\n\n  const { userRoles: userRoles } = useContext(UserContext);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const updateRequests = (pagination) => {\n    if (!isApprovalApprover && persona === APPROVAL_APPROVER_PERSONA) {\n      stateDispatch({ type: 'setFetching', payload: false });\n      return;\n    }\n\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchRequests(persona, pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.requests.addComment } render={ props => <ActionModal { ...props }\n      actionType={ 'Add Comment' }\n      postMethod={ () => updateRequests(meta) }\n    /> }/>\n    <Route exact path={ routesLinks.requests.approve } render={ props => <ActionModal { ...props } actionType={ 'Approve' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n    <Route exact path={ routesLinks.requests.deny } render={ props => <ActionModal { ...props } actionType={ 'Deny' }\n      postMethod={ () => updateRequests(meta) }\n    /> } />\n  </Fragment>;\n\n  const resetList = () => {\n    dispatch(resetRequestList());\n  };\n\n  useEffect(() => {\n    resetList();\n    updateRequests();\n    scrollToTop();\n  }, [ persona ]);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(actionResolver, data, indexpath, intl) });\n  }, [ data ]);\n\n  const handleFilterChange = (value, type) => {\n    const updateFilter = () => dispatch(setFilterValueRequests(value, type));\n\n    let debouncedValue = false;\n\n    if (type === 'name') {\n      stateDispatch({ type: 'setNameValue', payload: value });\n      debouncedValue = true;\n    } else if (type === 'requester') {\n      stateDispatch({ type: 'setRequesterValue', payload: value });\n      debouncedValue = true;\n    }\n\n    if (!debouncedValue) {\n      dispatch(setFilterValueRequests(value, type));\n    }\n\n    return debouncedFilter(\n      dispatch,\n      (isFiltering) =>\n        stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      persona,\n      debouncedValue && updateFilter\n    );\n  };\n\n  const onSort = (_e, index, direction, { property }) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    dispatch(sortRequests({ index, direction, property }));\n    return updateRequests();\n  };\n\n  const clearFilters = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueRequests());\n    return updateRequests();\n  };\n\n  const onDeleteChip = ([{ key, chips: [{ value }] }]) => {\n    const newValue = [ 'name', 'requester' ].includes(key) ? '' : filterValue[key].filter(val => value !== val);\n    handleFilterChange(newValue, key);\n  };\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <TableToolbarView\n        sortBy={ sortBy }\n        onSort={ onSort }\n        rows={ rows }\n        columns={ columns(intl) }\n        fetchData={ updateRequests }\n        routes={ routes }\n        titlePlural={ intl.formatMessage(requestsMessages.requests) }\n        titleSingular={ intl.formatMessage(requestsMessages.request) }\n        pagination={ meta }\n        handlePagination={ updateRequests }\n        filterValue={ nameValue }\n        onFilterChange={ (value) => handleFilterChange(value, 'name') }\n        isLoading={ isFetching || isFiltering }\n        renderEmptyState={ () => (\n          <TableEmptyState\n            title={ isEmpty(filterValue)\n              ? intl.formatMessage(tableToolbarMessages.noResultsFound, { results: intl.formatMessage(requestsMessages.requests) })\n              : intl.formatMessage(tableToolbarMessages.noResultsFound)\n            }\n            Icon={ SearchIcon }\n            PrimaryAction={ () =>\n              isEmpty(filterValue) ? null : (\n                <Button onClick={ clearFilters } variant=\"link\">\n                  { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                </Button>\n              )\n            }\n            description={\n              isEmpty(filterValue)\n                ? ''\n                : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n            }\n          />\n        ) }\n        activeFiltersConfig={ {\n          filters: prepareChips({ name: nameValue, requester: requesterValue, decision: filterValue.decision }, intl),\n          onDelete: (_e, chip, deleteAll) => deleteAll ? clearFilters() : onDeleteChip(chip)\n        } }\n        filterConfig={ [\n          {\n            label: intl.formatMessage(requestsMessages.requesterColumn),\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.requesterColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'requester'),\n              value: requesterValue\n            }\n          }, {\n            label: intl.formatMessage(requestsMessages.statusColumn),\n            type: 'checkbox',\n            filterValues: {\n              placeholder: intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              'aria-label': intl.formatMessage(\n                tableToolbarMessages.filterByTitle,\n                { title: intl.formatMessage(requestsMessages.statusColumn).toLowerCase() }\n              ),\n              onChange: (_event, value) => handleFilterChange(value, 'decision'),\n              value: filterValue.decision,\n              items: [ 'approved', 'canceled', 'denied', 'error', 'undecided' ].map((state) => ({\n                label: intl.formatMessage(requestsMessages[state]),\n                value: state\n              }))\n            }\n          }\n        ] }\n      />\n    </Fragment>);\n};\n\nRequestsList.propTypes = {\n  routes: PropTypes.func,\n  persona: PropTypes.string,\n  indexpath: PropTypes.shape ({ index: PropTypes.string }),\n  actionResolver: PropTypes.func\n};\n\nRequestsList.defaultProps = {\n  indexpath: routes.request,\n  actionResolver: () => false\n};\n\nexport default RequestsList;\n","import React from 'react';\nimport { APPROVAL_ADMIN_PERSONA } from '../../helpers/shared/helpers';\nimport RequestsList from './requests-list';\nimport routes from '../../constants/routes';\n\nconst AllRequests = () => (\n  <RequestsList\n    persona={ APPROVAL_ADMIN_PERSONA }\n    indexpath={ routes.allrequest }\n  />\n);\n\nexport default AllRequests;\n","import React, { Fragment, useContext } from 'react';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { useIsApprovalAdmin } from '../../helpers/shared/helpers';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport UserContext from '../../user-context';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Text,\n  TextContent,\n  TextVariants\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../messages/requests.messages';\nimport commonMessages from '../../messages/common.message';\n\nconst EmptyRequestList = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        { isApprovalAdmin && <AppTabs/> }\n      </TopToolbar>\n      <div className=\"pf-u-mt-xl\">\n        <EmptyState className=\"pf-u-ml-auto pf-u-mr-auto\">\n          <EmptyStateIcon icon={ SearchIcon } />\n          <TextContent>\n            <Text component={ TextVariants.h1 }>\n              { intl.formatMessage(requestsMessages.emptyRequestsTitle) }\n            </Text>\n          </TextContent>\n          <EmptyStateBody>\n            { intl.formatMessage(requestsMessages.emptyRequestsDescription) }\n          </EmptyStateBody>\n        </EmptyState>\n        <EmptyStateSecondaryActions>\n        </EmptyStateSecondaryActions>\n      </div>\n    </Fragment>);\n};\n\nexport default EmptyRequestList;\n","import React, { useContext } from 'react';\nimport {\n  APPROVAL_APPROVER_PERSONA, useIsApprovalAdmin,\n  useIsApprovalApprover,\n  isRequestStateActive\n} from '../../helpers/shared/helpers';\nimport UserContext from '../../user-context';\nimport routesLinks from '../../constants/routes';\nimport RequestsList from './requests-list';\nimport EmptyRequestList from './EmptyRequestList';\n\nimport RequestActions from './request-actions';\n\nconst Requests = () => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const isApprovalApprover = useIsApprovalApprover(userRoles);\n\n  const actionsDisabled = (requestData) => requestData &&\n    requestData.state ?\n    !isRequestStateActive(requestData.state) || requestData.number_of_children > 0 ||\n      (!isApprovalApprover && !isApprovalAdmin) : true;\n\n  const actionResolver = (request) => (\n    request && request.id && actionsDisabled(request)\n      ? null\n      : <RequestActions\n        commentLink={ routesLinks.requests.addComment }\n        approveLink={ routesLinks.requests.approve }\n        denyLink={ routesLinks.requests.deny }\n        request={ request }\n      />\n  );\n\n  return !isApprovalApprover ?\n    <EmptyRequestList/>\n    : <RequestsList\n      persona={ APPROVAL_APPROVER_PERSONA }\n      actionResolver={ actionResolver }\n    />;\n};\n\nexport default Requests;\n"],"sourceRoot":""}