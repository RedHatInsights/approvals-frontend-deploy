{"version":3,"sources":["webpack:///./src/helpers/workflow/workflow-helper.js","webpack:///./src/messages/workflows.messages.js","webpack:///./src/redux/actions/workflow-actions.js","webpack:///./src/forms/name-async-validator.js","webpack:///./src/forms/workflow-info.schema.js","webpack:///./src/forms/load-groups-debounced.js","webpack:///./src/helpers/group/group-helper.js","webpack:///./src/forms/set-group-select.schema.js","webpack:///./src/forms/set-current-groups.schema.js","webpack:///./src/forms/add-workflow.schema.js","webpack:///./src/smart-components/workflow/add-workflow-modal.js","webpack:///./src/utilities/use-workflows.js","webpack:///./src/smart-components/workflow/remove-workflow-modal.js","webpack:///./src/smart-components/workflow/workflow-table-context.js","webpack:///./src/smart-components/workflow/workflow-table-helpers.js","webpack:///./src/smart-components/workflow/edit-workflow-modal.js","webpack:///./src/smart-components/workflow/workflows.js"],"names":["workflowApi","getWorkflowApi","templateApi","getTemplateApi","fetchWorkflows","filter","pagination","defaultSettings","paginationQuery","Math","max","limit","offset","filterQuery","getAxiosInstance","get","APPROVAL_API_BASE","fetchWorkflow","id","showWorkflow","removeWorkflow","workflowId","destroyWorkflow","removeWorkflows","selectedWorkflows","Promise","all","map","defineMessages","require","edit","defaultMessage","editInformation","deleteApprovalTitle","approvalProcess","approvalProcesses","noApprovalProcesses","createApprovalProcess","sequence","enterSequence","removeProcessTitle","removeProcessAriaLabel","removeProcessDescription","removeProcessDescriptionWithDeps","editProcessTitle","addProcessSuccessTitle","addProcessSuccessDescription","updateProcessSuccessTitle","updateProcessSuccessDescription","repositionProcessSuccessTitle","repositionProcessSuccessDescription","removeProcessSuccessTitle","removeProcessSuccessDescription","removeProcessesSuccessTitle","removeProcessesSuccessDescription","up","down","dispatch","getState","workflowReducer","workflows","filterValue","finalPagination","meta","type","ActionTypes","payload","WorkflowHelper","setFilterValueWorkflows","asyncDebounce","name","intl","fetchWorkflowByName","then","data","find","wf","formatMessage","formMessages","component","componentTypes","isRequired","label","validate","value","debouncedValidatorName","validatorTypes","message","RBAC_API_BASE","length","uuid","undefined","resolveNewGroupsProps","props","_fieldApi","formOptions","initialGroups","values","current_groups","key","loadOptions","option","isDisabled","initialValue","clearedValue","noValueUpdates","isMulti","isSearchable","simpleValue","menuIsPortal","isClearable","placeholder","resolveProps","initialValues","fields","workflowInfoSchema","setGroupSelectSchema","setCurrentGroupsSchema","useDispatch","push","useHistory","useIntl","onCancel","routes","Modal","isOpen","onClose","title","variant","onSubmit","group_refs","workflowData","workflow","listTemplates","Error","addWorkflowToTemplate","notifications","fulfilled","worfklowMessages","description","addWorkflow","group","schema","addWorkflowSchema","FormTemplate","buttonClassName","disableSubmit","useSelector","shallowEqual","RemoveWorkflowModal","ids","fetchData","resetSelectedWorkflows","useState","fetchedWorkflow","setFetchedWorkflow","submitting","setSubmitting","useQuery","finalId","useWorkflow","useEffect","apiProps","dependenciesMessage","isEmpty","metadata","object_dependencies","Object","keys","reduce","acc","item","APP_DISPLAY_NAME","isLoading","aria-label","count","header","Title","size","headingLevel","fill","className","actions","Button","ouiaId","onClick","adjustedOffset","Spinner","commonMessages","TextContent","Text","TextVariants","dependenciesList","propTypes","PropTypes","createContext","MoveButtons","cache","useContext","WorkflowTableContext","isUpdating","property","updateSequence","process","reposition","repositionWorkflow","debouncedMove","Stack","StackItem","increment","GroupsLabels","Flex","FlexItem","Label","SelectBox","setSelectedWorkflows","Checkbox","isChecked","includes","onChange","createRows","cells","reducer","state","prepareInitialValues","wfData","groupOptions","loadedWorkflow","useReducer","stateDispatch","groups","concat","indexOf","updateWorkflow","submitLabel","columns","selectedAll","selectAll","transforms","cellWidth","tableToolbarMessages","cellTransforms","truncate","debouncedFilter","filteringCallback","prepareChips","category","chips","areSelectedAll","rows","selected","every","row","unique","index","self","workflowsListState","action","isFetching","isFiltering","moveFunctionsCache","useRef","filterValueRedux","initialState","history","updateWorkflows","clearFilters","handleFilterChange","anyWorkflowsSelected","Fragment","current","Route","exact","path","routesLinks","render","postMethod","EditWorkflow","actionResolver","_event","_rowId","pathname","search","titlePlural","titleSingular","toolbarButtons","ToolbarGroup","ToolbarItem","Link","to","onFilterChange","renderEmptyState","icon","PlusCircleIcon","SearchIcon","PrimaryAction","isSearch","activeFiltersConfig","filters","onDelete"],"mappings":"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","file":"js/workflows.js","sourcesContent":["import { getWorkflowApi, getTemplateApi, getAxiosInstance } from '../shared/user-login';\nimport { defaultSettings } from '../shared/pagination';\nimport { APPROVAL_API_BASE } from '../../utilities/constants';\n\nconst workflowApi = getWorkflowApi();\nconst templateApi = getTemplateApi();\n\nexport function fetchWorkflows(filter = '', pagination = defaultSettings) {\n  const paginationQuery = `&limit=${Math.max(pagination.limit, 10)}&offset=${pagination.offset}`;\n  const filterQuery = `&filter[name][contains_i]=${filter}`;\n\n  return getAxiosInstance().get(\n    `${APPROVAL_API_BASE}/workflows/?${filterQuery}${paginationQuery}`\n  );\n}\n\nexport const fetchWorkflow = (id) => workflowApi.showWorkflow(id);\n\nexport function fetchWorkflowByName(name) {\n  return fetchWorkflows(name);\n}\n\nexport function updateWorkflowOld(data) {\n  return workflowApi.reposition(data.id, data);\n}\n\nexport function updateWorkflow(data) {\n  return workflowApi.updateWorkflow(data.id, data);\n}\n\nexport function repositionWorkflow(data) {\n  return workflowApi.reposition(data.id, data.sequence);\n}\n\nexport  function addWorkflow(workflow) {\n  return templateApi.listTemplates().then(({ data }) => {\n    // workaround for v1. Need to pass template ID with the workflow. Assigning to first template\n    if (!data[0]) {\n      throw new Error('No template exists');\n    }\n\n    return data[0].id;\n\n  }).then(id => workflowApi.addWorkflowToTemplate(id, workflow, {}));\n}\n\nexport async function removeWorkflow(workflowId) {\n  return await workflowApi.destroyWorkflow(workflowId);\n}\n\nexport async function removeWorkflows(selectedWorkflows) {\n  return Promise.all(selectedWorkflows.map(async workflowId => await workflowApi.destroyWorkflow(workflowId)));\n}\n\n","const { defineMessages } = require('react-intl');\n\nconst worfklowMessages = defineMessages({\n  edit: {\n    id: 'worfklowMessages.edit',\n    defaultMessage: 'Edit'\n  },\n  editInformation: {\n    id: 'worfklowMessages.editInformation',\n    defaultMessage: 'Edit information'\n  },\n  deleteApprovalTitle: {\n    id: 'worfklowMessages.deleteApprovalTitle',\n    defaultMessage: 'Delete approval process'\n  },\n  approvalProcess: {\n    id: 'worfklowMessages.approvalProcess',\n    defaultMessage: 'approval process'\n  },\n  approvalProcesses: {\n    id: 'worfklowMessages.approvalProcesses',\n    defaultMessage: 'approval processes'\n  },\n  noApprovalProcesses: {\n    id: 'worfklowMessages.noApprovalProcesses',\n    defaultMessage: 'No approval processes'\n  },\n  createApprovalProcess: {\n    id: 'worfklowMessages.createApprovalProcess',\n    defaultMessage: 'Create approval process'\n  },\n  sequence: {\n    id: 'workflowMessages.sequence',\n    defaultMessage: 'Sequence'\n  },\n  enterSequence: {\n    id: 'workflowMessages.enterSequence',\n    defaultMessage: 'Enter sequence'\n  },\n  removeProcessTitle: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}}?'\n  },\n  removeProcessAriaLabel: {\n    id: 'workflowMessages.removeProcessTitle',\n    defaultMessage: 'Delete {count, plural, one {approval process} other {approval processes}} modal'\n  },\n  removeProcessDescription: {\n    id: 'workflowMessages.removeProcessDescription',\n    defaultMessage: '{name} will be removed.'\n  },\n  removeProcessDescriptionWithDeps: {\n    id: 'workflowMessages.removeProcessDescriptionWithDeps',\n    defaultMessage: '{name} will be removed from the following applications: {dependenciesList}'\n  },\n  editProcessTitle: {\n    id: 'workflowMessages.editProcessTitle',\n    defaultMessage: 'Make any changes to approval process {name}'\n  },\n  addProcessSuccessTitle: {\n    id: 'workflowMessages.addProcessSuccessTitle',\n    defaultMessage: 'Success adding approval process'\n  },\n  addProcessSuccessDescription: {\n    id: 'workflowMessages.addProcessSuccessDescription',\n    defaultMessage: 'The approval process was added successfully.'\n  },\n  updateProcessSuccessTitle: {\n    id: 'workflowMessages.updateProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process'\n  },\n  updateProcessSuccessDescription: {\n    id: 'workflowMessages.updateProcessSuccessDescription',\n    defaultMessage: 'The approval process was updated successfully.'\n  },\n  repositionProcessSuccessTitle: {\n    id: 'workflowMessages.repositionProcessSuccessTitle',\n    defaultMessage: 'Success updating approval process sequence'\n  },\n  repositionProcessSuccessDescription: {\n    id: 'workflowMessages.repositionProcessSuccessDescription',\n    defaultMessage: `The approval process' sequence was updated successfully.`\n  },\n  removeProcessSuccessTitle: {\n    id: 'workflowMessages.removeProcessSuccessTitle',\n    defaultMessage: 'Success removing approval process'\n  },\n  removeProcessSuccessDescription: {\n    id: 'workflowMessages.removeProcessSuccessDescription',\n    defaultMessage: 'The approval process was removed successfully.'\n  },\n  removeProcessesSuccessTitle: {\n    id: 'workflowMessages.removeProcessesSuccessTitle',\n    defaultMessage: 'Success removing approval processes'\n  },\n  removeProcessesSuccessDescription: {\n    id: 'workflowMessages.removeProcessesSuccessDescription',\n    defaultMessage: 'The selected approval processes were removed successfully.'\n  },\n  up: {\n    id: 'workflowMessages.up',\n    defaultMessage: 'up'\n  },\n  down: {\n    id: 'workflowMessages.down',\n    defaultMessage: 'down'\n  }\n});\n\nexport default worfklowMessages;\n","import * as ActionTypes from '../action-types';\nimport * as WorkflowHelper from '../../helpers/workflow/workflow-helper';\nimport worfklowMessages from '../../messages/workflows.messages';\n\nexport const fetchWorkflows = (pagination) => (dispatch, getState) => {\n  const { workflows, filterValue } = getState().workflowReducer;\n\n  let finalPagination = pagination;\n\n  if (!pagination && workflows) {\n    const { limit, offset } = workflows.meta;\n    finalPagination = { limit, offset };\n  }\n\n  return dispatch ({\n    type: ActionTypes.FETCH_WORKFLOWS,\n    payload: WorkflowHelper.fetchWorkflows(filterValue, finalPagination)\n  });\n};\n\nexport const fetchWorkflow = apiProps => ({\n  type: ActionTypes.FETCH_WORKFLOW,\n  payload: WorkflowHelper.fetchWorkflow(apiProps)\n});\n\nexport const addWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.ADD_WORKFLOW,\n  payload: WorkflowHelper.addWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.addProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.addProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const updateWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.UPDATE_WORKFLOW,\n  payload: WorkflowHelper.updateWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.updateProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.updateProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const repositionWorkflow = (workflowData, intl) => ({\n  type: ActionTypes.REPOSITION_WORKFLOW,\n  payload: WorkflowHelper.repositionWorkflow(workflowData),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.repositionProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.repositionProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflow = (workflow, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOW,\n  payload: WorkflowHelper.removeWorkflow(workflow),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const removeWorkflows = (workflows, intl) => ({\n  type: ActionTypes.REMOVE_WORKFLOWS,\n  payload: WorkflowHelper.removeWorkflows(workflows),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: intl.formatMessage(worfklowMessages.removeProcessesSuccessTitle),\n        description: intl.formatMessage(worfklowMessages.removeProcessesSuccessDescription)\n      }\n    }\n  }\n});\n\nexport const setFilterValueWorkflows = (filterValue) => ({\n  type: ActionTypes.SET_FILTER_WORKFLOWS,\n  payload: filterValue\n});\n\nexport const clearFilterValueWorkflows = () => ({\n  type: ActionTypes.CLEAR_FILTER_WORKFLOWS\n});\n\nexport const moveSequence = process => ({\n  type: ActionTypes.MOVE_SEQUENCE,\n  payload: process\n});\n","import { fetchWorkflowByName } from '../helpers/workflow/workflow-helper';\nimport asyncDebounce from '../utilities/async-debounce';\nimport formMessages from '../messages/form.messages';\n\nconst validateName = (name, id, intl) => fetchWorkflowByName(name)\n.then(({ data }) => {\n  const workflow = id ?\n    data.find(wf => name === wf.name && id !== wf.id)\n    : data.find(wf => name === wf.name);\n\n  if (workflow) {\n    throw intl.formatMessage(formMessages.nameTaken);\n  }\n});\n\nexport default asyncDebounce(validateName);\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport debouncedValidatorName from './name-async-validator';\nimport formMessages from '../messages/form.messages';\n\nconst workflowInfoSchema = (intl, id) => ([{\n  component: componentTypes.TEXT_FIELD,\n  name: 'name',\n  isRequired: true,\n  id: 'workflow-name',\n  label: intl.formatMessage(formMessages.approvalProcessName),\n  validate: [\n    (value) => debouncedValidatorName(value, id, intl),\n    {\n      type: validatorTypes.REQUIRED,\n      message: intl.formatMessage(formMessages.enterApprovalName)\n    }]\n}, {\n  component: componentTypes.TEXTAREA,\n  name: 'description',\n  id: 'workflow-description',\n  label: intl.formatMessage(formMessages.description)\n}]);\n\nexport default workflowInfoSchema;\n","import asyncDebounce from '../utilities/async-debounce';\nimport { fetchFilterApprovalGroups } from '../helpers/group/group-helper';\n\nexport default asyncDebounce(fetchFilterApprovalGroups);\n","import { getAxiosInstance } from '../shared/user-login';\nimport { RBAC_API_BASE } from '../../utilities/constants';\n\nexport const fetchFilterApprovalGroups = (filterValue) => {\n  const filterQuery = `&name=${filterValue}`;\n  return getAxiosInstance().get(`${RBAC_API_BASE}/groups/?role_names=\",Approval Administrator,Approval Approver,\"\n  ${filterValue && filterValue.length > 0\n    ? filterQuery : ''}`)\n  .then(({ data }) => (data && data.length > 0 ? data.map(({ uuid, name }) => ({ label: name, value: uuid })) : undefined));\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport loadOptions from './load-groups-debounced';\nimport formMessages from '../messages/form.messages';\n\nconst resolveNewGroupsProps = (\n  props,\n  _fieldApi,\n  formOptions\n) => {\n  const initialGroups = formOptions.getState().values.current_groups || [];\n  return {\n    key: initialGroups.length, // used to trigger options re-load and disable options update\n    loadOptions: (...args) =>\n      (props)\n      .loadOptions(...args)\n      .then((data) =>\n        data.map((option) => ({\n          ...option,\n          ...(initialGroups.find(({ value }) => value === option.value) // we have to disable options that are already in the chip group\n            ? { isDisabled: true }\n            : {})\n        }))\n      )\n  };\n};\n\nconst setGroupSelectSchema = (intl) => ({\n  component: componentTypes.SELECT,\n  name: 'group_refs',\n  label: intl.formatMessage(formMessages.setGroups),\n  loadOptions,\n  initialValue: [],\n  clearedValue: [],\n  noValueUpdates: true,\n  isMulti: true,\n  isSearchable: true,\n  simpleValue: false,\n  menuIsPortal: true,\n  isClearable: true,\n  placeholder: intl.formatMessage(formMessages.selectPlaceholder),\n  resolveProps: resolveNewGroupsProps\n});\n\nexport default setGroupSelectSchema;\n","import formMessages from '../messages/form.messages';\n\nconst setCurrentGroupsSchema = (intl) => ({\n  component: 'initial-chips',\n  name: 'current_groups',\n  label: intl.formatMessage(formMessages.existingGroupsMessage),\n  initialValues: []\n});\n\nexport default setCurrentGroupsSchema;\n","import workflowInfoSchema from './workflow-info.schema';\nimport setGroupSelectSchema from './set-group-select.schema';\nimport setCurrentGroupsSchema from './set-current-groups.schema';\n\nconst addWorkflowSchema = (intl, id) => ({\n  fields: [\n    ...workflowInfoSchema(intl, id),\n    setGroupSelectSchema(intl),\n    setCurrentGroupsSchema(intl)\n  ]\n});\n\nexport default addWorkflowSchema;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { addWorkflow, fetchWorkflows } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport formMessages from '../../messages/form.messages';\n\nconst AddWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const onSave = ({ group_refs = [], ...values }) => {\n    push(routes.workflows.index);\n\n    return dispatch(addWorkflow({\n      ...values,\n      group_refs: group_refs.length > 0 ? group_refs.map(group => ({ name: group.label, uuid: group.value })) : []\n    }, intl)).then(() => dispatch(fetchWorkflows()));\n  };\n\n  const onCancel = () => push(routes.workflows.index);\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(formMessages.createApprovalTitle) }\n      variant=\"small\"\n    >\n      <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ addWorkflowSchema(intl) }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      />\n    </Modal>\n  );\n};\n\nexport default AddWorkflow;\n","import { shallowEqual, useSelector } from 'react-redux';\n\nconst useWorkflow = (id) => {\n  const { workflows } = useSelector(({ workflowReducer: { workflows }}) => ({ workflows }), shallowEqual);\n\n  return workflows && workflows.data && workflows.data.find((wf) => wf.id === id);\n};\n\nexport default useWorkflow;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Text, TextContent, TextVariants, Spinner, Title } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { removeWorkflow, removeWorkflows, fetchWorkflow } from '../../redux/actions/workflow-actions';\nimport useQuery from '../../utilities/use-query';\nimport routes from '../../constants/routes';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport commonMessages from '../../messages/common.message';\nimport isEmpty from 'lodash/isEmpty';\nimport { APP_DISPLAY_NAME } from '../../utilities/constants';\nimport { defaultSettings, adjustedOffset } from '../../helpers/shared/pagination';\n\nconst RemoveWorkflowModal = ({\n  ids = [],\n  fetchData,\n  pagination = defaultSettings,\n  resetSelectedWorkflows\n}) => {\n  const dispatch = useDispatch();\n  const [ fetchedWorkflow, setFetchedWorkflow ] = useState();\n  const [ submitting, setSubmitting ] = useState(false);\n  const { push } = useHistory();\n  const [{ workflow: workflowId }] = useQuery([ 'workflow' ]);\n\n  const finalId = workflowId || ids.length === 1 && ids[0];\n\n  const intl = useIntl();\n  const workflow = useWorkflow(finalId);\n\n  useEffect(() => {\n    if (finalId && !workflow) {\n      dispatch(fetchWorkflow(finalId))\n      .then(({ value }) => setFetchedWorkflow(value))\n      .catch(() => push(routes.workflows.index));\n    }\n  }, []);\n\n  if (!finalId && ids.length === 0) {\n    return null;\n  }\n\n  const removeWf = () =>(finalId ? dispatch(removeWorkflow(finalId, intl)) : dispatch(removeWorkflows(ids, intl)))\n  .catch(() => setSubmitting(false))\n  .then(() => push(routes.workflows.index))\n  .then(() => resetSelectedWorkflows())\n  .then(() => fetchData({ ...pagination, offset: adjustedOffset(pagination, finalId ? 1 : ids.length) }));\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSubmit = () => {\n    setSubmitting(true);\n    return removeWf();\n  };\n\n  const dependenciesMessage = () => {\n    const wf = workflow || fetchedWorkflow;\n    if (!wf || isEmpty(wf) ||\n        !wf.metadata || !wf.metadata.object_dependencies\n        || isEmpty(wf.metadata.object_dependencies))\n    {return [];}\n\n    return Object.keys(wf.metadata.object_dependencies)\n    .reduce((acc, item) => [ ...acc, `${APP_DISPLAY_NAME[item] || item}` ], []);\n  };\n\n  const name = (\n    <b key=\"remove-key\">\n      {\n        finalId\n          ? fetchedWorkflow && fetchedWorkflow.name || workflow && workflow.name\n          : (<React.Fragment>\n            { ids.length } { intl.formatMessage(worfklowMessages.approvalProcesses) }\n          </React.Fragment>)\n      }\n    </b>\n  );\n\n  const isLoading = finalId && !workflow && !fetchedWorkflow;\n\n  return (\n    <Modal\n      isOpen\n      variant=\"small\"\n      aria-label={\n        intl.formatMessage(worfklowMessages.removeProcessAriaLabel, { count: finalId ? 1 : ids.length })\n      }\n      header={\n        <Title size=\"2xl\" headingLevel=\"h1\">\n          <ExclamationTriangleIcon size=\"sm\" fill=\"#f0ab00\" className=\"pf-u-mr-sm\" />\n          { intl.formatMessage(worfklowMessages.removeProcessTitle, { count: finalId ? 1 : ids.length }) }\n        </Title>\n      }\n      onClose={ onCancel }\n      actions={ [\n        <Button id=\"submit-remove-workflow\"\n          ouiaId={ 'submit-remove-workflow' }\n          key=\"submit\"\n          variant=\"danger\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onSubmit }>\n          { submitting\n            ? <React.Fragment><Spinner size=\"sm\" className=\"pf-u-mr-md\"/>{ intl.formatMessage(commonMessages.deleting) }</React.Fragment>\n            : intl.formatMessage(commonMessages.delete)\n          }\n        </Button>,\n        <Button id=\"cancel-remove-workflow\"\n          ouiaId={ 'cancel-remove-workflow' }\n          key=\"cancel\"\n          variant=\"link\"\n          type=\"button\"\n          isDisabled={ submitting }\n          onClick={ onCancel }>\n          { intl.formatMessage(commonMessages.cancel) }\n        </Button>\n      ] }\n    >\n      <TextContent>\n        <Text component={ TextVariants.p }>\n          {\n            isLoading\n              ? <FormItemLoader/>\n              : isEmpty(dependenciesMessage())\n                ? intl.formatMessage(worfklowMessages.removeProcessDescription, { name })\n                : intl.formatMessage(worfklowMessages.removeProcessDescriptionWithDeps, {\n                  name,\n                  dependenciesList: <span key=\"span\" className=\"pf-u-mt-lg span-block\">\n                    { dependenciesMessage().map(item => <li key={ item }>{ item }</li>) }\n                  </span>\n                })\n          }\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveWorkflowModal.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  ids: PropTypes.array,\n  resetSelectedWorkflows: PropTypes.func.isRequired,\n  pagination: PropTypes.shape({ limit: PropTypes.number, offset: PropTypes.number, count: PropTypes.number })\n};\n\nexport default RemoveWorkflowModal;\n","import { createContext } from 'react';\n\nconst WorkflowTableContext = createContext({ selectedWorkflows: []});\n\nexport default WorkflowTableContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Flex, FlexItem, Stack, StackItem, Button, Checkbox } from '@patternfly/react-core';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport WorkflowTableContext from './workflow-table-context';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport { repositionWorkflow, fetchWorkflows, moveSequence } from '../../redux/actions/workflow-actions';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nconst debouncedMove = (cache, id) => {\n  if (cache[id]) {\n    return cache[id];\n  }\n\n  cache[id] = asyncDebounce(\n    (workflow, dispatch, intl) => dispatch(repositionWorkflow(workflow, intl))\n    .then(() => dispatch(fetchWorkflows())),\n    1500\n  );\n\n  return cache[id];\n};\n\nexport const MoveButtons = ({ id }) => {\n  const { cache } = useContext(WorkflowTableContext);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const { isUpdating, property } = useSelector(\n    ({ workflowReducer: { isUpdating, isLoading }}) => (\n      { isUpdating: isUpdating > 0 || isLoading, property }\n    )\n  );\n\n  const updateSequence = (sequence) => {\n    dispatch(moveSequence({ id, sequence }));\n\n    return debouncedMove(cache, id)({ id, sequence }, dispatch, intl);\n  };\n\n  return (\n    <Stack>\n      <StackItem>\n        <Button\n          ouiaId={ `up-${id}` }\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.up) }\n          id={ `up-${id}` }\n          onClick={ () => updateSequence({ increment: -1 }) }\n          isDisabled={ isUpdating }\n        >\n          <AngleUpIcon />\n        </Button>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"plain\"\n          aria-label={ intl.formatMessage(worfklowMessages.down) }\n          id={ `down-${id}` }\n          onClick={ () => updateSequence({ increment: 1 }) }\n          isDisabled={ isUpdating }\n          ouiaId={ `down-${id}` }\n        >\n          <AngleDownIcon />\n        </Button>\n      </StackItem>\n    </Stack>\n  );\n};\n\nMoveButtons.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const GroupsLabels = ({ group_refs, id }) => (\n  <Flex key={ id } className=\"pf-u-mt-sm\">\n    { group_refs.map(({ name, uuid }) => (\n      <FlexItem key={ uuid }>\n        <Label className=\"group-label pf-u-mb-sm\">\n          { name }\n        </Label>\n      </FlexItem>\n    )) }\n  </Flex>\n);\n\nGroupsLabels.propTypes = {\n  id: PropTypes.string,\n  group_refs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    uuid: PropTypes.string.isRequired\n  }))\n};\n\nexport const SelectBox = ({ id }) => {\n  const { selectedWorkflows, setSelectedWorkflows } = useContext(WorkflowTableContext);\n\n  return (\n    <Checkbox\n      id={ `select-${id}` }\n      isChecked={ selectedWorkflows.includes(id) }\n      onChange={ () => setSelectedWorkflows(id) }\n    />\n  );\n};\n\nSelectBox.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport const createRows = (data) => data.map((\n  {\n    id,\n    name,\n    description,\n    sequence,\n    group_refs\n  }\n) => ({\n  id,\n  cells: [\n    <React.Fragment key={ `${id}-buttons` }>\n      <MoveButtons id={ id } ouiaId={ `${id}-buttons` } sequence={ sequence } />\n    </React.Fragment>,\n    <React.Fragment key={ `${id}-checkbox` }>\n      <SelectBox id={ id } />\n    </React.Fragment>,\n    name,\n    description,\n    <React.Fragment key={ id }>\n      <GroupsLabels key={ id } group_refs={ group_refs } id={ id } />\n    </React.Fragment>\n  ]\n})\n);\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Modal } from '@patternfly/react-core';\n\nimport { fetchWorkflows, updateWorkflow } from '../../redux/actions/workflow-actions';\nimport routes from '../../constants/routes';\nimport FormRenderer from '../common/form-renderer';\nimport addWorkflowSchema from '../../forms/add-workflow.schema';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport useQuery from '../../utilities/use-query';\nimport useWorkflow from '../../utilities/use-workflows';\nimport { fetchWorkflow } from '../../helpers/workflow/workflow-helper';\nimport { WorkflowInfoFormLoader } from '../../presentational-components/shared/loader-placeholders';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport commonMessages from '../../messages/common.message';\n\nconst reducer = (state, { type, initialValues, schema }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        initialValues,\n        schema,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst prepareInitialValues = (wfData) => {\n  const groupOptions = wfData.group_refs.map((group) =>\n    ({ label: group.name, value: group.uuid })\n  );\n  return { ...wfData, group_refs: [], current_groups: groupOptions };\n};\n\nconst EditWorkflow = () => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const intl = useIntl();\n  const [{ workflow: id }] = useQuery([ 'workflow' ]);\n  const loadedWorkflow = useWorkflow(id);\n\n  const [{ initialValues, schema, isLoading }, stateDispatch ] = useReducer(reducer, { isLoading: true });\n\n  useEffect(() => {\n    if (!loadedWorkflow) {\n      fetchWorkflow(id)\n      .then((data) => stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(data), schema: addWorkflowSchema(intl, data.id) }));\n    } else {\n      stateDispatch({ type: 'loaded', initialValues: prepareInitialValues(loadedWorkflow), schema: addWorkflowSchema(intl, loadedWorkflow.id) });\n    }\n  }, []);\n\n  const onCancel = () => push(routes.workflows.index);\n\n  const onSave = ({ group_refs = [], description = '', ...values }) => {\n    onCancel();\n    const groups = values.current_groups ?\n      values.current_groups.concat(group_refs?.filter((item) => values.current_groups.indexOf(item) < 0)) : group_refs;\n    const workflowData = { ...values, description, group_refs: groups.map(group => ({ name: group.label, uuid: group.value })) };\n    delete workflowData.current_groups;\n    return dispatch(updateWorkflow(workflowData, intl))\n    .then(() => dispatch(fetchWorkflows()));\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={ onCancel }\n      title={ intl.formatMessage(worfklowMessages.editInformation) }\n      description={ !isLoading && intl.formatMessage(worfklowMessages.editProcessTitle, { name: initialValues.name }) }\n      variant=\"small\"\n    >\n      { isLoading && <WorkflowInfoFormLoader/> }\n      { !isLoading && <FormRenderer\n        onSubmit={ onSave }\n        onCancel={ onCancel }\n        schema={ schema }\n        initialValues={ initialValues }\n        FormTemplate={ (props) => <FormTemplate\n          { ...props }\n          submitLabel={ intl.formatMessage(commonMessages.save) }\n          buttonClassName=\"pf-u-mt-0\"\n          disableSubmit={ [ 'validating', 'pristine' ] }\n        /> }\n      /> }\n    </Modal>\n  );\n};\n\nexport default EditWorkflow;\n","import React, { Fragment, useEffect, useReducer, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Route, Link, useHistory } from 'react-router-dom';\nimport { ToolbarGroup, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { truncate, cellWidth } from '@patternfly/react-table';\nimport { clearFilterValueWorkflows, fetchWorkflows, setFilterValueWorkflows } from '../../redux/actions/workflow-actions';\nimport AddWorkflow from './add-workflow-modal';\nimport RemoveWorkflow from './remove-workflow-modal';\nimport { createRows } from './workflow-table-helpers';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport { AppTabs } from '../../smart-components/app-tabs/app-tabs';\nimport { defaultSettings } from '../../helpers/shared/pagination';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport TableEmptyState from '../../presentational-components/shared/table-empty-state';\nimport routesLinks from '../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../messages/common.message';\nimport worfklowMessages from '../../messages/workflows.messages';\nimport formMessages from '../../messages/form.messages';\nimport tableToolbarMessages from '../../messages/table-toolbar.messages';\nimport EditWorkflow from './edit-workflow-modal';\nimport WorkflowTableContext from './workflow-table-context';\nimport isEmpty from 'lodash/isEmpty';\n\nconst columns = (intl, selectedAll, selectAll) => [\n  { title: '', transforms: [ cellWidth(1) ]},\n  { title: <Checkbox onChange={ selectAll } isChecked={ selectedAll } id=\"select-all\"/>, transforms: [ cellWidth(1) ]},\n  {\n    title: intl.formatMessage(tableToolbarMessages.name)\n  },\n  { title: intl.formatMessage(formMessages.description), transforms: [ cellWidth(35) ], cellTransforms: [ truncate ]},\n  { title: intl.formatMessage(formMessages.groups) }\n];\n\nconst debouncedFilter = asyncDebounce(\n  (filter, dispatch, filteringCallback, meta = defaultSettings) => {\n    filteringCallback(true);\n    dispatch(setFilterValueWorkflows(filter, meta));\n    return dispatch(fetchWorkflows(meta))\n    .then(() =>\n      filteringCallback(false)\n    );\n  },\n  1000\n);\n\nconst prepareChips = (filterValue, intl) => filterValue ? [{\n  category: intl.formatMessage(tableToolbarMessages.name),\n  key: 'name',\n  chips: [{ name: filterValue, value: filterValue }]\n}] : [];\n\nconst initialState = (filterValue = '') => ({\n  filterValue,\n  isFetching: true,\n  isFiltering: false,\n  selectedWorkflows: [],\n  selectedAll: false,\n  rows: []\n});\n\nconst areSelectedAll = (rows = [], selected) => rows.every(row => selected.includes(row.id));\n\nconst unique = (value, index, self) => self.indexOf(value) === index;\n\nexport const workflowsListState = (state, action) => {\n  switch (action.type) {\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.payload,\n        selectedAll: areSelectedAll(action.payload, state.selectedWorkflows)\n      };\n    case 'setFetching':\n      return {\n        ...state,\n        isFetching: action.payload\n      };\n    case 'setFilterValue':\n      return { ...state, filterValue: action.payload };\n    case 'select':\n      return {\n        ...state,\n        selectedAll: false,\n        selectedWorkflows: state.selectedWorkflows.includes(action.payload)\n          ? state.selectedWorkflows.filter(id => id !== action.payload)\n          : [ ...state.selectedWorkflows, action.payload ]\n      };\n    case 'selectAll':\n      return {\n        ...state,\n        selectedWorkflows: [ ...state.selectedWorkflows, ...action.payload ].filter(unique),\n        selectedAll: true\n      };\n    case 'unselectAll':\n      return {\n        ...state,\n        selectedWorkflows: state.selectedWorkflows.filter(selected => !action.payload.includes(selected)),\n        selectedAll: false\n      };\n    case 'resetSelected':\n      return {\n        ...state,\n        selectedWorkflows: [],\n        selectedAll: false\n      };\n    case 'setFilteringFlag':\n      return {\n        ...state,\n        isFiltering: action.payload\n      };\n    case 'clearFilters':\n      return { ...state, filterValue: '', isFetching: true };\n    default:\n      return state;\n  }\n};\n\nconst Workflows = () => {\n  const moveFunctionsCache = useRef({});\n  const { workflows: { data, meta }, filterValueRedux } = useSelector(\n    ({ workflowReducer: { workflows, filterValue: filterValueRedux }}) => ({ workflows, filterValueRedux })\n    , shallowEqual\n  );\n  const [{ filterValue, isFetching, isFiltering, selectedWorkflows, selectedAll, rows }, stateDispatch ] = useReducer(\n    workflowsListState,\n    initialState(filterValueRedux)\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const intl = useIntl();\n\n  const setSelectedWorkflows = (id) => stateDispatch({ type: 'select', payload: id });\n\n  const updateWorkflows = (pagination) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchWorkflows(pagination))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  useEffect(() => {\n    updateWorkflows(defaultSettings);\n  }, []);\n\n  useEffect(() => {\n    stateDispatch({ type: 'setRows', payload: createRows(data) });\n  }, [ data ]);\n\n  const clearFilters = () => {\n    stateDispatch({ type: 'clearFilters' });\n    dispatch(clearFilterValueWorkflows());\n    return updateWorkflows(meta);\n  };\n\n  const handleFilterChange = (value) => {\n    (!value || value === '') ? clearFilters() :\n      stateDispatch({ type: 'setFilterValue', payload: value });\n    debouncedFilter(\n      value,\n      dispatch,\n      (isFiltering) => stateDispatch({ type: 'setFilteringFlag', payload: isFiltering }),\n      { ...meta, offset: 0 }\n    );\n  };\n\n  const routes = () => <Fragment>\n    <Route exact path={ routesLinks.workflows.add } render={ props => <AddWorkflow { ...props }\n      postMethod={ updateWorkflows } /> }/>\n    <Route exact path={ routesLinks.workflows.edit } component={ EditWorkflow }/>\n    <Route exact path={ routesLinks.workflows.remove }\n      render={ props => <RemoveWorkflow\n        { ...props }\n        ids={ selectedWorkflows }\n        fetchData={ updateWorkflows }\n        pagination={ meta }\n        resetSelectedWorkflows={ () => stateDispatch({ type: 'resetSelected' }) }\n      /> }\n    />\n  </Fragment>;\n\n  const actionResolver = () => [\n    {\n      title: intl.formatMessage(worfklowMessages.edit),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.edit, search: `?workflow=${workflow.id}` })\n    },\n    {\n      title: intl.formatMessage(commonMessages.delete),\n      component: 'button',\n      onClick: (_event, _rowId, workflow) =>\n        history.push({ pathname: routesLinks.workflows.remove, search: `?workflow=${workflow.id}` })\n    }\n  ];\n\n  const selectAllFunction = () => selectedAll\n    ? stateDispatch({ type: 'unselectAll', payload: data.map(wf => wf.id) })\n    : stateDispatch({ type: 'selectAll', payload: data.map(wf => wf.id) });\n\n  const anyWorkflowsSelected = selectedWorkflows.length > 0;\n\n  const toolbarButtons = () => <ToolbarGroup className={ `pf-u-pl-lg top-toolbar` }>\n    <ToolbarItem>\n      <Link id=\"add-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n        <Button\n          ouiaId={ 'add-workflow-link' }\n          variant=\"primary\"\n          aria-label={ intl.formatMessage(formMessages.create) }\n        >\n          { intl.formatMessage(formMessages.create) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n    <ToolbarItem>\n      <Link\n        id=\"remove-multiple-workflows\"\n        className={ anyWorkflowsSelected ? '' : 'disabled-link' }\n        to={ { pathname: routesLinks.workflows.remove } }\n      >\n        <Button\n          variant=\"secondary\"\n          isDisabled={ !anyWorkflowsSelected }\n          aria-label={ intl.formatMessage(worfklowMessages.deleteApprovalTitle) }\n        >\n          { intl.formatMessage(commonMessages.delete) }\n        </Button>\n      </Link>\n    </ToolbarItem>\n  </ToolbarGroup>;\n\n  return (\n    <Fragment>\n      <TopToolbar>\n        <TopToolbarTitle title={ intl.formatMessage(commonMessages.approvalTitle) }/>\n        <AppTabs/>\n      </TopToolbar>\n      <WorkflowTableContext.Provider value={ { selectedWorkflows, setSelectedWorkflows, cache: moveFunctionsCache.current } }>\n        <TableToolbarView\n          ouiaId={ 'approval-process-table' }\n          rows={ rows }\n          columns={ columns(intl, selectedAll, selectAllFunction) }\n          fetchData={ updateWorkflows }\n          routes={ routes }\n          actionResolver={ actionResolver }\n          titlePlural={ intl.formatMessage(worfklowMessages.approvalProcesses) }\n          titleSingular={ intl.formatMessage(worfklowMessages.approvalProcess) }\n          pagination={ meta }\n          toolbarButtons={ toolbarButtons }\n          filterValue={ filterValue }\n          onFilterChange={ handleFilterChange }\n          isLoading={ isFetching || isFiltering }\n          renderEmptyState={ () => (\n            <TableEmptyState\n              title={ filterValue === ''\n                ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                : intl.formatMessage(tableToolbarMessages.noResultsFound)\n              }\n              icon={ isEmpty(filterValue) ? PlusCircleIcon : SearchIcon }\n              PrimaryAction={ () =>\n                filterValue !== '' ? (\n                  <Button onClick={ () => clearFilters() } variant=\"link\">\n                    { intl.formatMessage(tableToolbarMessages.clearAllFilters) }\n                  </Button>\n                ) : <Link id=\"create-workflow-link\" to={ { pathname: routesLinks.workflows.add } }>\n                  <Button\n                    ouiaId={ 'create-workflow-link' }\n                    variant=\"primary\"\n                    aria-label={ intl.formatMessage(worfklowMessages.createApprovalProcess) }\n                  >\n                    { intl.formatMessage(worfklowMessages.createApprovalProcess) }\n                  </Button>\n                </Link>\n              }\n              description={\n                filterValue === ''\n                  ? intl.formatMessage(worfklowMessages.noApprovalProcesses)\n                  : intl.formatMessage(tableToolbarMessages.clearAllFiltersDescription)\n              }\n              isSearch={ !isEmpty(filterValue) }\n            />\n          ) }\n          activeFiltersConfig={ {\n            filters: prepareChips(filterValue, intl),\n            onDelete: () => handleFilterChange('')\n          } }\n        />\n      </WorkflowTableContext.Provider>\n    </Fragment>\n  );\n};\n\nexport default Workflows;\n"],"sourceRoot":""}