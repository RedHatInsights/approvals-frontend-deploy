{"version":3,"sources":["webpack://approval/./src/messages/app-tabs.messages.js","webpack://approval/./src/forms/initial-chips.js","webpack://approval/./src/smart-components/common/form-renderer.js","webpack://approval/./src/utilities/use-query.js"],"names":["defineMessages","require","myRequests","id","defaultMessage","allRequests","approvalProccess","name","label","useFieldApi","input","value","onChange","handleRemove","filter","item","length","FormGroup","fieldId","ChipGroup","map","Chip","key","onClick","FormRenderer","templateProps","rest","componentMapper","componentTypes","Select","Textarea","TextField","SubForm","InitialChips","FormTemplate","props","propTypes","PropTypes","schema","requiredParams","useLocation","search","query","URLSearchParams","reduce","acc","curr","get"],"mappings":"oHAiBA,SAfwBA,EAFGC,EAAQ,OAA3BD,gBAE+B,CACrCE,WAAY,CACVC,GAAI,kBACJC,eAAgB,eAElBC,YAAa,CACXF,GAAI,mBACJC,eAAgB,gBAElBE,iBAAkB,CAChBH,GAAI,uBACJC,eAAgB,yB,oPCiBpB,QAzBqB,SAAC,GAAoB,IAAlBG,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAY,GAGpCC,aAAY,CAAEF,SADhBG,MAASC,EAF6B,EAE7BA,MAAOC,EAFsB,EAEtBA,SAGZC,EAAe,SAACV,GAEpB,GADAS,EAASD,EAAMG,QAAO,SAACC,GAAD,OAAUA,EAAKJ,QAAUR,MACzB,KAAlBQ,aAAA,EAAAA,EAAOK,QACT,OAAO,MAIX,OACEL,GAASA,EAAMK,OAAS,kBAACC,YAAD,CAAWC,QAAUX,EAAOC,MAAQA,GAC1D,kBAACW,YAAD,KACIR,EAAMS,KAAI,gBAAGZ,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAV,OACV,kBAACU,OAAD,CAAMC,IAAMX,EAAMA,MAAQY,QAAU,kBAAMV,EAAaF,KACnDH,QAIK,ICdnB,IAAMgB,EAAe,SAAC,GAGhB,MAFJC,EAEI,EAFJA,cACGC,GACC,4BACJ,OACE,6BACE,kBAAC,KAAD,QACEC,iBAAe,eACZC,iBAAwBC,OADZ,SAEZD,mBAA0BE,MAFd,SAGZF,qBAA4BG,MAHhB,SAIZH,mBAA0BI,MAJd,SAKb,gBAAiBC,GALJ,GAOfC,aAAe,SAACC,GAAD,OACb,kBAAC,MAAD,UACOA,EACAV,MAGJC,MAMbF,EAAaY,UAAY,CACvBX,cAAeY,WACfC,OAAQD,YAGV,W,2oBCzBA,QAhBiB,WAAyB,IAAxBE,EAAwB,uDAAP,GAAO,GACrBC,mBAAXC,EADgC,EAChCA,OACFC,EAAQ,IAAIC,gBAAgBF,GAClC,MAAO,CACLF,EAAeK,QACb,SAACC,EAAKC,GAAN,cACKD,GADL,cAEGC,EAAOJ,EAAMK,IAAID,OAEpB,IAEFL,EACAC","file":"js/93.js","sourcesContent":["const { defineMessages } = require('react-intl');\n\nconst apsTabsMessages = defineMessages({\n  myRequests: {\n    id: 'tabs.myRequests',\n    defaultMessage: 'My requests'\n  },\n  allRequests: {\n    id: 'tabs.allRequests',\n    defaultMessage: 'All requests'\n  },\n  approvalProccess: {\n    id: 'tabs.approvalProcess',\n    defaultMessage: 'Approval processes'\n  }\n});\n\nexport default apsTabsMessages;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Chip, ChipGroup, FormGroup } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-field-api';\n\nconst InitialChips = ({ name, label }) => {\n  const {\n    input: { value, onChange }\n  } = useFieldApi({ name });\n\n  const handleRemove = (id) => {\n    onChange(value.filter((item) => item.value !== id));\n    if (value?.length === 0) {\n      return null;\n    }\n  };\n\n  return (\n    value && value.length ? <FormGroup fieldId={ name } label={ label }>\n      <ChipGroup>\n        { value.map(({ label, value }) => (\n          <Chip key={ value.value } onClick={ () => handleRemove(value) }>\n            { label }\n          </Chip>\n        )) }\n      </ChipGroup>\n    </FormGroup> : ''\n  );\n};\n\nexport default InitialChips;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactFormRender from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport Select from '@data-driven-forms/pf4-component-mapper/dist/cjs/select';\nimport Textarea from '@data-driven-forms/pf4-component-mapper/dist/cjs/textarea';\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport SubForm from '@data-driven-forms/pf4-component-mapper/dist/cjs/sub-form';\nimport InitialChips from '../../forms/initial-chips';\n\nconst FormRenderer = ({\n  templateProps,\n  ...rest\n}) => {\n  return (\n    <div>\n      <ReactFormRender\n        componentMapper={ {\n          [componentTypes.SELECT]: Select,\n          [componentTypes.TEXTAREA]: Textarea,\n          [componentTypes.TEXT_FIELD]: TextField,\n          [componentTypes.SUB_FORM]: SubForm,\n          'initial-chips': InitialChips\n        } }\n        FormTemplate={ (props) => (\n          <FormTemplate\n            { ...props }\n            { ...templateProps }\n          />\n        ) }\n        { ...rest }\n      />\n    </div>\n  );\n};\n\nFormRenderer.propTypes = {\n  templateProps: PropTypes.object,\n  schema: PropTypes.object\n};\n\nexport default FormRenderer;\n","import { useLocation } from 'react-router-dom';\n\nconst useQuery = (requiredParams = []) => {\n  const { search } = useLocation();\n  const query = new URLSearchParams(search);\n  return [\n    requiredParams.reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: query.get(curr)\n      }),\n      {}\n    ),\n    search,\n    query\n  ];\n};\n\nexport default useQuery;\n"],"sourceRoot":""}