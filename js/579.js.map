{"version":3,"sources":["webpack://approval/./src/smart-components/request/request-detail/request-info-bar.js","webpack://approval/./src/smart-components/request/request-detail/action-transcript.js","webpack://approval/./src/smart-components/request/request-detail/request.js","webpack://approval/./src/smart-components/request/request-detail/request-list.js","webpack://approval/./src/smart-components/request/request-detail/request-transcript.js","webpack://approval/./src/smart-components/request/request-detail/request-detail.js"],"names":["RequestInfoBar","request","requestContent","intl","useIntl","Stack","hasGutter","StackItem","key","Card","CardBody","Title","headingLevel","size","formatMessage","formMessages","TextContent","Text","className","commonMessages","id","component","TextVariants","product","portfolio","platform","requestsMessages","requester_name","order_id","CardTitle","params","Object","keys","map","param","propTypes","PropTypes","isRequired","operationInfo","memo","displayName","icon","approve","deny","notify","skip","start","cancel","error","ActionTranscript","actionList","actionItem","timeAgo","created_at","operation","untranslatedMessage","operationDisplayName","by","processed_by","comments","EmptyTable","centered","aria-label","Request","item","isExpanded","toggleExpand","indexpath","userRoles","useContext","UserContext","isApprovalAdmin","useIsApprovalAdmin","checkCapability","capability","metadata","user_capabilities","DataListItem","aria-labelledby","DataListItemRow","DataListToggle","onClick","DataListItemCells","dataListCells","DataListCell","group_name","name","style","textTransform","state","approveLink","denyLink","commentLink","comment","canApproveDeny","canComment","DataListContent","isHidden","actions","requestActions","data","defaultProps","routes","RequestList","isLoading","items","noItems","useState","expanded","setExpanded","index","indexOf","newExpanded","slice","length","Fragment","PageHeader","PageHeaderTitle","title","DataList","idx","isActive","includes","active_request","RequestTranscript","requests","content","initialState","isFetching","requestState","action","type","payload","RequestDetail","requestBreadcrumbs","useReducer","stateDispatch","useSelector","requestReducer","selectedRequest","useQuery","location","useLocation","dispatch","useDispatch","useEffect","Promise","all","fetchRequest","approvalPersona","fetchRequestContent","then","updateRequest","Switch","Route","exact","path","actionType","postMethod","closeUrl","pathname","search","render","props","breadcrumbs","paddingBottom","Section","Grid","backgroundColor","minHeight","GridItem","md","lg","url"],"mappings":"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","file":"js/579.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card, CardBody, CardTitle,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title\n} from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../../messages/requests.messages';\nimport commonMessages from '../../../messages/common.message';\nimport formMessages from '../../../messages/form.messages';\n\nconst RequestInfoBar = ({ request, requestContent }) => {\n  const intl = useIntl();\n\n  return (\n    <Stack hasGutter>\n      <StackItem key={ 'request-detail-panel' }>\n        <Card>\n          <CardBody>\n            <Stack hasGutter>\n              <StackItem key={ 'request-summary' }>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  { intl.formatMessage(formMessages.summary) }\n                </Title>\n              </StackItem>\n              <StackItem key={ 'request-product' }>\n                <TextContent>\n                  <Text className={ 'font-14' }>\n                    { intl.formatMessage(commonMessages.product) }\n                  </Text>\n                  <Text id='portfolio-item-name' component={ TextVariants.p }>\n                    { requestContent ? requestContent.product : '' }\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem key={ 'request-portfolio' }>\n                <TextContent>\n                  <Text className={ 'font-14' }>\n                    { intl.formatMessage(commonMessages.portfolio) }\n                  </Text>\n                  <Text id='portfolio-name' component={ TextVariants.p }>\n                    { requestContent ? requestContent.portfolio : '' }\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem key={ 'request-platform' }>\n                <TextContent>\n                  <Text className={ 'font-14' }>\n                    { intl.formatMessage(commonMessages.platform) }\n                  </Text>\n                  <Text id='source-name' component={ TextVariants.p }>\n                    { requestContent ? requestContent.platform : ' ' }\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem key={ 'request-requester' }>\n                <TextContent>\n                  <Text className={ 'font-14' }>{ intl.formatMessage(requestsMessages.requesterColumn) }</Text>\n                  <Text id='requester_name' component={ TextVariants.p }>\n                    { request.requester_name }\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem key={ 'request-order' }>\n                <TextContent>\n                  <Text className={ 'font-14' }>{ intl.formatMessage(requestsMessages.orderNumber) }</Text>\n                  <Text id='order_id' component={ TextVariants.p }>\n                    { requestContent ? requestContent.order_id : '' }\n                  </Text>\n                </TextContent>\n              </StackItem>\n            </Stack>\n          </CardBody>\n        </Card>\n      </StackItem>\n      <StackItem key={ 'request-parameters' }>\n        <Card>\n          <CardTitle>\n            <Title headingLevel=\"h5\" size=\"lg\">{ intl.formatMessage(requestsMessages.parameters) }</Title>\n          </CardTitle>\n          <CardBody>\n            <Stack hasGutter>\n              { requestContent.params && Object.keys(requestContent.params).map(param => {\n                return ((requestContent.params[param]) &&\n                      <StackItem key={ `request-${requestContent.params[param]}` }>\n                        <TextContent>\n                          <Text key={ param } className={ 'font-14' }>\n                            { `${param}` }\n                          </Text>\n                          <Text id={ param } component={ TextVariants.p }>\n                            { `${requestContent.params[param]}` }\n                          </Text>\n                        </TextContent>\n                      </StackItem>\n                );\n              })\n              }\n            </Stack>\n          </CardBody>\n        </Card>\n      </StackItem>\n    </Stack>\n  );};\n\nRequestInfoBar.propTypes = {\n  request: PropTypes.shape({\n    requester_name: PropTypes.string,\n    order_id: PropTypes.string\n  }).isRequired,\n  requestContent: PropTypes.object\n};\nexport default RequestInfoBar;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { timeAgo }  from '../../../helpers/shared/helpers';\nimport {\n  Stack,\n  TextContent,\n  Text,\n  TextVariants\n} from '@patternfly/react-core';\nimport { CheckCircleIcon,\n  CommentIcon,\n  EnvelopeIcon,\n  OutlinedTimesCircleIcon,\n  AngleDoubleRightIcon,\n  OnRunningIcon,\n  ErrorCircleOIcon,\n  ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { useIntl } from 'react-intl';\nimport commonMessages from '../../../messages/common.message';\nimport requestsMessages from '../../../messages/requests.messages';\nimport { untranslatedMessage } from '../../../utilities/constants';\n\nconst operationInfo = {\n  memo: { displayName: requestsMessages.commentFrom, icon: <CommentIcon/> },\n  approve: { displayName: requestsMessages.approvedBy, icon: <CheckCircleIcon className=\"pf-u-mr-0 icon-success-fill\"/> },\n  deny: { displayName: requestsMessages.deniedBy, icon: <OutlinedTimesCircleIcon className=\"pf-u-mr-sm icon-danger-fill\"/> },\n  notify: { displayName: requestsMessages.notifiedBy, icon: <EnvelopeIcon/> },\n  skip: { displayName: requestsMessages.skippedBy, icon: <AngleDoubleRightIcon/> },\n  start: { displayName: requestsMessages.startedBy, icon: <OnRunningIcon/> },\n  cancel: { displayName: requestsMessages.canceledBy, icon: <ErrorCircleOIcon className=\"pf-u-mr-sm icon-danger-fill\"/> },\n  error: { displayName: requestsMessages.errorBy, icon: <ExclamationCircleIcon className=\"pf-u-mr-0 icon-danger-fill\"/> }\n};\n\nconst operationIcon = (operation) => operationInfo[operation] ? operationInfo[operation].icon : '';\nconst operationDisplayName = (operation) => operationInfo[operation] ? operationInfo[operation].displayName : untranslatedMessage();\n\nexport const ActionTranscript = ({ actionList }) => {\n  const intl = useIntl();\n\n  return actionList ? (\n    <Stack>\n      { actionList.map(actionItem =>\n        <div key={ `${actionItem.id}-action` }>\n          <TextContent>\n            <Text key={ `${actionItem.id}-action-created_at` }\n              className=\"pf-u-mb-0\" component={ TextVariants.small }>\n              { timeAgo(actionItem.created_at) }\n            </Text>\n            <Text key={ `${actionItem.id}-action-operation` }\n              className=\"pf-u-mb-md\">\n              { operationIcon(actionItem.operation) }&nbsp;\n              { intl.formatMessage(operationDisplayName(actionItem.operation), { by: actionItem.processed_by }) }\n            </Text>\n            { actionItem.comments && (<Text\n              key={ `${actionItem.id}-action-comments` }\n              className=\"pf-u-pt-0\"\n              component={ TextVariants.p }\n            >\n              { actionItem.comments }\n            </Text>) }\n          </TextContent>\n        </div>)\n      }\n    </Stack>\n  ) : <EmptyTable centered aria-label={ intl.formatMessage(commonMessages.noRecords) }/>;\n};\n\nActionTranscript.propTypes = {\n  actionList: PropTypes.array\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIsApprovalAdmin } from '../../../helpers/shared/helpers';\nimport { ActionTranscript } from './action-transcript';\n\nimport {\n  Stack,\n  StackItem,\n  DataListItem,\n  DataListItemRow,\n  DataListCell,\n  DataListToggle,\n  DataListItemCells,\n  DataListContent,\n  TextVariants,\n  TextContent\n} from '@patternfly/react-core';\nimport UserContext from '../../../user-context';\nimport routes from '../../../constants/routes';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../../messages/requests.messages';\nimport { untranslatedMessage } from '../../../utilities/constants';\nimport RequestActions from '../request-actions';\n\nexport const Request = ({ item, isExpanded, toggleExpand, indexpath }) => {\n  const { userRoles: userRoles } = useContext(UserContext);\n  const isApprovalAdmin = useIsApprovalAdmin(userRoles);\n  const intl = useIntl();\n\n  const checkCapability = (item, capability) => {\n    if (isApprovalAdmin) {\n      return true;\n    }\n\n    return item.metadata && item.metadata.user_capabilities && item.metadata.user_capabilities[capability];\n  };\n\n  return (\n    <DataListItem key={ `request-${item.id}` }\n      aria-labelledby={ `check-request-${item.id}` }\n      isExpanded={ isExpanded }>\n      <DataListItemRow>\n        <DataListToggle\n          onClick={ () => toggleExpand(`request-${item.id}`) }\n          isExpanded={ isExpanded }\n          id={ `request-${item.id}` }\n          aria-labelledby={ `request-${item.id} request-${item.id}` }\n          aria-label={ intl.formatMessage(requestsMessages.toggleDetailsFor) }\n        />\n        <DataListItemCells\n          dataListCells={ [\n            <DataListCell key={ item.id }>\n              <span id={ `${item.id}-name` }>{ item.group_name ? item.group_name : item.name }</span>\n            </DataListCell>,\n            <DataListCell key={ `${item.id}-state` }>\n              <span style={ { textTransform: 'capitalize' } } id={ `${item.id}-state` }>\n                { intl.formatMessage(requestsMessages[item.state] || untranslatedMessage(item.state)) }\n              </span>\n            </DataListCell>,\n            <DataListCell key={ `${item.id}-action` }>\n              <RequestActions\n                approveLink={ indexpath.approve }\n                denyLink={ indexpath.deny }\n                commentLink={ indexpath.comment }\n                request={ item }\n                canApproveDeny={ checkCapability(item, 'approve') }\n                canComment={ checkCapability(item, 'memo') }\n              />\n            </DataListCell>\n          ] }/>\n      </DataListItemRow>\n      <DataListContent aria-label={ intl.formatMessage(requestsMessages.requestContentDetails) }\n        isHidden={ !isExpanded }>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent component={ TextVariants.h6 }>\n              <ActionTranscript actionList={ item.actions }/>\n            </TextContent>\n          </StackItem>\n        </Stack>\n      </DataListContent>\n    </DataListItem>\n  );\n};\n\nRequest.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    state: PropTypes.string,\n    actions: PropTypes.array,\n    group_name: PropTypes.string.isRequired,\n    requestActions: PropTypes.shape({\n      data: PropTypes.array\n    }),\n    metadata: PropTypes.shape({\n      user_capabilities: PropTypes.object\n    })\n  }).isRequired,\n  isExpanded: PropTypes.bool.isRequired,\n  toggleExpand: PropTypes.func.isRequired,\n  indexpath: PropTypes.object\n};\n\nRequest.defaultProps = {\n  indexpath: routes.request\n};\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DataList } from '@patternfly/react-core';\nimport { Request }  from './request';\nimport { DataListLoader } from '../../../presentational-components/shared/loader-placeholders';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../../messages/requests.messages';\n\nconst RequestList = ({ isLoading, items, noItems, indexpath }) => {\n  const [ expanded, setExpanded ] = useState([]);\n  const intl = useIntl();\n\n  const toggleExpand = id => {\n    const index = expanded.indexOf(id);\n    const newExpanded =\n      index >= 0 ? [ ...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length) ] : [ ...expanded, id ];\n\n    setExpanded(newExpanded);\n  };\n\n  const isExpanded = key => expanded.includes(key);\n\n  return (\n    <Fragment>\n      <div>\n        { isLoading && (\n          <Fragment>\n            <PageHeader>\n              <PageHeaderTitle title={ noItems }/>\n            </PageHeader>\n            <DataListLoader/>\n          </Fragment>\n        ) }\n      </div>\n      { items.length > 0 && (\n        <DataList aria-label={ intl.formatMessage(requestsMessages.expandableDataList) }>\n          { items.map((item, idx) => (\n            <Request\n              key={ item.id }\n              item={ item }\n              idx={ idx }\n              isActive={ idx === 0 }\n              isExpanded={ isExpanded(`request-${item.id}`) }\n              toggleExpand={ toggleExpand }\n              indexpath={ indexpath }\n            />)) }\n        </DataList>)\n      }\n    </Fragment>\n  );\n};\n\nRequestList.propTypes = {\n  isLoading: PropTypes.bool,\n  items: PropTypes.array,\n  noItems: PropTypes.string,\n  active_request: PropTypes.number,\n  indexpath: PropTypes.object\n};\n\nRequestList.defaultProps = {\n  items: []\n};\n\nexport default RequestList;\n\n","import React, { Fragment }  from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport RequestList from './request-list';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../../messages/requests.messages';\n\nconst RequestTranscript = ({ request, indexpath }) => {\n  const intl = useIntl();\n\n  return (<Fragment>\n    <Title headingLevel=\"h5\" size=\"lg\" className=\"pf-u-pl-lg pf-u-pb-lg\">{ intl.formatMessage(requestsMessages.requestTranscript) }</Title>\n    <RequestList items={ request.requests && request.requests.length > 0 ? request.requests : [ request ] } indexpath={ indexpath } />\n  </Fragment>);\n};\n\nRequestTranscript.propTypes = {\n  request: PropTypes.shape({\n    content: PropTypes.object,\n    requests: PropTypes.array\n  }).isRequired,\n  indexpath: PropTypes.object\n};\n\nexport default RequestTranscript;\n","import React, { Fragment, useContext, useEffect, useReducer } from 'react';\nimport { Route, useLocation, Switch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport ActionModal from '../action-modal';\nimport RequestInfoBar from './request-info-bar';\nimport RequestTranscript from './request-transcript';\nimport { fetchRequest, fetchRequestContent } from '../../../redux/actions/request-actions';\nimport { RequestLoader } from '../../../presentational-components/shared/loader-placeholders';\nimport { TopToolbar, TopToolbarTitle } from '../../../presentational-components/shared/top-toolbar';\nimport UserContext from '../../../user-context';\nimport useQuery from '../../../utilities/use-query';\nimport { approvalPersona } from '../../../helpers/shared/helpers';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport requestsMessages from '../../../messages/requests.messages';\n\nconst initialState = {\n  isFetching: true\n};\n\nconst requestState = (state, action) => {\n  switch (action.type) {\n    case 'setFetching':\n      return { ...state, isFetching: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst RequestDetail = ({ requestBreadcrumbs, indexpath }) => {\n  const [{ isFetching }, stateDispatch ] = useReducer(requestState, initialState);\n\n  const { selectedRequest, requestContent } = useSelector(\n    ({\n      requestReducer: {\n        requestContent: requestContent,\n        selectedRequest: selectedRequest\n      }\n    }) => ({ selectedRequest, requestContent })\n  );\n\n  const [{ request: id }] = useQuery([ 'request' ]);\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { userRoles: userRoles } = useContext(UserContext);\n  const intl = useIntl();\n\n  useEffect(() => {\n    Promise.all([ dispatch(fetchRequest(id, approvalPersona(userRoles))), dispatch(fetchRequestContent(id, approvalPersona(userRoles))) ])\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }));\n  }, []);\n\n  const updateRequest = (id) => {\n    stateDispatch({ type: 'setFetching', payload: true });\n    return dispatch(fetchRequest(id, approvalPersona(userRoles))), dispatch(fetchRequestContent(id, approvalPersona(userRoles)))\n    .then(() => stateDispatch({ type: 'setFetching', payload: false }))\n    .catch(() => stateDispatch({ type: 'setFetching', payload: false }));\n  };\n\n  const renderRequestDetails = () => {\n    if (isFetching || !selectedRequest || Object.keys(selectedRequest).length === 0) {\n      return (\n        <Section style={ { backgroundColor: 'white', minHeight: '100%' } }>\n          <RequestLoader />\n        </Section>\n      );\n    }\n    else {\n      return (\n        <Fragment>\n          <GridItem md={ 4 } lg={ 3 } className=\"info-bar pf-u-p-0\">\n            <RequestInfoBar request={ selectedRequest } requestContent={ requestContent }/>\n          </GridItem>\n          <GridItem md={ 8 } lg={ 9 } className=\"detail-pane pf-u-p-lg\">\n            <RequestTranscript request={ selectedRequest } url={ location.url } indexpath={ indexpath }/>\n          </GridItem>\n        </Fragment>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <Switch>\n        <Route exact path={ indexpath.comment }>\n          <ActionModal actionType={ 'Comment' }\n            postMethod={ () => updateRequest(selectedRequest.id) }\n            closeUrl={ { pathname: indexpath.index, search: `?request=${selectedRequest.id}` } }/>\n        </Route>\n        <Route exact path={ indexpath.approve } render={ props =>\n          <ActionModal { ...props } actionType={ 'Approve' }\n            postMethod={ () => updateRequest(selectedRequest.id) }\n            closeUrl={ { pathname: indexpath.index, search: `?request=${selectedRequest.id}` } } /> } />\n        <Route exact path={ indexpath.deny } render={ props =>\n          <ActionModal { ...props } actionType={ 'Deny' }\n            postMethod={ () => updateRequest(selectedRequest.id) }\n            closeUrl={ { pathname: indexpath.index, search: `?request=${selectedRequest.id}` } } /> } />\n      </Switch>\n      <TopToolbar\n        breadcrumbs={ requestBreadcrumbs }\n        paddingBottom={ true }\n      >\n        <TopToolbarTitle title={ intl.formatMessage(requestsMessages.requestTitle, { id }) } />\n      </TopToolbar>\n      <Section type=\"content\">\n        <Grid hasGutter>\n          { renderRequestDetails() }\n        </Grid>\n      </Section>\n    </Fragment>\n  );\n};\n\nRequestDetail.propTypes = {\n  requestBreadcrumbs: PropTypes.array,\n  indexpath: PropTypes.object\n};\n\nexport default RequestDetail;\n"],"sourceRoot":""}